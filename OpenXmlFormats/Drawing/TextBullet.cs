// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.38967
//    <NameSpace>NPOI.OpenXmlFormats.Dml</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>False</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net20</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>True</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>True</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace NPOI.OpenXmlFormats.Dml
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.Collections.Generic;
    using System.Xml;
    using System.IO;
    using NPOI.OpenXml4Net.Util;




    [Serializable]
    [DebuggerStepThrough]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_TextBulletColorFollowText
    {
    }


    [Serializable]
    [DebuggerStepThrough]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_TextBulletSizeFollowText
    {
    }


    [Serializable]
    [DebuggerStepThrough]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_TextBulletSizePercent
    {
        public static CT_TextBulletSizePercent Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_TextBulletSizePercent ctObj = new CT_TextBulletSizePercent();
            ctObj.val = XmlHelper.ReadInt(node.Attributes["val"]);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<a:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "val", this.val);
            sw.Write(">");
            sw.Write(string.Format("</a:{0}>", nodeName));
        }

        private int valField;

        private bool valFieldSpecified;

        [XmlAttribute]
        public int val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
                this.valFieldSpecified = true;
            }
        }

        [XmlIgnore]
        public bool valSpecified
        {
            get
            {
                return this.valFieldSpecified;
            }
            set
            {
                this.valFieldSpecified = value;
            }
        }
    }


    [Serializable]
    [DebuggerStepThrough]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_TextBulletSizePoint
    {
        public static CT_TextBulletSizePoint Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_TextBulletSizePoint ctObj = new CT_TextBulletSizePoint();
            ctObj.val = XmlHelper.ReadInt(node.Attributes["val"]);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<a:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "val", this.val);
            sw.Write(">");
            sw.Write(string.Format("</a:{0}>", nodeName));
        }

        private int valField;

        private bool valFieldSpecified;

        [XmlAttribute]
        public int val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
                this.valFieldSpecified = true;
            }
        }

        [XmlIgnore]
        public bool valSpecified
        {
            get
            {
                return this.valFieldSpecified;
            }
            set
            {
                this.valFieldSpecified = value;
            }
        }
    }


    [Serializable]
    [DebuggerStepThrough]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_TextBulletTypefaceFollowText
    {
    }


    [Serializable]
    [DebuggerStepThrough]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_TextAutonumberBullet
    {
        public static CT_TextAutonumberBullet Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_TextAutonumberBullet ctObj = new CT_TextAutonumberBullet();
            if (node.Attributes["type"] != null)
                ctObj.type = (ST_TextAutonumberScheme)Enum.Parse(typeof(ST_TextAutonumberScheme), node.Attributes["type"].Value);
            ctObj.startAt = XmlHelper.ReadInt(node.Attributes["startAt"]);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<a:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "type", this.type.ToString());
            XmlHelper.WriteAttribute(sw, "startAt", this.startAt);
            sw.Write(">");
            sw.Write(string.Format("</a:{0}>", nodeName));
        }

        private ST_TextAutonumberScheme typeField;

        private bool typeFieldSpecified;

        private int startAtField;

        private bool startAtFieldSpecified;

        public CT_TextAutonumberBullet()
        {
            this.startAtField = 1;
        }

        [XmlAttribute]
        public ST_TextAutonumberScheme type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeField = value;
            }
        }
        [XmlIgnore]
        public bool typeSpecified
        {
            get { return this.typeFieldSpecified; }
            set { this.typeFieldSpecified = value; }
        }

        [XmlAttribute]
        [DefaultValue(1)]
        public int startAt
        {
            get
            {
                return this.startAtField;
            }
            set
            {
                this.startAtField = value;
            }
        }
        [XmlIgnore]
        public bool startAtSpecified
        {
            get { return this.startAtFieldSpecified; }
            set { this.startAtFieldSpecified = value; }
        }
        public bool IsSetStartAt()
        {
            return this.startAtField >= 1;
        }

        public void UnsetStartAt()
        {
            this.startAtField = 0;
        }
    }


    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    public enum ST_TextAutonumberScheme
    {

        /// <remarks/>
        alphaLcParenBoth,

        /// <remarks/>
        alphaUcParenBoth,

        /// <remarks/>
        alphaLcParenR,

        /// <remarks/>
        alphaUcParenR,

        /// <remarks/>
        alphaLcPeriod,

        /// <remarks/>
        alphaUcPeriod,

        /// <remarks/>
        arabicParenBoth,

        /// <remarks/>
        arabicParenR,

        /// <remarks/>
        arabicPeriod,

        /// <remarks/>
        arabicPlain,

        /// <remarks/>
        romanLcParenBoth,

        /// <remarks/>
        romanUcParenBoth,

        /// <remarks/>
        romanLcParenR,

        /// <remarks/>
        romanUcParenR,

        /// <remarks/>
        romanLcPeriod,

        /// <remarks/>
        romanUcPeriod,

        /// <remarks/>
        circleNumDbPlain,

        /// <remarks/>
        circleNumWdBlackPlain,

        /// <remarks/>
        circleNumWdWhitePlain,

        /// <remarks/>
        arabicDbPeriod,

        /// <remarks/>
        arabicDbPlain,

        /// <remarks/>
        ea1ChsPeriod,

        /// <remarks/>
        ea1ChsPlain,

        /// <remarks/>
        ea1ChtPeriod,

        /// <remarks/>
        ea1ChtPlain,

        /// <remarks/>
        ea1JpnChsDbPeriod,

        /// <remarks/>
        ea1JpnKorPlain,

        /// <remarks/>
        ea1JpnKorPeriod,

        /// <remarks/>
        arabic1Minus,

        /// <remarks/>
        arabic2Minus,

        /// <remarks/>
        hebrew2Minus,

        /// <remarks/>
        thaiAlphaPeriod,

        /// <remarks/>
        thaiAlphaParenR,

        /// <remarks/>
        thaiAlphaParenBoth,

        /// <remarks/>
        thaiNumPeriod,

        /// <remarks/>
        thaiNumParenR,

        /// <remarks/>
        thaiNumParenBoth,

        /// <remarks/>
        hindiAlphaPeriod,

        /// <remarks/>
        hindiNumPeriod,

        /// <remarks/>
        hindiNumParenR,

        /// <remarks/>
        hindiAlpha1Period,
    }


    [Serializable]
    [DebuggerStepThrough]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_TextCharBullet
    {
        public static CT_TextCharBullet Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if(node==null)
                return null;
            CT_TextCharBullet ctObj = new CT_TextCharBullet();
            ctObj.@char = XmlHelper.ReadString(node.Attributes["char"]);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<a:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "char", this.@char);
            sw.Write(">");
            sw.Write(string.Format("</a:{0}>", nodeName));
        }

        private string charField;

        [XmlAttribute]
        public string @char
        {
            get
            {
                return this.charField;
            }
            set
            {
                this.charField = value;
            }
        }
    }


    [Serializable]
    [DebuggerStepThrough]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_TextBlipBullet
    {
        public static CT_TextBlipBullet Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_TextBlipBullet ctObj = new CT_TextBlipBullet();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "blip")
                    ctObj.blip = CT_Blip.Parse(childNode, namespaceManager);
            }
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<a:{0}", nodeName));
            sw.Write(">");
            if (this.blip != null)
                this.blip.Write(sw, "blip");
            sw.Write(string.Format("</a:{0}>", nodeName));
        }

        private CT_Blip blipField;

        public CT_TextBlipBullet()
        {
            this.blipField = new CT_Blip();
        }

        [XmlElement(Order = 0)]
        public CT_Blip blip
        {
            get
            {
                return this.blipField;
            }
            set
            {
                this.blipField = value;
            }
        }
    }


    [Serializable]
    [DebuggerStepThrough]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_TextNoBullet
    {
    }
}
