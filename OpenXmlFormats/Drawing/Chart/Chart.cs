// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.38967
//    <NameSpace>NPOI.OpenXmlFormats.Dml.Chart</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>False</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net20</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>True</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>True</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace NPOI.OpenXmlFormats.Dml.Chart
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Xml;
    using NPOI.OpenXml4Net.Util;
    using System.Text; 
    using System.Globalization;
    using Cysharp.Text;

    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot("chartSpace", Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = false)]
    public class CT_ChartSpace
    {

        private CT_Boolean date1904Field;

        private CT_TextLanguageID langField;

        private CT_Boolean roundedCornersField;

        private CT_Style styleField;

        private CT_ColorMapping clrMapOvrField;

        private CT_PivotSource pivotSourceField;

        private CT_Protection protectionField;

        private CT_Chart chartField;

        private CT_ShapeProperties spPrField;

        private CT_TextBody txPrField;

        private CT_ExternalData externalDataField;

        private CT_PrintSettings printSettingsField;

        private CT_RelId userShapesField;

        private List<CT_Extension> extLstField;

        public CT_ChartSpace()
        {
        }
        public static CT_ChartSpace Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_ChartSpace ctObj = new CT_ChartSpace();
            ctObj.extLst = new List<CT_Extension>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "date1904")
                    ctObj.date1904 = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "lang")
                    ctObj.lang = CT_TextLanguageID.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "roundedCorners")
                    ctObj.roundedCorners = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "AlternateContent")
                    ctObj.alternateContent = Vml.CT_AlternateContent.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "style")
                    ctObj.style = CT_Style.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "clrMapOvr")
                    ctObj.clrMapOvr = CT_ColorMapping.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "pivotSource")
                    ctObj.pivotSource = CT_PivotSource.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "protection")
                    ctObj.protection = CT_Protection.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "chart")
                    ctObj.chart = CT_Chart.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "spPr")
                    ctObj.spPr = CT_ShapeProperties.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "txPr")
                    ctObj.txPr = CT_TextBody.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "externalData")
                    ctObj.externalData = CT_ExternalData.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "printSettings")
                    ctObj.printSettings = CT_PrintSettings.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "userShapes")
                    ctObj.userShapes = CT_RelId.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "extLst")
                    ctObj.extLst.Add(CT_Extension.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }



        internal void Write(Stream stream)
        {
            using (StreamWriter sw = new StreamWriter(stream))
            {
                sw.Write("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>");
                sw.Write("<c:chartSpace");
                sw.Write(" xmlns:c=\"http://schemas.openxmlformats.org/drawingml/2006/chart\" xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\"");
                sw.Write(" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"");
                sw.Write(">");
                if (this.date1904 != null)
                    this.date1904.Write(sw, "date1904");
                if (this.lang != null)
                    this.lang.Write(sw, "lang");
                if (this.roundedCorners != null)
                    this.roundedCorners.Write(sw, "roundedCorners");
                if (this.alternateContent != null)
                    this.alternateContent.Write(sw, "AlternateContent");
                if (this.style != null)
                    this.style.Write(sw, "style");
                if (this.clrMapOvr != null)
                    this.clrMapOvr.Write(sw, "clrMapOvr");
                if (this.pivotSource != null)
                    this.pivotSource.Write(sw, "pivotSource");
                if (this.protection != null)
                    this.protection.Write(sw, "protection");
                if (this.chart != null)
                    this.chart.Write(sw, "chart");
                if (this.spPr != null)
                    this.spPr.Write(sw, "spPr");
                if (this.txPr != null)
                    this.txPr.Write(sw, "txPr");
                if (this.externalData != null)
                    this.externalData.Write(sw, "externalData");
                if (this.printSettings != null)
                    this.printSettings.Write(sw, "printSettings");
                if (this.userShapes != null)
                    this.userShapes.Write(sw, "userShapes");
                if (this.extLst != null)
                {
                    foreach (CT_Extension x in this.extLst)
                    {
                        x.Write(sw, "extLst");
                    }
                }
                sw.Write("</c:chartSpace>");
            }
        }

        public CT_Chart AddNewChart()
        {
            this.chartField=new CT_Chart();
            return this.chartField;
        }
        public CT_PrintSettings AddNewPrintSettings()
        {
            this.printSettingsField = new CT_PrintSettings();
            return this.printSettingsField;
        }
        [XmlElement(Order = 0)]
        public CT_Boolean date1904
        {
            get
            {
                return this.date1904Field;
            }
            set
            {
                this.date1904Field = value;
            }
        }

        [XmlElement(Order = 1)]
        public CT_TextLanguageID lang
        {
            get
            {
                return this.langField;
            }
            set
            {
                this.langField = value;
            }
        }

        [XmlElement(Order = 2)]
        public CT_Boolean roundedCorners
        {
            get
            {
                return this.roundedCornersField;
            }
            set
            {
                this.roundedCornersField = value;
            }
        }

        Vml.CT_AlternateContent alternateContentField = null;
        public Vml.CT_AlternateContent alternateContent
        {
            get
            {
                return alternateContentField;
            }
            set
            {
                this.alternateContentField = value;
            }
        }

        [XmlElement(Order = 3)]
        public CT_Style style
        {
            get
            {
                return this.styleField;
            }
            set
            {
                this.styleField = value;
            }
        }

        [XmlElement(Order = 4)]
        public CT_ColorMapping clrMapOvr
        {
            get
            {
                return this.clrMapOvrField;
            }
            set
            {
                this.clrMapOvrField = value;
            }
        }

        [XmlElement(Order = 5)]
        public CT_PivotSource pivotSource
        {
            get
            {
                return this.pivotSourceField;
            }
            set
            {
                this.pivotSourceField = value;
            }
        }

        [XmlElement(Order = 6)]
        public CT_Protection protection
        {
            get
            {
                return this.protectionField;
            }
            set
            {
                this.protectionField = value;
            }
        }

        [XmlElement(Order = 7)]
        public CT_Chart chart
        {
            get
            {
                return this.chartField;
            }
            set
            {
                this.chartField = value;
            }
        }

        [XmlElement(Order = 8)]
        public CT_ShapeProperties spPr
        {
            get
            {
                return this.spPrField;
            }
            set
            {
                this.spPrField = value;
            }
        }

        [XmlElement(Order = 9)]
        public CT_TextBody txPr
        {
            get
            {
                return this.txPrField;
            }
            set
            {
                this.txPrField = value;
            }
        }

        [XmlElement(Order = 10)]
        public CT_ExternalData externalData
        {
            get
            {
                return this.externalDataField;
            }
            set
            {
                this.externalDataField = value;
            }
        }

        [XmlElement(Order = 11)]
        public CT_PrintSettings printSettings
        {
            get
            {
                return this.printSettingsField;
            }
            set
            {
                this.printSettingsField = value;
            }
        }

        [XmlElement(Order = 12)]
        public CT_RelId userShapes
        {
            get
            {
                return this.userShapesField;
            }
            set
            {
                this.userShapesField = value;
            }
        }

        [XmlArray(Order = 13)]
        [XmlArrayItem("ext", IsNullable = false)]
        public List<CT_Extension> extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_Boolean
    {

        private bool valField;

        public CT_Boolean()
        {
            this.valField = true;
        }

        [XmlAttribute]
        public int val
        {
            get
            {
                return this.valField?1:0;
            }
            set
            {
                this.valField = value==1?true:false;
            }
        }
        public static CT_Boolean Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_Boolean ctObj = new CT_Boolean();
            ctObj.val = XmlHelper.ReadInt(node.Attributes["val"]);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "val", this.val,true);
            sw.Write("/>");
        }

    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot("chart", Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = false)]
    public class CT_RelId
    {

        private string idField;

        [System.Xml.Serialization.XmlAttributeAttribute(Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://schemas.openxmlformats.org/officeDocument/2006/relationships")]
        public string id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }
        public static CT_RelId Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_RelId ctObj = new CT_RelId();
            ctObj.id = XmlHelper.ReadString(node.Attributes["r:id"]);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "r:id", this.id);
            sw.Write("/>");
        }

    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_PageSetup
    {

        private uint paperSizeField;

        private uint firstPageNumberField;

        private ST_PageSetupOrientation orientationField;

        private bool blackAndWhiteField;

        private bool draftField;

        private bool useFirstPageNumberField;

        private int horizontalDpiField;

        private int verticalDpiField;

        private uint copiesField;

        public CT_PageSetup()
        {
            this.paperSizeField = ((uint)(1));
            this.firstPageNumberField = ((uint)(1));
            this.orientationField = ST_PageSetupOrientation.@default;
            this.blackAndWhiteField = false;
            this.draftField = false;
            this.useFirstPageNumberField = false;
            this.horizontalDpiField = 600;
            this.verticalDpiField = 600;
            this.copiesField = ((uint)(1));
        }
        public static CT_PageSetup Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_PageSetup ctObj = new CT_PageSetup();
            if (node.Attributes["paperSize"] != null)
                ctObj.paperSize = XmlHelper.ReadUInt(node.Attributes["paperSize"]);
            if (node.Attributes["firstPageNumber"] != null)
                ctObj.firstPageNumber = XmlHelper.ReadUInt(node.Attributes["firstPageNumber"]);
            if (node.Attributes["orientation"] != null)
                ctObj.orientation = (ST_PageSetupOrientation)Enum.Parse(typeof(ST_PageSetupOrientation), node.Attributes["orientation"].Value);
            if (node.Attributes["blackAndWhite"] != null)
                ctObj.blackAndWhite = XmlHelper.ReadBool(node.Attributes["blackAndWhite"]);
            if (node.Attributes["draft"] != null)
                ctObj.draft = XmlHelper.ReadBool(node.Attributes["draft"]);
            if (node.Attributes["useFirstPageNumber"] != null)
                ctObj.useFirstPageNumber = XmlHelper.ReadBool(node.Attributes["useFirstPageNumber"]);
            if (node.Attributes["horizontalDpi"] != null)
                ctObj.horizontalDpi = XmlHelper.ReadInt(node.Attributes["horizontalDpi"]);
            if (node.Attributes["verticalDpi"] != null)
                ctObj.verticalDpi = XmlHelper.ReadInt(node.Attributes["verticalDpi"]);
            if (node.Attributes["copies"] != null)
                ctObj.copies = XmlHelper.ReadUInt(node.Attributes["copies"]);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "paperSize", this.paperSize);
            XmlHelper.WriteAttribute(sw, "firstPageNumber", this.firstPageNumber);
            XmlHelper.WriteAttribute(sw, "orientation", this.orientation.ToString());
            XmlHelper.WriteAttribute(sw, "blackAndWhite", this.blackAndWhite);
            XmlHelper.WriteAttribute(sw, "draft", this.draft);
            XmlHelper.WriteAttribute(sw, "useFirstPageNumber", this.useFirstPageNumber);
            XmlHelper.WriteAttribute(sw, "horizontalDpi", this.horizontalDpi);
            XmlHelper.WriteAttribute(sw, "verticalDpi", this.verticalDpi);
            XmlHelper.WriteAttribute(sw, "copies", this.copies);
            sw.Write("/>");
        }

        [XmlAttribute]
        [DefaultValue(typeof(uint), "1")]
        public uint paperSize
        {
            get
            {
                return this.paperSizeField;
            }
            set
            {
                this.paperSizeField = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(typeof(uint), "1")]
        public uint firstPageNumber
        {
            get
            {
                return this.firstPageNumberField;
            }
            set
            {
                this.firstPageNumberField = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(ST_PageSetupOrientation.@default)]
        public ST_PageSetupOrientation orientation
        {
            get
            {
                return this.orientationField;
            }
            set
            {
                this.orientationField = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        public bool blackAndWhite
        {
            get
            {
                return this.blackAndWhiteField;
            }
            set
            {
                this.blackAndWhiteField = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        public bool draft
        {
            get
            {
                return this.draftField;
            }
            set
            {
                this.draftField = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        public bool useFirstPageNumber
        {
            get
            {
                return this.useFirstPageNumberField;
            }
            set
            {
                this.useFirstPageNumberField = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(600)]
        public int horizontalDpi
        {
            get
            {
                return this.horizontalDpiField;
            }
            set
            {
                this.horizontalDpiField = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(600)]
        public int verticalDpi
        {
            get
            {
                return this.verticalDpiField;
            }
            set
            {
                this.verticalDpiField = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(typeof(uint), "1")]
        public uint copies
        {
            get
            {
                return this.copiesField;
            }
            set
            {
                this.copiesField = value;
            }
        }
    }


    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    public enum ST_PageSetupOrientation
    {

        /// <remarks/>
        @default,

        /// <remarks/>
        portrait,

        /// <remarks/>
        landscape,
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_PageMargins
    {

        private double lField;

        private double rField;

        private double tField;

        private double bField;

        private double headerField;

        private double footerField;
        public static CT_PageMargins Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_PageMargins ctObj = new CT_PageMargins();
            if (node.Attributes["l"] != null)
                ctObj.l = XmlHelper.ReadDouble(node.Attributes["l"]);
            if (node.Attributes["r"] != null)
                ctObj.r = XmlHelper.ReadDouble(node.Attributes["r"]);
            if (node.Attributes["t"] != null)
                ctObj.t = XmlHelper.ReadDouble(node.Attributes["t"]);
            if (node.Attributes["b"] != null)
                ctObj.b = XmlHelper.ReadDouble(node.Attributes["b"]);
            if (node.Attributes["header"] != null)
                ctObj.header = XmlHelper.ReadDouble(node.Attributes["header"]);
            if (node.Attributes["footer"] != null)
                ctObj.footer = XmlHelper.ReadDouble(node.Attributes["footer"]);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "l", this.l);
            XmlHelper.WriteAttribute(sw, "r", this.r);
            XmlHelper.WriteAttribute(sw, "t", this.t);
            XmlHelper.WriteAttribute(sw, "b", this.b);
            XmlHelper.WriteAttribute(sw, "header", this.header);
            XmlHelper.WriteAttribute(sw, "footer", this.footer);
            sw.Write("/>");
        }

        [XmlAttribute]
        public double l
        {
            get
            {
                return this.lField;
            }
            set
            {
                this.lField = value;
            }
        }

        [XmlAttribute]
        public double r
        {
            get
            {
                return this.rField;
            }
            set
            {
                this.rField = value;
            }
        }

        [XmlAttribute]
        public double t
        {
            get
            {
                return this.tField;
            }
            set
            {
                this.tField = value;
            }
        }

        [XmlAttribute]
        public double b
        {
            get
            {
                return this.bField;
            }
            set
            {
                this.bField = value;
            }
        }

        [XmlAttribute]
        public double header
        {
            get
            {
                return this.headerField;
            }
            set
            {
                this.headerField = value;
            }
        }

        [XmlAttribute]
        public double footer
        {
            get
            {
                return this.footerField;
            }
            set
            {
                this.footerField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_HeaderFooter
    {

        private string oddHeaderField;

        private string oddFooterField;

        private string evenHeaderField;

        private string evenFooterField;

        private string firstHeaderField;

        private string firstFooterField;

        private bool alignWithMarginsField;

        private bool differentOddEvenField;

        private bool differentFirstField;

        public CT_HeaderFooter()
        {
            this.alignWithMarginsField = true;
            this.differentOddEvenField = false;
            this.differentFirstField = false;
        }
        public static CT_HeaderFooter Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_HeaderFooter ctObj = new CT_HeaderFooter();
            if (node.Attributes["alignWithMargins"] != null)
                ctObj.alignWithMargins = XmlHelper.ReadBool(node.Attributes["alignWithMargins"]);
            else
                ctObj.alignWithMargins = true;
            if (node.Attributes["differentOddEven"] != null)
                ctObj.differentOddEven = XmlHelper.ReadBool(node.Attributes["differentOddEven"]);
            if (node.Attributes["differentFirst"] != null)
                ctObj.differentFirst = XmlHelper.ReadBool(node.Attributes["differentFirst"]);
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "oddHeader")
                    ctObj.oddHeader = childNode.InnerText;
                else if (childNode.LocalName == "oddFooter")
                    ctObj.oddFooter = childNode.InnerText;
                else if (childNode.LocalName == "evenHeader")
                    ctObj.evenHeader = childNode.InnerText;
                else if (childNode.LocalName == "evenFooter")
                    ctObj.evenFooter = childNode.InnerText;
                else if (childNode.LocalName == "firstHeader")
                    ctObj.firstHeader = childNode.InnerText;
                else if (childNode.LocalName == "firstFooter")
                    ctObj.firstFooter = childNode.InnerText;
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            if(!this.alignWithMargins)
                XmlHelper.WriteAttribute(sw, "alignWithMargins", this.alignWithMargins, true);
            if(this.differentOddEven)
                XmlHelper.WriteAttribute(sw, "differentOddEven", this.differentOddEven);
            if(this.differentFirst)
                XmlHelper.WriteAttribute(sw, "differentFirst", this.differentFirst);
            sw.Write(">");
            if (this.oddHeader != null)
                sw.Write(string.Format("<oddHeader>{0}</oddHeader>", this.oddHeader));
            if (this.oddFooter != null)
                sw.Write(string.Format("<oddFooter>{0}</oddFooter>", this.oddFooter));
            if (this.evenHeader != null)
                sw.Write(string.Format("<evenHeader>{0}</evenHeader>", this.evenHeader));
            if (this.evenFooter != null)
                sw.Write(string.Format("<evenFooter>{0}</evenFooter>", this.evenFooter));
            if (this.firstHeader != null)
                sw.Write(string.Format("<firstHeader>{0}</firstHeader>", this.firstHeader));
            if (this.firstFooter != null)
                sw.Write(string.Format("<firstFooter>{0}</firstFooter>", this.firstFooter));
            sw.Write(string.Format("</c:{0}>", nodeName));
        }

        [XmlElement(Order = 0)]
        public string oddHeader
        {
            get
            {
                return this.oddHeaderField;
            }
            set
            {
                this.oddHeaderField = value;
            }
        }

        [XmlElement(Order = 1)]
        public string oddFooter
        {
            get
            {
                return this.oddFooterField;
            }
            set
            {
                this.oddFooterField = value;
            }
        }

        [XmlElement(Order = 2)]
        public string evenHeader
        {
            get
            {
                return this.evenHeaderField;
            }
            set
            {
                this.evenHeaderField = value;
            }
        }

        [XmlElement(Order = 3)]
        public string evenFooter
        {
            get
            {
                return this.evenFooterField;
            }
            set
            {
                this.evenFooterField = value;
            }
        }

        [XmlElement(Order = 4)]
        public string firstHeader
        {
            get
            {
                return this.firstHeaderField;
            }
            set
            {
                this.firstHeaderField = value;
            }
        }

        [XmlElement(Order = 5)]
        public string firstFooter
        {
            get
            {
                return this.firstFooterField;
            }
            set
            {
                this.firstFooterField = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(true)]
        public bool alignWithMargins
        {
            get
            {
                return this.alignWithMarginsField;
            }
            set
            {
                this.alignWithMarginsField = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        public bool differentOddEven
        {
            get
            {
                return this.differentOddEvenField;
            }
            set
            {
                this.differentOddEvenField = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        public bool differentFirst
        {
            get
            {
                return this.differentFirstField;
            }
            set
            {
                this.differentFirstField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_PrintSettings
    {

        private CT_HeaderFooter headerFooterField;

        private CT_PageMargins pageMarginsField;

        private CT_PageSetup pageSetupField;

        private CT_RelId legacyDrawingHFField;

        public CT_PrintSettings()
        {
            //this.legacyDrawingHFField = new CT_RelId();

        }
        public static CT_PrintSettings Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_PrintSettings ctObj = new CT_PrintSettings();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "headerFooter")
                    ctObj.headerFooter = CT_HeaderFooter.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "pageMargins")
                    ctObj.pageMargins = CT_PageMargins.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "pageSetup")
                    ctObj.pageSetup = CT_PageSetup.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "legacyDrawingHF")
                    ctObj.legacyDrawingHF = CT_RelId.Parse(childNode, namespaceManager);
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            sw.Write(">");
            if (this.headerFooter != null)
                this.headerFooter.Write(sw, "headerFooter");
            if (this.pageMargins != null)
                this.pageMargins.Write(sw, "pageMargins");
            if (this.pageSetup != null)
                this.pageSetup.Write(sw, "pageSetup");
            if (this.legacyDrawingHF != null)
                this.legacyDrawingHF.Write(sw, "legacyDrawingHF");
            sw.Write(string.Format("</c:{0}>", nodeName));
        }

        public CT_HeaderFooter AddNewHeaderFooter()
        {
            this.headerFooterField = new CT_HeaderFooter();
            return this.headerFooterField;
        }
        public CT_PageSetup AddNewPageSetup()
        {
            this.pageSetupField = new CT_PageSetup();
            return this.pageSetupField;
        }
        public CT_PageMargins AddNewPageMargins()
        {
            this.pageMarginsField = new CT_PageMargins();
            return this.pageMarginsField;
        }

        [XmlElement(Order = 0)]
        public CT_HeaderFooter headerFooter
        {
            get
            {
                return this.headerFooterField;
            }
            set
            {
                this.headerFooterField = value;
            }
        }

        [XmlElement(Order = 1)]
        public CT_PageMargins pageMargins
        {
            get
            {
                return this.pageMarginsField;
            }
            set
            {
                this.pageMarginsField = value;
            }
        }

        [XmlElement(Order = 2)]
        public CT_PageSetup pageSetup
        {
            get
            {
                return this.pageSetupField;
            }
            set
            {
                this.pageSetupField = value;
            }
        }

        [XmlElement(Order = 3)]
        public CT_RelId legacyDrawingHF
        {
            get
            {
                return this.legacyDrawingHFField;
            }
            set
            {
                this.legacyDrawingHFField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_ExternalData
    {

        private CT_Boolean autoUpdateField;

        private string idField;

        public CT_ExternalData()
        {
        }
        public static CT_ExternalData Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_ExternalData ctObj = new CT_ExternalData();
            ctObj.id = XmlHelper.ReadString(node.Attributes["r:id"]);
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "autoUpdate")
                    ctObj.autoUpdate = CT_Boolean.Parse(childNode, namespaceManager);
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "r:id", this.id);
            sw.Write(">");
            if (this.autoUpdate != null)
                this.autoUpdate.Write(sw, "autoUpdate");
            sw.Write(string.Format("</c:{0}>", nodeName));
        }

        [XmlElement(Order = 0)]
        public CT_Boolean autoUpdate
        {
            get
            {
                return this.autoUpdateField;
            }
            set
            {
                this.autoUpdateField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://schemas.openxmlformats.org/officeDocument/2006/relationships")]
        public string id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }

    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_DispBlanksAs
    {

        private ST_DispBlanksAs valField;

        public CT_DispBlanksAs()
        {
            this.valField = ST_DispBlanksAs.zero;
        }
        public static CT_DispBlanksAs Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_DispBlanksAs ctObj = new CT_DispBlanksAs();
            if (node.Attributes["val"] != null)
                ctObj.val = (ST_DispBlanksAs)Enum.Parse(typeof(ST_DispBlanksAs), node.Attributes["val"].Value);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "val", this.val.ToString());
            sw.Write("/>");
        }

        [XmlAttribute]
        [DefaultValue(ST_DispBlanksAs.zero)]
        public ST_DispBlanksAs val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
    }


    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    public enum ST_DispBlanksAs
    {

        /// <remarks/>
        span,

        /// <remarks/>
        gap,

        /// <remarks/>
        zero,
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_LegendEntry
    {

        private CT_UnsignedInt idxField;

        private object itemField;

        private List<CT_Extension> extLstField;

        public CT_LegendEntry()
        {

        }

        public static CT_LegendEntry Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_LegendEntry ctObj = new CT_LegendEntry();
            ctObj.extLst = new List<CT_Extension>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "idx")
                    ctObj.idx = CT_UnsignedInt.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "Item")
                    ctObj.Item = new Object();
                else if (childNode.LocalName == "extLst")
                    ctObj.extLst.Add(CT_Extension.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            sw.Write(">");
            if (this.idx != null)
                this.idx.Write(sw, "idx");
            if (this.Item != null)
                sw.Write("<Item/>");
            if (this.extLst != null)
            {
                foreach (CT_Extension x in this.extLst)
                {
                    x.Write(sw, "extLst");
                }
            }
            sw.Write(string.Format("</c:{0}>", nodeName));
        }

        [XmlElement(Order = 0)]
        public CT_UnsignedInt idx
        {
            get
            {
                return this.idxField;
            }
            set
            {
                this.idxField = value;
            }
        }

        [XmlElement("delete", typeof(CT_Boolean), Order = 1)]
        [XmlElement("txPr", typeof(CT_TextBody), Order = 1)]
        public object Item
        {
            get
            {
                return this.itemField;
            }
            set
            {
                this.itemField = value;
            }
        }

        [XmlArray(Order = 2)]
        [XmlArrayItem("ext", IsNullable = false)]
        public List<CT_Extension> extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_UnsignedInt
    {

        private uint valField;

        [XmlAttribute]
        public uint val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
        public static CT_UnsignedInt Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_UnsignedInt ctObj = new CT_UnsignedInt();
            ctObj.val = XmlHelper.ReadUInt(node.Attributes["val"]);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "val", this.val, true);
            sw.Write("/>");
        }

    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_Extension
    {

        private string anyField;

        private string uriField;

        [XmlText]
        public string Any
        {
            get
            {
                return this.anyField;
            }
            set
            {
                this.anyField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "token")]
        public string uri
        {
            get
            {
                return this.uriField;
            }
            set
            {
                this.uriField = value;
            }
        }
        public static CT_Extension Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_Extension ctObj = new CT_Extension();
            ctObj.uri = XmlHelper.ReadString(node.Attributes["uri"]);
            ctObj.Any = node.InnerXml;

            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "uri", this.uri);
            sw.Write(">");
            if (this.Any != null)
                sw.Write(this.Any);
            sw.Write(string.Format("</c:{0}>", nodeName));
        }

    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_LegendPos
    {

        private ST_LegendPos valField;

        public CT_LegendPos()
        {
            this.valField = ST_LegendPos.r;
        }

        [XmlAttribute]
        [DefaultValue(ST_LegendPos.r)]
        public ST_LegendPos val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
        public static CT_LegendPos Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_LegendPos ctObj = new CT_LegendPos();
            if (node.Attributes["val"] != null)
                ctObj.val = (ST_LegendPos)Enum.Parse(typeof(ST_LegendPos), node.Attributes["val"].Value);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            if(this.val!= ST_LegendPos.r)
                XmlHelper.WriteAttribute(sw, "val", this.val.ToString());
            sw.Write("/>");
        }

    }


    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    public enum ST_LegendPos
    {

        /// <remarks/>
        b,

        /// <remarks/>
        tr,

        /// <remarks/>
        l,

        /// <remarks/>
        r,

        /// <remarks/>
        t,
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_Legend
    {

        private CT_LegendPos legendPosField;

        private List<CT_LegendEntry> legendEntryField;

        private CT_Layout layoutField;

        private CT_Boolean overlayField;

        private CT_ShapeProperties spPrField;

        private CT_TextBody txPrField;

        private List<CT_Extension> extLstField;

        public CT_Legend()
        {

        }
        public static CT_Legend Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_Legend ctObj = new CT_Legend();
            ctObj.legendEntry = new List<CT_LegendEntry>();
            ctObj.extLst = new List<CT_Extension>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "legendPos")
                    ctObj.legendPos = CT_LegendPos.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "layout")
                    ctObj.layout = CT_Layout.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "overlay")
                    ctObj.overlay = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "spPr")
                    ctObj.spPr = CT_ShapeProperties.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "txPr")
                    ctObj.txPr = CT_TextBody.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "legendEntry")
                    ctObj.legendEntry.Add(CT_LegendEntry.Parse(childNode, namespaceManager));
                else if (childNode.LocalName == "extLst")
                    ctObj.extLst.Add(CT_Extension.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            sw.Write(">");
            if (this.legendPos != null)
                this.legendPos.Write(sw, "legendPos");
            if (this.layout != null)
                this.layout.Write(sw, "layout");
            if (this.overlay != null)
                this.overlay.Write(sw, "overlay");
            if (this.spPr != null)
                this.spPr.Write(sw, "spPr");
            if (this.txPr != null)
                this.txPr.Write(sw, "txPr");
            if (this.legendEntry != null)
            {
                foreach (CT_LegendEntry x in this.legendEntry)
                {
                    x.Write(sw, "legendEntry");
                }
            }
            if (this.extLst != null)
            {
                foreach (CT_Extension x in this.extLst)
                {
                    x.Write(sw, "extLst");
                }
            }
            sw.Write(string.Format("</c:{0}>", nodeName));
        }

        public CT_Layout AddNewLayout()
        {
            this.layoutField = new CT_Layout();
            return this.layoutField;
        }
        public bool IsSetLegendPos()
        {
            return legendPosSpecifiedField;
        }
        public CT_LegendPos AddNewLegendPos()
        {
            if (this.legendPosField == null)
                this.legendPosField = new CT_LegendPos();
            return this.legendPosField;
        }

        private bool legendPosSpecifiedField=false;
        [XmlIgnore]
        public bool legendPosSpecified
        {
            get { return legendPosSpecifiedField; }
            set { legendPosSpecifiedField = value; }
        }
        [XmlElement(Order = 0)]
        public CT_LegendPos legendPos
        {
            get
            {
                return this.legendPosField;
            }
            set
            {
                this.legendPosField = value;
            }
        }

        [XmlElement("legendEntry", Order = 1)]
        public List<CT_LegendEntry> legendEntry
        {
            get
            {
                return this.legendEntryField;
            }
            set
            {
                this.legendEntryField = value;
            }
        }
        public bool IsSetLayout()
        {
            return layoutSpecifiedField;
        }
        private bool layoutSpecifiedField;
        [XmlIgnore]
        public bool layoutSpecified
        {
            get { return layoutSpecifiedField; }
            set { layoutSpecifiedField = value; }
        }
        [XmlElement(Order = 2)]
        public CT_Layout layout
        {
            get
            {
                return this.layoutField;
            }
            set
            {
                this.layoutField = value;
            }
        }

        [XmlElement(Order = 3)]
        public CT_Boolean overlay
        {
            get
            {
                return this.overlayField;
            }
            set
            {
                this.overlayField = value;
            }
        }

        [XmlElement(Order = 4)]
        public CT_ShapeProperties spPr
        {
            get
            {
                return this.spPrField;
            }
            set
            {
                this.spPrField = value;
            }
        }

        [XmlElement(Order = 5)]
        public CT_TextBody txPr
        {
            get
            {
                return this.txPrField;
            }
            set
            {
                this.txPrField = value;
            }
        }

        [XmlArray(Order = 6)]
        [XmlArrayItem("ext", IsNullable = false)]
        public List<CT_Extension> extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }

        public bool IsSetOverlay()
        {
            return this.overlayField != null && this.overlayField.val > 0;
        }

        public void AddNewOverlay()
        {
            this.overlayField = new CT_Boolean();
            //return this.overlayField;
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_Layout
    {

        private CT_ManualLayout manualLayoutField;

        private List<CT_Extension> extLstField;

        public CT_Layout()
        {
            //this.extLstField = new List<CT_Extension>();
            //this.manualLayoutField = new CT_ManualLayout();
        }
        public static CT_Layout Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_Layout ctObj = new CT_Layout();
            ctObj.extLst = new List<CT_Extension>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "manualLayout")
                    ctObj.manualLayout = CT_ManualLayout.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "extLst")
                    ctObj.extLst.Add(CT_Extension.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            sw.Write(">");
            if (this.manualLayout != null)
                this.manualLayout.Write(sw, "manualLayout");
            if (this.extLst != null)
            {
                foreach (CT_Extension x in this.extLst)
                {
                    x.Write(sw, "extLst");
                }
            }
            sw.Write(string.Format("</c:{0}>", nodeName));
        }

        public bool IsSetManualLayout()
        {
            return this.manualLayout!=null;
        }
        public CT_ManualLayout AddNewManualLayout()
        {
            this.manualLayoutField = new CT_ManualLayout();
            return this.manualLayoutField;
        }
        [XmlElement(Order = 0)]
        public CT_ManualLayout manualLayout
        {
            get
            {
                return this.manualLayoutField;
            }
            set
            {
                this.manualLayoutField = value;
            }
        }

        [XmlElement(Order = 1)]
        public List<CT_Extension> extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_ManualLayout
    {

        private CT_LayoutTarget layoutTargetField;

        private CT_LayoutMode xModeField;

        private CT_LayoutMode yModeField;

        private CT_LayoutMode wModeField;

        private CT_LayoutMode hModeField;

        private CT_Double xField;

        private CT_Double yField;

        private CT_Double wField;

        private CT_Double hField;

        private List<CT_Extension> extLstField;
        public static CT_ManualLayout Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_ManualLayout ctObj = new CT_ManualLayout();
            ctObj.extLst = new List<CT_Extension>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "layoutTarget")
                    ctObj.layoutTarget = CT_LayoutTarget.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "xMode")
                    ctObj.xMode = CT_LayoutMode.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "yMode")
                    ctObj.yMode = CT_LayoutMode.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "wMode")
                    ctObj.wMode = CT_LayoutMode.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "hMode")
                    ctObj.hMode = CT_LayoutMode.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "x")
                    ctObj.x = CT_Double.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "y")
                    ctObj.y = CT_Double.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "w")
                    ctObj.w = CT_Double.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "h")
                    ctObj.h = CT_Double.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "extLst")
                    ctObj.extLst.Add(CT_Extension.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            sw.Write(">");
            if (this.layoutTarget != null)
                this.layoutTarget.Write(sw, "layoutTarget");
            if (this.xMode != null)
                this.xMode.Write(sw, "xMode");
            if (this.yMode != null)
                this.yMode.Write(sw, "yMode");
            if (this.wMode != null)
                this.wMode.Write(sw, "wMode");
            if (this.hMode != null)
                this.hMode.Write(sw, "hMode");
            if (this.x != null)
                this.x.Write(sw, "x");
            if (this.y != null)
                this.y.Write(sw, "y");
            if (this.w != null)
                this.w.Write(sw, "w");
            if (this.h != null)
                this.h.Write(sw, "h");
            if (this.extLst != null)
            {
                foreach (CT_Extension x in this.extLst)
                {
                    x.Write(sw, "extLst");
                }
            }
            sw.Write(string.Format("</c:{0}>", nodeName));
        }

        public CT_ManualLayout()
        {
            //this.extLstField = new List<CT_Extension>();
            //this.hField = new CT_Double();
            //this.wField = new CT_Double();
            //this.yField = new CT_Double();
            //this.xField = new CT_Double();
            //this.hModeField = new CT_LayoutMode();
            //this.wModeField = new CT_LayoutMode();
            //this.yModeField = new CT_LayoutMode();
            //this.xModeField = new CT_LayoutMode();
            //this.layoutTargetField = new CT_LayoutTarget();
        }
        public bool IsSetLayoutTarget()
        {
            return this.layoutTargetField != null;
        }
        public CT_LayoutTarget AddNewLayoutTarget()
        {
            this.layoutTargetField = new CT_LayoutTarget();
            return this.layoutTargetField;
        }
        public bool IsSetY()
        {
            return this.yField != null;
        }
        public bool IsSetX()
        {
            return this.xField != null;
        }

        public bool IsSetW()
        {
            return this.wField != null;
        }
        public bool IsSetH()
        {
            return this.hField != null;
        }
        public bool IsSetXMode()
        {
            return this.xModeField != null;
        }
        public CT_LayoutMode AddNewXMode()
        {
            this.xModeField = new CT_LayoutMode();
            return xModeField;
        }
        public bool IsSetYMode()
        {
            return this.yModeField != null;
        }
        public CT_LayoutMode AddNewYMode()
        {
            this.yModeField = new CT_LayoutMode();
            return yModeField;
        }
        public bool IsSetWMode()
        {
            return this.wModeField != null;
        }
        public bool IsSetHMode()
        {
            return this.hModeField != null;
        }

        public CT_LayoutMode AddNewHMode()
        {
            if(this.hModeField == null)
                this.hModeField = new CT_LayoutMode();
            return hModeField;
        }
        public CT_LayoutMode AddNewWMode()
        {
            if (this.wModeField == null)
                this.wModeField = new CT_LayoutMode();
            return wModeField;
        }
        public CT_Double AddNewW()
        {
            if (this.wField == null)
                this.wField = new CT_Double();
            return wField;
        }
        public CT_Double AddNewH()
        {
            if (this.hField == null)
                this.hField = new CT_Double();
            return hField;
        }
        public CT_Double AddNewY()
        {
            if (this.yField == null)
                this.yField = new CT_Double();
            return yField;
        }
        public CT_Double AddNewX()
        {
            if (this.xField == null)
                this.xField = new CT_Double();
            return xField;
        }
        [XmlElement(Order = 0)]
        public CT_LayoutTarget layoutTarget
        {
            get
            {
                return this.layoutTargetField;
            }
            set
            {
                this.layoutTargetField = value;
            }
        }

        [XmlElement(Order = 1)]
        public CT_LayoutMode xMode
        {
            get
            {
                return this.xModeField;
            }
            set
            {
                this.xModeField = value;
            }
        }

        [XmlElement(Order = 2)]
        public CT_LayoutMode yMode
        {
            get
            {
                return this.yModeField;
            }
            set
            {
                this.yModeField = value;
            }
        }

        [XmlElement(Order = 3)]
        public CT_LayoutMode wMode
        {
            get
            {
                return this.wModeField;
            }
            set
            {
                this.wModeField = value;
            }
        }

        [XmlElement(Order = 4)]
        public CT_LayoutMode hMode
        {
            get
            {
                return this.hModeField;
            }
            set
            {
                this.hModeField = value;
            }
        }

        [XmlElement(Order = 5)]
        public CT_Double x
        {
            get
            {
                return this.xField;
            }
            set
            {
                this.xField = value;
            }
        }

        [XmlElement(Order = 6)]
        public CT_Double y
        {
            get
            {
                return this.yField;
            }
            set
            {
                this.yField = value;
            }
        }

        [XmlElement(Order = 7)]
        public CT_Double w
        {
            get
            {
                return this.wField;
            }
            set
            {
                this.wField = value;
            }
        }

        [XmlElement(Order = 8)]
        public CT_Double h
        {
            get
            {
                return this.hField;
            }
            set
            {
                this.hField = value;
            }
        }

        [XmlElement(Order = 9)]
        public List<CT_Extension> extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_LayoutTarget
    {

        private ST_LayoutTarget valField;

        public CT_LayoutTarget()
        {
            this.valField = ST_LayoutTarget.outer;
        }
        public static CT_LayoutTarget Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_LayoutTarget ctObj = new CT_LayoutTarget();
            if (node.Attributes["val"] != null)
                ctObj.val = (ST_LayoutTarget)Enum.Parse(typeof(ST_LayoutTarget), node.Attributes["val"].Value);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            if(this.val!= ST_LayoutTarget.outer)
                XmlHelper.WriteAttribute(sw, "val", this.val.ToString());
            sw.Write("/>");
        }

        [XmlAttribute]
        [DefaultValue(ST_LayoutTarget.outer)]
        public ST_LayoutTarget val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
    }


    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    public enum ST_LayoutTarget
    {

        /// <remarks/>
        inner,

        /// <remarks/>
        outer,
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_LayoutMode
    {

        private ST_LayoutMode valField;

        public CT_LayoutMode()
        {
            this.valField = ST_LayoutMode.factor;
        }

        [XmlAttribute]
        [DefaultValue(ST_LayoutMode.factor)]
        public ST_LayoutMode val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
        public static CT_LayoutMode Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_LayoutMode ctObj = new CT_LayoutMode();
            if (node.Attributes["val"] != null)
                ctObj.val = (ST_LayoutMode)Enum.Parse(typeof(ST_LayoutMode), node.Attributes["val"].Value);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            if(this.val!= ST_LayoutMode.factor)
                XmlHelper.WriteAttribute(sw, "val", this.val.ToString());
            sw.Write("/>");
        }

    }


    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    public enum ST_LayoutMode
    {

        /// <remarks/>
        edge,

        /// <remarks/>
        factor,
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_Double
    {

        private double valField;
        public static CT_Double Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_Double ctObj = new CT_Double();
            ctObj.val = XmlHelper.ReadDouble(node.Attributes["val"]);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "val", this.val);
            sw.Write("/>");
        }

        [XmlAttribute]
        public double val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_DTable
    {

        private CT_Boolean showHorzBorderField;

        private CT_Boolean showVertBorderField;

        private CT_Boolean showOutlineField;

        private CT_Boolean showKeysField;

        private CT_ShapeProperties spPrField;

        private CT_TextBody txPrField;

        private List<CT_Extension> extLstField;

        public CT_DTable()
        {
        }
        public static CT_DTable Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_DTable ctObj = new CT_DTable();
            ctObj.extLst = new List<CT_Extension>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "showHorzBorder")
                    ctObj.showHorzBorder = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "showVertBorder")
                    ctObj.showVertBorder = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "showOutline")
                    ctObj.showOutline = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "showKeys")
                    ctObj.showKeys = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "spPr")
                    ctObj.spPr = CT_ShapeProperties.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "txPr")
                    ctObj.txPr = CT_TextBody.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "extLst")
                    ctObj.extLst.Add(CT_Extension.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            sw.Write(">");
            if (this.showHorzBorder != null)
                this.showHorzBorder.Write(sw, "showHorzBorder");
            if (this.showVertBorder != null)
                this.showVertBorder.Write(sw, "showVertBorder");
            if (this.showOutline != null)
                this.showOutline.Write(sw, "showOutline");
            if (this.showKeys != null)
                this.showKeys.Write(sw, "showKeys");
            if (this.spPr != null)
                this.spPr.Write(sw, "spPr");
            if (this.txPr != null)
                this.txPr.Write(sw, "txPr");
            if (this.extLst != null)
            {
                foreach (CT_Extension x in this.extLst)
                {
                    x.Write(sw, "extLst");
                }
            }
            sw.Write(string.Format("</c:{0}>", nodeName));
        }


        [XmlElement(Order = 0)]
        public CT_Boolean showHorzBorder
        {
            get
            {
                return this.showHorzBorderField;
            }
            set
            {
                this.showHorzBorderField = value;
            }
        }

        [XmlElement(Order = 1)]
        public CT_Boolean showVertBorder
        {
            get
            {
                return this.showVertBorderField;
            }
            set
            {
                this.showVertBorderField = value;
            }
        }

        [XmlElement(Order = 2)]
        public CT_Boolean showOutline
        {
            get
            {
                return this.showOutlineField;
            }
            set
            {
                this.showOutlineField = value;
            }
        }

        [XmlElement(Order = 3)]
        public CT_Boolean showKeys
        {
            get
            {
                return this.showKeysField;
            }
            set
            {
                this.showKeysField = value;
            }
        }

        [XmlElement(Order = 4)]
        public CT_ShapeProperties spPr
        {
            get
            {
                return this.spPrField;
            }
            set
            {
                this.spPrField = value;
            }
        }

        [XmlElement(Order = 5)]
        public CT_TextBody txPr
        {
            get
            {
                return this.txPrField;
            }
            set
            {
                this.txPrField = value;
            }
        }

        [XmlElement(Order = 6)]
        public List<CT_Extension> extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_SerAx
    {

        private CT_UnsignedInt axIdField;

        private CT_Scaling scalingField;

        private CT_Boolean deleteField;

        private CT_AxPos axPosField;

        private CT_ChartLines majorGridlinesField;

        private CT_ChartLines minorGridlinesField;

        private CT_Title titleField;

        private CT_NumFmt numFmtField;

        private CT_TickMark majorTickMarkField;

        private CT_TickMark minorTickMarkField;

        private CT_TickLblPos tickLblPosField;

        private CT_ShapeProperties spPrField;

        private CT_TextBody txPrField;

        private CT_UnsignedInt crossAxField;


        private CT_Skip tickLblSkipField;

        private CT_Skip tickMarkSkipField;

        private List<CT_Extension> extLstField;

        public CT_SerAx()
        {
        }

        public static CT_SerAx Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_SerAx ctObj = new CT_SerAx();
            ctObj.extLst = new List<CT_Extension>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "axId")
                    ctObj.axId = CT_UnsignedInt.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "scaling")
                    ctObj.scaling = CT_Scaling.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "delete")
                    ctObj.delete = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "axPos")
                    ctObj.axPos = CT_AxPos.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "majorGridlines")
                    ctObj.majorGridlines = CT_ChartLines.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "minorGridlines")
                    ctObj.minorGridlines = CT_ChartLines.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "title")
                    ctObj.title = CT_Title.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "numFmt")
                    ctObj.numFmt = CT_NumFmt.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "majorTickMark")
                    ctObj.majorTickMark = CT_TickMark.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "minorTickMark")
                    ctObj.minorTickMark = CT_TickMark.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "tickLblPos")
                    ctObj.tickLblPos = CT_TickLblPos.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "spPr")
                    ctObj.spPr = CT_ShapeProperties.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "txPr")
                    ctObj.txPr = CT_TextBody.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "crossAx")
                    ctObj.crossAx = CT_UnsignedInt.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "crosses")
                    ctObj.crosses = CT_Crosses.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "crossesAt")
                    ctObj.crossesAt = CT_Double.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "tickLblSkip")
                    ctObj.tickLblSkip = CT_Skip.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "tickMarkSkip")
                    ctObj.tickMarkSkip = CT_Skip.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "extLst")
                    ctObj.extLst.Add(CT_Extension.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            sw.Write(">");
            if (this.axId != null)
                this.axId.Write(sw, "axId");
            if (this.scaling != null)
                this.scaling.Write(sw, "scaling");
            if (this.delete != null)
                this.delete.Write(sw, "delete");
            if (this.axPos != null)
                this.axPos.Write(sw, "axPos");
            if (this.majorGridlines != null)
                this.majorGridlines.Write(sw, "majorGridlines");
            if (this.minorGridlines != null)
                this.minorGridlines.Write(sw, "minorGridlines");
            if (this.title != null)
                this.title.Write(sw, "title");
            if (this.numFmt != null)
                this.numFmt.Write(sw, "numFmt");
            if (this.majorTickMark != null)
                this.majorTickMark.Write(sw, "majorTickMark");
            if (this.minorTickMark != null)
                this.minorTickMark.Write(sw, "minorTickMark");
            if (this.tickLblPos != null)
                this.tickLblPos.Write(sw, "tickLblPos");
            if (this.spPr != null)
                this.spPr.Write(sw, "spPr");
            if (this.txPr != null)
                this.txPr.Write(sw, "txPr");
            if (this.crossAx != null)
                this.crossAx.Write(sw, "crossAx");
            if (this.crosses != null)
                this.crosses.Write(sw, "crosses");
            if (this.crossesAt != null)
                this.crossesAt.Write(sw, "crossesAt");
            if (this.tickLblSkip != null)
                this.tickLblSkip.Write(sw, "tickLblSkip");
            if (this.tickMarkSkip != null)
                this.tickMarkSkip.Write(sw, "tickMarkSkip");
            if (this.extLst != null)
            {
                foreach (CT_Extension x in this.extLst)
                {
                    x.Write(sw, "extLst");
                }
            }
            sw.Write(string.Format("</c:{0}>", nodeName));
        }

        [XmlElement(Order = 0)]
        public CT_UnsignedInt axId
        {
            get
            {
                return this.axIdField;
            }
            set
            {
                this.axIdField = value;
            }
        }

        [XmlElement(Order = 1)]
        public CT_Scaling scaling
        {
            get
            {
                return this.scalingField;
            }
            set
            {
                this.scalingField = value;
            }
        }

        [XmlElement(Order = 2)]
        public CT_Boolean delete
        {
            get
            {
                return this.deleteField;
            }
            set
            {
                this.deleteField = value;
            }
        }

        [XmlElement(Order = 3)]
        public CT_AxPos axPos
        {
            get
            {
                return this.axPosField;
            }
            set
            {
                this.axPosField = value;
            }
        }

        [XmlElement(Order = 4)]
        public CT_ChartLines majorGridlines
        {
            get
            {
                return this.majorGridlinesField;
            }
            set
            {
                this.majorGridlinesField = value;
            }
        }

        [XmlElement(Order = 5)]
        public CT_ChartLines minorGridlines
        {
            get
            {
                return this.minorGridlinesField;
            }
            set
            {
                this.minorGridlinesField = value;
            }
        }

        [XmlElement(Order = 6)]
        public CT_Title title
        {
            get
            {
                return this.titleField;
            }
            set
            {
                this.titleField = value;
            }
        }

        [XmlElement(Order = 7)]
        public CT_NumFmt numFmt
        {
            get
            {
                return this.numFmtField;
            }
            set
            {
                this.numFmtField = value;
            }
        }

        [XmlElement(Order = 8)]
        public CT_TickMark majorTickMark
        {
            get
            {
                return this.majorTickMarkField;
            }
            set
            {
                this.majorTickMarkField = value;
            }
        }

        [XmlElement(Order = 9)]
        public CT_TickMark minorTickMark
        {
            get
            {
                return this.minorTickMarkField;
            }
            set
            {
                this.minorTickMarkField = value;
            }
        }

        [XmlElement(Order = 10)]
        public CT_TickLblPos tickLblPos
        {
            get
            {
                return this.tickLblPosField;
            }
            set
            {
                this.tickLblPosField = value;
            }
        }

        [XmlElement(Order = 11)]
        public CT_ShapeProperties spPr
        {
            get
            {
                return this.spPrField;
            }
            set
            {
                this.spPrField = value;
            }
        }

        [XmlElement(Order = 12)]
        public CT_TextBody txPr
        {
            get
            {
                return this.txPrField;
            }
            set
            {
                this.txPrField = value;
            }
        }

        [XmlElement(Order = 13)]
        public CT_UnsignedInt crossAx
        {
            get
            {
                return this.crossAxField;
            }
            set
            {
                this.crossAxField = value;
            }
        }
        CT_Crosses crossesField;
        [XmlElement(Order = 14)]
        public CT_Crosses crosses
        {
            get
            {
                return this.crossesField;
            }
            set
            {
                this.crossesField = value;
            }
        }
        CT_Double crossesAtField;
        [XmlElement(Order = 15)]
        public CT_Double crossesAt
        {
            get
            {
                return this.crossesAtField;
            }
            set
            {
                this.crossesAtField = value;
            }
        }

        [XmlElement(Order = 16)]
        public CT_Skip tickLblSkip
        {
            get
            {
                return this.tickLblSkipField;
            }
            set
            {
                this.tickLblSkipField = value;
            }
        }

        [XmlElement(Order = 17)]
        public CT_Skip tickMarkSkip
        {
            get
            {
                return this.tickMarkSkipField;
            }
            set
            {
                this.tickMarkSkipField = value;
            }
        }

        [XmlElement(Order = 18)]
        public List<CT_Extension> extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_Scaling
    {

        private CT_LogBase logBaseField;

        private CT_Orientation orientationField;

        private CT_Double maxField;

        private CT_Double minField;

        private List<CT_Extension> extLstField;

        public CT_Scaling()
        {
        }
        public static CT_Scaling Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_Scaling ctObj = new CT_Scaling();
            ctObj.extLst = new List<CT_Extension>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "logBase")
                    ctObj.logBase = CT_LogBase.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "orientation")
                    ctObj.orientation = CT_Orientation.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "max")
                    ctObj.max = CT_Double.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "min")
                    ctObj.min = CT_Double.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "extLst")
                    ctObj.extLst.Add(CT_Extension.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}>", nodeName));
            if (this.logBase != null)
                this.logBase.Write(sw, "logBase");
            if (this.orientation != null)
                this.orientation.Write(sw, "orientation");
            if (this.max != null)
                this.max.Write(sw, "max");
            if (this.min != null)
                this.min.Write(sw, "min");
            if (this.extLst != null)
            {
                foreach (CT_Extension x in this.extLst)
                {
                    x.Write(sw, "extLst");
                }
            }
            sw.Write(string.Format("</c:{0}>", nodeName));
        }

        public bool IsSetOrientation()
        {
            return this.orientationField != null;
        }
        public CT_Orientation AddNewOrientation()
        {
            this.orientationField = new CT_Orientation();
            return this.orientationField;
        }
        public bool IsSetLogBase()
        {
            return logBaseField != null;
        }
        public CT_LogBase AddNewLogBase()
        {
            this.logBaseField = new CT_LogBase();
            return this.logBaseField;
        }
        public bool IsSetMax()
        {
            return maxField != null;
        }
        public CT_Double AddNewMax()
        {
            this.maxField = new CT_Double();
            return this.maxField;
        }
        public bool IsSetMin()
        {
            return minField != null;
        }
        public CT_Double AddNewMin()
        {
            this.minField = new CT_Double();
            return this.minField;
        }
        [XmlElement(Order = 0)]
        public CT_LogBase logBase
        {
            get
            {
                return this.logBaseField;
            }
            set
            {
                this.logBaseField = value;
            }
        }

        [XmlElement(Order = 1)]
        public CT_Orientation orientation
        {
            get
            {
                return this.orientationField;
            }
            set
            {
                this.orientationField = value;
            }
        }

        [XmlElement(Order = 2)]
        public CT_Double max
        {
            get
            {
                return this.maxField;
            }
            set
            {
                this.maxField = value;
            }
        }

        [XmlElement(Order = 3)]
        public CT_Double min
        {
            get
            {
                return this.minField;
            }
            set
            {
                this.minField = value;
            }
        }

        [XmlElement(Order = 4)]
        public List<CT_Extension> extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_LogBase
    {
        public static CT_LogBase Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_LogBase ctObj = new CT_LogBase();
            if (node.Attributes["val"] != null)
                ctObj.val = XmlHelper.ReadDouble(node.Attributes["val"]);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "val", this.val);
            sw.Write("/>");
        }

        private double valField;

        [XmlAttribute]
        public double val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_Orientation
    {

        private ST_Orientation valField;

        public CT_Orientation()
        {
            this.valField = ST_Orientation.minMax;
        }
        public static CT_Orientation Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_Orientation ctObj = new CT_Orientation();
            if (node.Attributes["val"] != null)
                ctObj.val = (ST_Orientation)Enum.Parse(typeof(ST_Orientation), node.Attributes["val"].Value);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "val", this.val.ToString());
            sw.Write("/>");
        }

        [XmlAttribute]
        public ST_Orientation val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
    }


    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    public enum ST_Orientation
    {

        /// <remarks/>
        maxMin,

        /// <remarks/>
        minMax,
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_AxPos
    {

        private ST_AxPos valField;
        public static CT_AxPos Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_AxPos ctObj = new CT_AxPos();
            if (node.Attributes["val"] != null)
                ctObj.val = (ST_AxPos)Enum.Parse(typeof(ST_AxPos), node.Attributes["val"].Value);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "val", this.val.ToString());
            sw.Write("/>");
        }

        [XmlAttribute]
        public ST_AxPos val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
    }


    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    public enum ST_AxPos
    {

        /// <remarks/>
        b,

        /// <remarks/>
        l,

        /// <remarks/>
        r,

        /// <remarks/>
        t,
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_ChartLines
    {
        public static CT_ChartLines Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_ChartLines ctObj = new CT_ChartLines();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "spPr")
                    ctObj.spPr = CT_ShapeProperties.Parse(childNode, namespaceManager);
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            sw.Write(">");
            if (this.spPr != null)
                this.spPr.Write(sw, "spPr");
            sw.Write(string.Format("</c:{0}>", nodeName));
        }

        private CT_ShapeProperties spPrField;

        [XmlElement(Order = 0)]
        public CT_ShapeProperties spPr
        {
            get
            {
                return this.spPrField;
            }
            set
            {
                this.spPrField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_Title
    {

        private CT_Tx txField;

        private CT_Layout layoutField;

        private CT_Boolean overlayField;

        private CT_ShapeProperties spPrField;

        private CT_TextBody txPrField;

        private List<CT_Extension> extLstField;

        public CT_Title()
        {
            //this.extLstField = new List<CT_Extension>();
            //this.overlayField = new CT_Boolean();
            //this.layoutField = new CT_Layout();
            //this.txField = new CT_Tx();
        }
        public static CT_Title Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_Title ctObj = new CT_Title();
            ctObj.extLst = new List<CT_Extension>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "tx")
                    ctObj.tx = CT_Tx.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "layout")
                    ctObj.layout = CT_Layout.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "overlay")
                    ctObj.overlay = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "spPr")
                    ctObj.spPr = CT_ShapeProperties.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "txPr")
                    ctObj.txPr = CT_TextBody.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "extLst")
                    ctObj.extLst.Add(CT_Extension.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            sw.Write(">");
            if (this.tx != null)
                this.tx.Write(sw, "tx");
            if (this.layout != null)
                this.layout.Write(sw, "layout");
            if (this.overlay != null)
                this.overlay.Write(sw, "overlay");
            if (this.spPr != null)
                this.spPr.Write(sw, "spPr");
            if (this.txPr != null)
                this.txPr.Write(sw, "txPr");
            if (this.extLst != null)
            {
                foreach (CT_Extension x in this.extLst)
                {
                    x.Write(sw, "extLst");
                }
            }
            sw.Write(string.Format("</c:{0}>", nodeName));
        }

        public bool IsSetTx()
        {
            return this.txField != null;
        }

        public CT_Tx AddNewTx()
        {
            this.txField = new CT_Tx();
            return this.txField;
        }

        [XmlElement(Order = 0)]
        public CT_Tx tx
        {
            get
            {
                return this.txField;
            }
            set
            {
                this.txField = value;
            }
        }

        [XmlElement(Order = 1)]
        public CT_Layout layout
        {
            get
            {
                return this.layoutField;
            }
            set
            {
                this.layoutField = value;
            }
        }

        [XmlElement(Order = 2)]
        public CT_Boolean overlay
        {
            get
            {
                return this.overlayField;
            }
            set
            {
                this.overlayField = value;
            }
        }

        [XmlElement(Order = 3)]
        public CT_ShapeProperties spPr
        {
            get
            {
                return this.spPrField;
            }
            set
            {
                this.spPrField = value;
            }
        }

        [XmlElement(Order = 4)]
        public CT_TextBody txPr
        {
            get
            {
                return this.txPrField;
            }
            set
            {
                this.txPrField = value;
            }
        }

        [XmlElement(Order = 5)]
        public List<CT_Extension> extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_Tx
    {
        CT_StrRef strRefField;
        public CT_StrRef strRef
        {
            get { return this.strRefField; }
            set { this.strRefField = value; }
        }

        CT_TextBody richField;
        public CT_TextBody rich
        {
            get { return this.richField; }
            set { this.richField = value; }
        }

        public static CT_Tx Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_Tx ctObj = new CT_Tx();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "strRef")
                    ctObj.strRef = CT_StrRef.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "rich")
                    ctObj.rich = CT_TextBody.Parse(childNode, namespaceManager);
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            sw.Write(">");
            if (this.strRef != null)
                this.strRef.Write(sw, "strRef");
            if (this.rich != null)
                this.rich.Write(sw, "rich");
            sw.Write(string.Format("</c:{0}>", nodeName));
        }

        public bool IsSetStrRef()
        {
            return this.strRefField != null;
        }

        public void UnsetStrRef()
        {
            this.strRefField = null;
        }

        public bool IsSetRich()
        {
            return rich != null;
        }

        public CT_TextBody AddNewRich()
        {
            this.richField = new CT_TextBody();
            return this.richField;
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_StrRef
    {

        private string fField;

        private CT_StrData strCacheField;

        private List<CT_Extension> extLstField;

        public CT_StrRef()
        {

        }
        public static CT_StrRef Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_StrRef ctObj = new CT_StrRef();
            ctObj.extLst = new List<CT_Extension>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "f")
                    ctObj.f = childNode.InnerText;
                else if (childNode.LocalName == "strCache")
                    ctObj.strCache = CT_StrData.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "extLst")
                    ctObj.extLst.Add(CT_Extension.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            sw.Write(">");
            if (this.f != null)
                sw.Write(string.Format("<c:f>{0}</c:f>", this.f));
            if (this.strCache != null)
                this.strCache.Write(sw, "strCache");
            if (this.extLst != null)
            {
                foreach (CT_Extension x in this.extLst)
                {
                    x.Write(sw, "extLst");
                }
            }
            sw.Write(string.Format("</c:{0}>", nodeName));
        }


        [XmlElement(Order = 0)]
        public string f
        {
            get
            {
                return this.fField;
            }
            set
            {
                this.fField = value;
            }
        }

        [XmlElement(Order = 1)]
        public CT_StrData strCache
        {
            get
            {
                return this.strCacheField;
            }
            set
            {
                this.strCacheField = value;
            }
        }
        [XmlElement(Order = 2)]
        public List<CT_Extension> extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }

        public CT_StrData AddNewStrCache()
        {
            strCache = new CT_StrData();
            return strCache;
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_StrData
    {

        private CT_UnsignedInt ptCountField;

        private List<CT_StrVal> ptField;

        private List<CT_Extension> extLstField;

        public CT_StrData()
        {

        }

        public static CT_StrData Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_StrData ctObj = new CT_StrData();
            ctObj.pt = new List<CT_StrVal>();
            ctObj.extLst = new List<CT_Extension>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "ptCount")
                    ctObj.ptCount = CT_UnsignedInt.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "pt")
                    ctObj.pt.Add(CT_StrVal.Parse(childNode, namespaceManager));
                else if (childNode.LocalName == "extLst")
                    ctObj.extLst.Add(CT_Extension.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            sw.Write(">");
            if (this.ptCount != null)
                this.ptCount.Write(sw, "ptCount");
            if (this.pt != null)
            {
                foreach (CT_StrVal x in this.pt)
                {
                    x.Write(sw, "pt");
                }
            }
            if (this.extLst != null)
            {
                foreach (CT_Extension x in this.extLst)
                {
                    x.Write(sw, "extLst");
                }
            }
            sw.Write(string.Format("</c:{0}>", nodeName));
        }


        [XmlElement(Order = 0)]
        public CT_UnsignedInt ptCount
        {
            get
            {
                return this.ptCountField;
            }
            set
            {
                this.ptCountField = value;
            }
        }

        [XmlElement("pt", Order = 1)]
        public List<CT_StrVal> pt
        {
            get
            {
                return this.ptField;
            }
            set
            {
                this.ptField = value;
            }
        }

        [XmlElement(Order = 2)]
        public List<CT_Extension> extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }

        public CT_UnsignedInt AddNewPtCount()
        {
            ptCount = new CT_UnsignedInt();
            return ptCount;
        }

        public CT_StrVal AddNewPt()
        {
            if (pt == null)
                pt = new List<CT_StrVal>();
            CT_StrVal strVal = new CT_StrVal();
            pt.Add(strVal);
            return strVal;
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_StrVal
    {

        private string vField;

        private uint idxField;
        public static CT_StrVal Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_StrVal ctObj = new CT_StrVal();
            ctObj.idx = XmlHelper.ReadUInt(node.Attributes["idx"]);
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "v")
                    ctObj.v = childNode.InnerText;
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "idx", this.idx, true);
            sw.Write(">");
            if (this.v != null)
                sw.Write(string.Format("<c:v>{0}</c:v>", XmlHelper.EncodeXml(this.v)));
            sw.Write(string.Format("</c:{0}>", nodeName));
        }

        [XmlElement(Order = 0)]
        public string v
        {
            get
            {
                return this.vField;
            }
            set
            {
                this.vField = value;
            }
        }

        [XmlAttribute]
        public uint idx
        {
            get
            {
                return this.idxField;
            }
            set
            {
                this.idxField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_NumFmt
    {

        private string formatCodeField;

        private bool sourceLinkedField;

        public static CT_NumFmt Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_NumFmt ctObj = new CT_NumFmt();
            ctObj.formatCode = XmlHelper.ReadString(node.Attributes["formatCode"]);
            ctObj.sourceLinked = XmlHelper.ReadBool(node.Attributes["sourceLinked"]);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "formatCode", this.formatCode);
            XmlHelper.WriteAttribute(sw, "sourceLinked", this.sourceLinked, false);
            sw.Write("/>");
        }

        [XmlAttribute]
        public string formatCode
        {
            get
            {
                return this.formatCodeField;
            }
            set
            {
                this.formatCodeField = value;
            }
        }

        [XmlAttribute]
        public bool sourceLinked
        {
            get
            {
                return this.sourceLinkedField;
            }
            set
            {
                this.sourceLinkedField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_TickMark
    {

        private ST_TickMark valField;

        public CT_TickMark()
        {
            this.valField = ST_TickMark.cross;
        }
        public static CT_TickMark Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_TickMark ctObj = new CT_TickMark();
            if (node.Attributes["val"] != null)
                ctObj.val = (ST_TickMark)Enum.Parse(typeof(ST_TickMark), node.Attributes["val"].Value);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "val", this.val.ToString());
            sw.Write("/>");
        }

        [XmlAttribute]
        [DefaultValue(ST_TickMark.cross)]
        public ST_TickMark val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
    }


    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    public enum ST_TickMark
    {

        /// <remarks/>
        cross,

        /// <remarks/>
        @in,

        /// <remarks/>
        none,

        /// <remarks/>
        @out,
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_TickLblPos
    {

        private ST_TickLblPos valField;

        public CT_TickLblPos()
        {
            this.valField = ST_TickLblPos.nextTo;
        }
        public static CT_TickLblPos Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_TickLblPos ctObj = new CT_TickLblPos();
            if (node.Attributes["val"] != null)
                ctObj.val = (ST_TickLblPos)Enum.Parse(typeof(ST_TickLblPos), node.Attributes["val"].Value);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "val", this.val.ToString());
            sw.Write("/>");
        }

        [XmlAttribute]
        [DefaultValue(ST_TickLblPos.nextTo)]
        public ST_TickLblPos val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
    }


    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    public enum ST_TickLblPos
    {

        /// <remarks/>
        high,

        /// <remarks/>
        low,

        /// <remarks/>
        nextTo,

        /// <remarks/>
        none,
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_Crosses
    {
        public static CT_Crosses Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_Crosses ctObj = new CT_Crosses();
            if (node.Attributes["val"] != null)
                ctObj.val = (ST_Crosses)Enum.Parse(typeof(ST_Crosses), node.Attributes["val"].Value);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "val", this.val.ToString());
            sw.Write("/>");
        }

        private ST_Crosses valField;

        [XmlAttribute]
        public ST_Crosses val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
    }


    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    public enum ST_Crosses
    {

        /// <remarks/>
        autoZero,

        /// <remarks/>
        max,

        /// <remarks/>
        min,
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_Skip
    {

        private ushort valField;
        public static CT_Skip Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_Skip ctObj = new CT_Skip();
            if (node.Attributes["val"] != null)
                ctObj.val = XmlHelper.ReadUShort(node.Attributes["val"]);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "val", this.val);
            sw.Write("/>");
        }

        [XmlAttribute]
        public ushort val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_TimeUnit
    {
        public static CT_TimeUnit Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_TimeUnit ctObj = new CT_TimeUnit();
            if (node.Attributes["val"] != null)
                ctObj.val = (ST_TimeUnit)Enum.Parse(typeof(ST_TimeUnit), node.Attributes["val"].Value);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "val", this.val.ToString());
            sw.Write("/>");
        }

        private ST_TimeUnit valField;

        public CT_TimeUnit()
        {
            this.valField = ST_TimeUnit.days;
        }

        [XmlAttribute]
        [DefaultValue(ST_TimeUnit.days)]
        public ST_TimeUnit val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
    }


    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    public enum ST_TimeUnit
    {

        /// <remarks/>
        days,

        /// <remarks/>
        months,

        /// <remarks/>
        years,
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_DateAx
    {

        private CT_UnsignedInt axIdField;

        private CT_Scaling scalingField;

        private CT_Boolean deleteField;

        private CT_AxPos axPosField;

        private CT_ChartLines majorGridlinesField;

        private CT_ChartLines minorGridlinesField;

        private CT_Title titleField;

        private CT_NumFmt numFmtField;

        private CT_TickMark majorTickMarkField;

        private CT_TickMark minorTickMarkField;

        private CT_TickLblPos tickLblPosField;

        private CT_ShapeProperties spPrField;

        private CT_TextBody txPrField;

        private CT_UnsignedInt crossAxField;

        //private object itemField;

        private CT_Boolean autoField;

        private CT_LblOffset lblOffsetField;

        private CT_TimeUnit baseTimeUnitField;

        private CT_AxisUnit majorUnitField;

        private CT_TimeUnit majorTimeUnitField;

        private CT_AxisUnit minorUnitField;

        private CT_TimeUnit minorTimeUnitField;

        private List<CT_Extension> extLstField;

        public CT_DateAx()
        {
        }
        public static CT_DateAx Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_DateAx ctObj = new CT_DateAx();
            ctObj.extLst = new List<CT_Extension>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "axId")
                    ctObj.axId = CT_UnsignedInt.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "scaling")
                    ctObj.scaling = CT_Scaling.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "delete")
                    ctObj.delete = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "axPos")
                    ctObj.axPos = CT_AxPos.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "majorGridlines")
                    ctObj.majorGridlines = CT_ChartLines.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "minorGridlines")
                    ctObj.minorGridlines = CT_ChartLines.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "title")
                    ctObj.title = CT_Title.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "numFmt")
                    ctObj.numFmt = CT_NumFmt.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "majorTickMark")
                    ctObj.majorTickMark = CT_TickMark.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "minorTickMark")
                    ctObj.minorTickMark = CT_TickMark.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "tickLblPos")
                    ctObj.tickLblPos = CT_TickLblPos.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "spPr")
                    ctObj.spPr = CT_ShapeProperties.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "txPr")
                    ctObj.txPr = CT_TextBody.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "crossAx")
                    ctObj.crossAx = CT_UnsignedInt.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "crosses")
                    ctObj.crosses = CT_Crosses.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "auto")
                    ctObj.auto = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "lblOffset")
                    ctObj.lblOffset = CT_LblOffset.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "baseTimeUnit")
                    ctObj.baseTimeUnit = CT_TimeUnit.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "majorUnit")
                    ctObj.majorUnit = CT_AxisUnit.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "majorTimeUnit")
                    ctObj.majorTimeUnit = CT_TimeUnit.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "minorUnit")
                    ctObj.minorUnit = CT_AxisUnit.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "minorTimeUnit")
                    ctObj.minorTimeUnit = CT_TimeUnit.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "extLst")
                    ctObj.extLst.Add(CT_Extension.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            sw.Write(">");
            if (this.axId != null)
                this.axId.Write(sw, "axId");
            if (this.scaling != null)
                this.scaling.Write(sw, "scaling");
            if (this.delete != null)
                this.delete.Write(sw, "delete");
            if (this.axPos != null)
                this.axPos.Write(sw, "axPos");
            if (this.majorGridlines != null)
                this.majorGridlines.Write(sw, "majorGridlines");
            if (this.minorGridlines != null)
                this.minorGridlines.Write(sw, "minorGridlines");
            if (this.title != null)
                this.title.Write(sw, "title");
            if (this.numFmt != null)
                this.numFmt.Write(sw, "numFmt");
            if (this.majorTickMark != null)
                this.majorTickMark.Write(sw, "majorTickMark");
            if (this.minorTickMark != null)
                this.minorTickMark.Write(sw, "minorTickMark");
            if (this.tickLblPos != null)
                this.tickLblPos.Write(sw, "tickLblPos");
            if (this.spPr != null)
                this.spPr.Write(sw, "spPr");
            if (this.txPr != null)
                this.txPr.Write(sw, "txPr");
            if (this.crossAx != null)
                this.crossAx.Write(sw, "crossAx");
            if (this.crosses != null)
                this.crosses.Write(sw, "crosses");
            if (this.auto != null)
                this.auto.Write(sw, "auto");
            if (this.lblOffset != null)
                this.lblOffset.Write(sw, "lblOffset");
            if (this.baseTimeUnit != null)
                this.baseTimeUnit.Write(sw, "baseTimeUnit");
            if (this.majorUnit != null)
                this.majorUnit.Write(sw, "majorUnit");
            if (this.majorTimeUnit != null)
                this.majorTimeUnit.Write(sw, "majorTimeUnit");
            if (this.minorUnit != null)
                this.minorUnit.Write(sw, "minorUnit");
            if (this.minorTimeUnit != null)
                this.minorTimeUnit.Write(sw, "minorTimeUnit");
            if (this.extLst != null)
            {
                foreach (CT_Extension x in this.extLst)
                {
                    x.Write(sw, "extLst");
                }
            }
            sw.Write(string.Format("</c:{0}>", nodeName));
        }


        [XmlElement(Order = 0)]
        public CT_UnsignedInt axId
        {
            get
            {
                return this.axIdField;
            }
            set
            {
                this.axIdField = value;
            }
        }

        [XmlElement(Order = 1)]
        public CT_Scaling scaling
        {
            get
            {
                return this.scalingField;
            }
            set
            {
                this.scalingField = value;
            }
        }

        [XmlElement(Order = 2)]
        public CT_Boolean delete
        {
            get
            {
                return this.deleteField;
            }
            set
            {
                this.deleteField = value;
            }
        }

        [XmlElement(Order = 3)]
        public CT_AxPos axPos
        {
            get
            {
                return this.axPosField;
            }
            set
            {
                this.axPosField = value;
            }
        }

        [XmlElement(Order = 4)]
        public CT_ChartLines majorGridlines
        {
            get
            {
                return this.majorGridlinesField;
            }
            set
            {
                this.majorGridlinesField = value;
            }
        }

        [XmlElement(Order = 5)]
        public CT_ChartLines minorGridlines
        {
            get
            {
                return this.minorGridlinesField;
            }
            set
            {
                this.minorGridlinesField = value;
            }
        }

        [XmlElement(Order = 6)]
        public CT_Title title
        {
            get
            {
                return this.titleField;
            }
            set
            {
                this.titleField = value;
            }
        }

        [XmlElement(Order = 7)]
        public CT_NumFmt numFmt
        {
            get
            {
                return this.numFmtField;
            }
            set
            {
                this.numFmtField = value;
            }
        }

        [XmlElement(Order = 8)]
        public CT_TickMark majorTickMark
        {
            get
            {
                return this.majorTickMarkField;
            }
            set
            {
                this.majorTickMarkField = value;
            }
        }

        [XmlElement(Order = 9)]
        public CT_TickMark minorTickMark
        {
            get
            {
                return this.minorTickMarkField;
            }
            set
            {
                this.minorTickMarkField = value;
            }
        }

        [XmlElement(Order = 10)]
        public CT_TickLblPos tickLblPos
        {
            get
            {
                return this.tickLblPosField;
            }
            set
            {
                this.tickLblPosField = value;
            }
        }

        [XmlElement(Order = 11)]
        public CT_ShapeProperties spPr
        {
            get
            {
                return this.spPrField;
            }
            set
            {
                this.spPrField = value;
            }
        }

        [XmlElement(Order = 12)]
        public CT_TextBody txPr
        {
            get
            {
                return this.txPrField;
            }
            set
            {
                this.txPrField = value;
            }
        }

        [XmlElement(Order = 13)]
        public CT_UnsignedInt crossAx
        {
            get
            {
                return this.crossAxField;
            }
            set
            {
                this.crossAxField = value;
            }
        }

        CT_Double crossesAtField;
        [XmlElement(Order = 14)]
        public CT_Double crossesAt
        {
            get { return this.crossesAtField; }
            set { this.crossesAtField = value; }
        }

        CT_Crosses crossesField;
        [XmlElement(Order = 14)]
        public CT_Crosses crosses
        {
            get { return this.crossesField; }
            set { this.crossesField = value; }
        }

        [XmlElement(Order = 15)]
        public CT_Boolean auto
        {
            get
            {
                return this.autoField;
            }
            set
            {
                this.autoField = value;
            }
        }

        [XmlElement(Order = 16)]
        public CT_LblOffset lblOffset
        {
            get
            {
                return this.lblOffsetField;
            }
            set
            {
                this.lblOffsetField = value;
            }
        }

        [XmlElement(Order = 17)]
        public CT_TimeUnit baseTimeUnit
        {
            get
            {
                return this.baseTimeUnitField;
            }
            set
            {
                this.baseTimeUnitField = value;
            }
        }

        [XmlElement(Order = 18)]
        public CT_AxisUnit majorUnit
        {
            get
            {
                return this.majorUnitField;
            }
            set
            {
                this.majorUnitField = value;
            }
        }

        [XmlElement(Order = 19)]
        public CT_TimeUnit majorTimeUnit
        {
            get
            {
                return this.majorTimeUnitField;
            }
            set
            {
                this.majorTimeUnitField = value;
            }
        }

        [XmlElement(Order = 20)]
        public CT_AxisUnit minorUnit
        {
            get
            {
                return this.minorUnitField;
            }
            set
            {
                this.minorUnitField = value;
            }
        }

        [XmlElement(Order = 21)]
        public CT_TimeUnit minorTimeUnit
        {
            get
            {
                return this.minorTimeUnitField;
            }
            set
            {
                this.minorTimeUnitField = value;
            }
        }

        [XmlElement(Order = 22)]
        public List<CT_Extension> extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }

        public CT_NumFmt AddNewNumFmt()
        {
            this.numFmtField = new CT_NumFmt();
            return numFmtField;
        }

        public bool IsSetNumFmt()
        {
            return this.numFmtField != null;
        }

        public CT_UnsignedInt AddNewAxId()
        {
            this.axIdField = new CT_UnsignedInt();
            return this.axIdField;
        }

        public CT_AxPos AddNewAxPos()
        {
            this.axPosField = new CT_AxPos();
            return this.axPosField;
        }

        public CT_Scaling AddNewScaling()
        {
            this.scalingField = new CT_Scaling();
            return this.scalingField;
        }

        public CT_Crosses AddNewCrosses()
        {
            this.crossesField = new CT_Crosses();
            return this.crossesField;
        }

        public CT_UnsignedInt AddNewCrossAx()
        {
            this.crossAxField = new CT_UnsignedInt();
            return this.crossAxField;
        }

        public CT_TickLblPos AddNewTickLblPos()
        {
            this.tickLblPosField = new CT_TickLblPos();
            return this.tickLblPosField;
        }

        public CT_Boolean AddNewDelete()
        {
            this.deleteField = new CT_Boolean();
            return this.deleteField;
        }

        public CT_TickMark AddNewMajorTickMark()
        {
            this.majorTickMarkField = new CT_TickMark();
            return this.majorTickMarkField;
        }

        public CT_TickMark AddNewMinorTickMark()
        {
            this.minorTickMarkField = new CT_TickMark();
            return this.minorTickMarkField;
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_LblOffset
    {

        private ushort valField;

        public CT_LblOffset()
        {
            this.valField = ((ushort)(100));
        }
        public static CT_LblOffset Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_LblOffset ctObj = new CT_LblOffset();
            if (node.Attributes["val"] != null)
                ctObj.val = XmlHelper.ReadUShort(node.Attributes["val"]);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "val", this.val);
            sw.Write("/>");
        }

        [XmlAttribute]
        [DefaultValue(typeof(ushort), "100")]
        public ushort val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_AxisUnit
    {

        private double valField;
        public static CT_AxisUnit Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_AxisUnit ctObj = new CT_AxisUnit();
            if (node.Attributes["val"] != null)
                ctObj.val = XmlHelper.ReadDouble(node.Attributes["val"]);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "val", this.val);
            sw.Write("/>");
        }

        [XmlAttribute]
        public double val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_LblAlgn
    {
        public static CT_LblAlgn Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_LblAlgn ctObj = new CT_LblAlgn();
            if (node.Attributes["val"] != null)
                ctObj.val = (ST_LblAlgn)Enum.Parse(typeof(ST_LblAlgn), node.Attributes["val"].Value);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "val", this.val.ToString());
            sw.Write("/>");
        }

        private ST_LblAlgn valField;

        [XmlAttribute]
        public ST_LblAlgn val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
    }


    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    public enum ST_LblAlgn
    {

        /// <remarks/>
        ctr,

        /// <remarks/>
        l,

        /// <remarks/>
        r,
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_CatAx
    {

        private CT_UnsignedInt axIdField;

        private CT_Scaling scalingField;

        private CT_Boolean deleteField;

        private CT_AxPos axPosField;

        private CT_ChartLines majorGridlinesField;

        private CT_ChartLines minorGridlinesField;

        private CT_Title titleField;

        private CT_NumFmt numFmtField;

        private CT_TickMark majorTickMarkField;

        private CT_TickMark minorTickMarkField;

        private CT_TickLblPos tickLblPosField;

        private CT_ShapeProperties spPrField;

        private CT_TextBody txPrField;

        private CT_UnsignedInt crossAxField;

        private CT_Boolean autoField;

        private CT_LblAlgn lblAlgnField;

        private CT_LblOffset lblOffsetField;

        private CT_Skip tickLblSkipField;

        private CT_Skip tickMarkSkipField;

        private CT_Boolean noMultiLvlLblField;

        private List<CT_Extension> extLstField;

        public CT_CatAx()
        {
        }
        public static CT_CatAx Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_CatAx ctObj = new CT_CatAx();
            ctObj.extLst = new List<CT_Extension>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "axId")
                    ctObj.axId = CT_UnsignedInt.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "scaling")
                    ctObj.scaling = CT_Scaling.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "delete")
                    ctObj.delete = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "axPos")
                    ctObj.axPos = CT_AxPos.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "majorGridlines")
                    ctObj.majorGridlines = CT_ChartLines.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "minorGridlines")
                    ctObj.minorGridlines = CT_ChartLines.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "title")
                    ctObj.title = CT_Title.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "numFmt")
                    ctObj.numFmt = CT_NumFmt.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "majorTickMark")
                    ctObj.majorTickMark = CT_TickMark.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "minorTickMark")
                    ctObj.minorTickMark = CT_TickMark.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "tickLblPos")
                    ctObj.tickLblPos = CT_TickLblPos.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "spPr")
                    ctObj.spPr = CT_ShapeProperties.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "txPr")
                    ctObj.txPr = CT_TextBody.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "crossAx")
                    ctObj.crossAx = CT_UnsignedInt.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "crosses")
                    ctObj.crosses = CT_Crosses.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "crossesAt")
                    ctObj.crossesAt = CT_Double.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "auto")
                    ctObj.auto = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "lblAlgn")
                    ctObj.lblAlgn = CT_LblAlgn.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "lblOffset")
                    ctObj.lblOffset = CT_LblOffset.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "tickLblSkip")
                    ctObj.tickLblSkip = CT_Skip.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "tickMarkSkip")
                    ctObj.tickMarkSkip = CT_Skip.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "noMultiLvlLbl")
                    ctObj.noMultiLvlLbl = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "extLst")
                    ctObj.extLst.Add(CT_Extension.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}>", nodeName));
            if (this.axId != null)
                this.axId.Write(sw, "axId");
            if (this.scaling != null)
                this.scaling.Write(sw, "scaling");
            if (this.delete != null)
                this.delete.Write(sw, "delete");
            if (this.axPos != null)
                this.axPos.Write(sw, "axPos");
            if (this.majorGridlines != null)
                this.majorGridlines.Write(sw, "majorGridlines");
            if (this.minorGridlines != null)
                this.minorGridlines.Write(sw, "minorGridlines");
            if (this.title != null)
                this.title.Write(sw, "title");
            if (this.numFmt != null)
                this.numFmt.Write(sw, "numFmt");
            if (this.majorTickMark != null)
                this.majorTickMark.Write(sw, "majorTickMark");
            if (this.minorTickMark != null)
                this.minorTickMark.Write(sw, "minorTickMark");
            if (this.tickLblPos != null)
                this.tickLblPos.Write(sw, "tickLblPos");
            if (this.spPr != null)
                this.spPr.Write(sw, "spPr");
            if (this.txPr != null)
                this.txPr.Write(sw, "txPr");
            if (this.crossAx != null)
                this.crossAx.Write(sw, "crossAx");
            if (this.crossesAt != null)
                this.crossesAt.Write(sw, "crossesAt");
            if (this.crosses != null)
                this.crosses.Write(sw, "crosses");
            if (this.auto != null)
                this.auto.Write(sw, "auto");
            if (this.lblAlgn != null)
                this.lblAlgn.Write(sw, "lblAlgn");
            if (this.lblOffset != null)
                this.lblOffset.Write(sw, "lblOffset");
            if (this.tickLblSkip != null)
                this.tickLblSkip.Write(sw, "tickLblSkip");
            if (this.tickMarkSkip != null)
                this.tickMarkSkip.Write(sw, "tickMarkSkip");
            if (this.noMultiLvlLbl != null)
                this.noMultiLvlLbl.Write(sw, "noMultiLvlLbl");
            if (this.extLst != null)
            {
                foreach (CT_Extension x in this.extLst)
                {
                    x.Write(sw, "extLst");
                }
            }
            sw.Write(string.Format("</c:{0}>", nodeName));
        }

        [XmlElement(Order = 0)]
        public CT_UnsignedInt axId
        {
            get
            {
                return this.axIdField;
            }
            set
            {
                this.axIdField = value;
            }
        }

        [XmlElement(Order = 1)]
        public CT_Scaling scaling
        {
            get
            {
                return this.scalingField;
            }
            set
            {
                this.scalingField = value;
            }
        }

        [XmlElement(Order = 2)]
        public CT_Boolean delete
        {
            get
            {
                return this.deleteField;
            }
            set
            {
                this.deleteField = value;
            }
        }

        [XmlElement(Order = 3)]
        public CT_AxPos axPos
        {
            get
            {
                return this.axPosField;
            }
            set
            {
                this.axPosField = value;
            }
        }

        [XmlElement(Order = 4)]
        public CT_ChartLines majorGridlines
        {
            get
            {
                return this.majorGridlinesField;
            }
            set
            {
                this.majorGridlinesField = value;
            }
        }

        [XmlElement(Order = 5)]
        public CT_ChartLines minorGridlines
        {
            get
            {
                return this.minorGridlinesField;
            }
            set
            {
                this.minorGridlinesField = value;
            }
        }

        [XmlElement(Order = 6)]
        public CT_Title title
        {
            get
            {
                return this.titleField;
            }
            set
            {
                this.titleField = value;
            }
        }

        [XmlElement(Order = 7)]
        public CT_NumFmt numFmt
        {
            get
            {
                return this.numFmtField;
            }
            set
            {
                this.numFmtField = value;
            }
        }

        [XmlElement(Order = 8)]
        public CT_TickMark majorTickMark
        {
            get
            {
                return this.majorTickMarkField;
            }
            set
            {
                this.majorTickMarkField = value;
            }
        }

        [XmlElement(Order = 9)]
        public CT_TickMark minorTickMark
        {
            get
            {
                return this.minorTickMarkField;
            }
            set
            {
                this.minorTickMarkField = value;
            }
        }

        [XmlElement(Order = 10)]
        public CT_TickLblPos tickLblPos
        {
            get
            {
                return this.tickLblPosField;
            }
            set
            {
                this.tickLblPosField = value;
            }
        }

        [XmlElement(Order = 11)]
        public CT_ShapeProperties spPr
        {
            get
            {
                return this.spPrField;
            }
            set
            {
                this.spPrField = value;
            }
        }

        [XmlElement(Order = 12)]
        public CT_TextBody txPr
        {
            get
            {
                return this.txPrField;
            }
            set
            {
                this.txPrField = value;
            }
        }

        [XmlElement(Order = 13)]
        public CT_UnsignedInt crossAx
        {
            get
            {
                return this.crossAxField;
            }
            set
            {
                this.crossAxField = value;
            }
        }
        CT_Double crossesAtField;
        [XmlElement(Order = 14)]
        public CT_Double crossesAt
        {
            get { return this.crossesAtField; }
            set { this.crossesAtField = value; }
        }

        CT_Crosses crossesField;
        [XmlElement(Order = 14)]
        public CT_Crosses crosses
        {
            get { return this.crossesField; }
            set { this.crossesField = value; }
        }


        [XmlElement(Order = 15)]
        public CT_Boolean auto
        {
            get
            {
                return this.autoField;
            }
            set
            {
                this.autoField = value;
            }
        }

        [XmlElement(Order = 16)]
        public CT_LblAlgn lblAlgn
        {
            get
            {
                return this.lblAlgnField;
            }
            set
            {
                this.lblAlgnField = value;
            }
        }

        [XmlElement(Order = 17)]
        public CT_LblOffset lblOffset
        {
            get
            {
                return this.lblOffsetField;
            }
            set
            {
                this.lblOffsetField = value;
            }
        }

        [XmlElement(Order = 18)]
        public CT_Skip tickLblSkip
        {
            get
            {
                return this.tickLblSkipField;
            }
            set
            {
                this.tickLblSkipField = value;
            }
        }

        [XmlElement(Order = 19)]
        public CT_Skip tickMarkSkip
        {
            get
            {
                return this.tickMarkSkipField;
            }
            set
            {
                this.tickMarkSkipField = value;
            }
        }

        [XmlElement(Order = 20)]
        public CT_Boolean noMultiLvlLbl
        {
            get
            {
                return this.noMultiLvlLblField;
            }
            set
            {
                this.noMultiLvlLblField = value;
            }
        }

        [XmlElement(Order = 21)]
        public List<CT_Extension> extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }

        public CT_NumFmt AddNewNumFmt()
        {
            this.numFmtField = new CT_NumFmt();
            return numFmtField;
        }

        public bool IsSetNumFmt()
        {
            return this.numFmtField != null;
        }

        public CT_UnsignedInt AddNewAxId()
        {
            this.axIdField = new CT_UnsignedInt();
            return this.axIdField;
        }

        public CT_AxPos AddNewAxPos()
        {
            this.axPosField = new CT_AxPos();
            return this.axPosField;
        }

        public CT_Scaling AddNewScaling()
        {
            this.scalingField = new CT_Scaling();
            return this.scalingField;
        }

        public CT_Crosses AddNewCrosses()
        {
            this.crossesField = new CT_Crosses();
            return this.crossesField;
        }

        public CT_UnsignedInt AddNewCrossAx()
        {
            this.crossAxField = new CT_UnsignedInt();
            return this.crossAxField;
        }

        public CT_TickLblPos AddNewTickLblPos()
        {
            this.tickLblPosField = new CT_TickLblPos();
            return this.tickLblPosField;
        }

        public CT_Boolean AddNewDelete()
        {
            this.deleteField = new CT_Boolean();
            return this.deleteField;
        }

        public CT_TickMark AddNewMajorTickMark()
        {
            this.majorTickMarkField = new CT_TickMark();
            return this.majorTickMarkField;
        }

        public CT_ChartLines AddNewMajorGridlines()
        {
            this.majorGridlinesField = new CT_ChartLines();
            return this.majorGridlinesField;
        }
        public CT_ChartLines AddNewMinorGridlines()
        {
            this.minorGridlinesField = new CT_ChartLines();
            return this.minorGridlinesField;
        }
        public CT_TickMark AddNewMinorTickMark()
        {
            this.minorTickMarkField = new CT_TickMark();
            return this.minorTickMarkField;
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_DispUnitsLbl
    {

        private CT_Layout layoutField;

        private CT_Tx txField;

        private CT_ShapeProperties spPrField;

        private CT_TextBody txPrField;

        public CT_DispUnitsLbl()
        {
        }
        public static CT_DispUnitsLbl Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_DispUnitsLbl ctObj = new CT_DispUnitsLbl();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "layout")
                    ctObj.layout = CT_Layout.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "tx")
                    ctObj.tx = CT_Tx.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "spPr")
                    ctObj.spPr = CT_ShapeProperties.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "txPr")
                    ctObj.txPr = CT_TextBody.Parse(childNode, namespaceManager);
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            sw.Write(">");
            if (this.layout != null)
                this.layout.Write(sw, "layout");
            if (this.tx != null)
                this.tx.Write(sw, "tx");
            if (this.spPr != null)
                this.spPr.Write(sw, "spPr");
            if (this.txPr != null)
                this.txPr.Write(sw, "txPr");
            sw.Write(string.Format("</c:{0}>", nodeName));
        }


        [XmlElement(Order = 0)]
        public CT_Layout layout
        {
            get
            {
                return this.layoutField;
            }
            set
            {
                this.layoutField = value;
            }
        }

        [XmlElement(Order = 1)]
        public CT_Tx tx
        {
            get
            {
                return this.txField;
            }
            set
            {
                this.txField = value;
            }
        }

        [XmlElement(Order = 2)]
        public CT_ShapeProperties spPr
        {
            get
            {
                return this.spPrField;
            }
            set
            {
                this.spPrField = value;
            }
        }

        [XmlElement(Order = 3)]
        public CT_TextBody txPr
        {
            get
            {
                return this.txPrField;
            }
            set
            {
                this.txPrField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_BuiltInUnit
    {

        private ST_BuiltInUnit valField;

        public CT_BuiltInUnit()
        {
            this.valField = ST_BuiltInUnit.thousands;
        }

        [XmlAttribute]
        [DefaultValue(ST_BuiltInUnit.thousands)]
        public ST_BuiltInUnit val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
    }


    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    public enum ST_BuiltInUnit
    {

        /// <remarks/>
        hundreds,

        /// <remarks/>
        thousands,

        /// <remarks/>
        tenThousands,

        /// <remarks/>
        hundredThousands,

        /// <remarks/>
        millions,

        /// <remarks/>
        tenMillions,

        /// <remarks/>
        hundredMillions,

        /// <remarks/>
        billions,

        /// <remarks/>
        trillions,
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_DispUnits
    {

        //private object itemField;

        private CT_DispUnitsLbl dispUnitsLblField;

        private List<CT_Extension> extLstField;

        public CT_DispUnits()
        {
        }

        CT_BuiltInUnit builtInUnitField;
        //[XmlElement(Order = 0)]
        public CT_BuiltInUnit builtInUnit
        {
            get { return this.builtInUnitField; }
            set { this.builtInUnitField = value; }
        }

        CT_Double custUnitField;
        [XmlElement(Order = 0)]
        public CT_Double custUnit
        {
            get { return this.custUnitField; }
            set { this.custUnitField = value; }
        }


        [XmlElement(Order = 1)]
        public CT_DispUnitsLbl dispUnitsLbl
        {
            get
            {
                return this.dispUnitsLblField;
            }
            set
            {
                this.dispUnitsLblField = value;
            }
        }

        [XmlElement(Order = 2)]
        public List<CT_Extension> extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }

        internal static CT_DispUnits Parse(XmlNode childNode, XmlNamespaceManager namespaceManager)
        {
            throw new NotImplementedException();
        }

        internal void Write(StreamWriter sw, string p)
        {
            throw new NotImplementedException();
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_CrossBetween
    {

        private ST_CrossBetween valField;
        public static CT_CrossBetween Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_CrossBetween ctObj = new CT_CrossBetween();
            if (node.Attributes["val"] != null)
                ctObj.val = (ST_CrossBetween)Enum.Parse(typeof(ST_CrossBetween), node.Attributes["val"].Value);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "val", this.val.ToString());
            sw.Write("/>");
        }

        [XmlAttribute]
        public ST_CrossBetween val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
    }


    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    public enum ST_CrossBetween
    {

        /// <remarks/>
        between,

        /// <remarks/>
        midCat,
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_ValAx
    {

        private CT_UnsignedInt axIdField;

        private CT_Scaling scalingField;

        private CT_Boolean deleteField;

        private CT_AxPos axPosField;

        private CT_ChartLines majorGridlinesField;

        private CT_ChartLines minorGridlinesField;

        private CT_Title titleField;

        private CT_NumFmt numFmtField;

        private CT_TickMark majorTickMarkField;

        private CT_TickMark minorTickMarkField;

        private CT_TickLblPos tickLblPosField;

        private CT_ShapeProperties spPrField;

        private CT_TextBody txPrField;

        private CT_UnsignedInt crossAxField;


        private CT_CrossBetween crossBetweenField;

        private CT_AxisUnit majorUnitField;

        private CT_AxisUnit minorUnitField;

        private CT_DispUnits dispUnitsField;

        private List<CT_Extension> extLstField;

        public CT_ValAx()
        {
        }
        public static CT_ValAx Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_ValAx ctObj = new CT_ValAx();
            ctObj.extLst = new List<CT_Extension>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "axId")
                    ctObj.axId = CT_UnsignedInt.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "scaling")
                    ctObj.scaling = CT_Scaling.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "delete")
                    ctObj.delete = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "axPos")
                    ctObj.axPos = CT_AxPos.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "majorGridlines")
                    ctObj.majorGridlines = CT_ChartLines.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "minorGridlines")
                    ctObj.minorGridlines = CT_ChartLines.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "title")
                    ctObj.title = CT_Title.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "numFmt")
                    ctObj.numFmt = CT_NumFmt.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "majorTickMark")
                    ctObj.majorTickMark = CT_TickMark.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "minorTickMark")
                    ctObj.minorTickMark = CT_TickMark.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "tickLblPos")
                    ctObj.tickLblPos = CT_TickLblPos.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "spPr")
                    ctObj.spPr = CT_ShapeProperties.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "txPr")
                    ctObj.txPr = CT_TextBody.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "crossAx")
                    ctObj.crossAx = CT_UnsignedInt.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "crosses")
                    ctObj.crosses = CT_Crosses.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "crossesAt")
                    ctObj.crossesAt = CT_Double.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "crossBetween")
                    ctObj.crossBetween = CT_CrossBetween.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "majorUnit")
                    ctObj.majorUnit = CT_AxisUnit.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "minorUnit")
                    ctObj.minorUnit = CT_AxisUnit.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "dispUnits")
                    ctObj.dispUnits = CT_DispUnits.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "extLst")
                    ctObj.extLst.Add(CT_Extension.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}>", nodeName));
            if (this.axId != null)
                this.axId.Write(sw, "axId");
            if (this.scaling != null)
                this.scaling.Write(sw, "scaling");
            if (this.delete != null)
                this.delete.Write(sw, "delete");
            if (this.axPos != null)
                this.axPos.Write(sw, "axPos");
            if (this.majorGridlines != null)
                this.majorGridlines.Write(sw, "majorGridlines");
            if (this.minorGridlines != null)
                this.minorGridlines.Write(sw, "minorGridlines");
            if (this.title != null)
                this.title.Write(sw, "title");
            if (this.numFmt != null)
                this.numFmt.Write(sw, "numFmt");
            if (this.majorTickMark != null)
                this.majorTickMark.Write(sw, "majorTickMark");
            if (this.minorTickMark != null)
                this.minorTickMark.Write(sw, "minorTickMark");
            if (this.tickLblPos != null)
                this.tickLblPos.Write(sw, "tickLblPos");
            if (this.spPr != null)
                this.spPr.Write(sw, "spPr");
            if (this.txPr != null)
                this.txPr.Write(sw, "txPr");
            if (this.crossAx != null)
                this.crossAx.Write(sw, "crossAx");
            if (this.crosses != null)
                this.crosses.Write(sw, "crosses");
            if (this.crossesAt != null)
                this.crossesAt.Write(sw, "crossesAt");
            if (this.crossBetween != null)
                this.crossBetween.Write(sw, "crossBetween");
            if (this.majorUnit != null)
                this.majorUnit.Write(sw, "majorUnit");
            if (this.minorUnit != null)
                this.minorUnit.Write(sw, "minorUnit");
            if (this.dispUnits != null)
                this.dispUnits.Write(sw, "dispUnits");
            if (this.extLst != null)
            {
                foreach (CT_Extension x in this.extLst)
                {
                    x.Write(sw, "extLst");
                }
            }
            sw.Write(string.Format("</c:{0}>", nodeName));
        }

        public bool IsSetNumFmt()
        {
            return this.numFmtField!=null;
        }
        public CT_NumFmt AddNewNumFmt()
        {
            this.numFmtField=new CT_NumFmt();
            return this.numFmtField;
        }
        public CT_Crosses AddNewCrosses()
        {
            this.crossesField = new CT_Crosses();
            return this.crossesField;
        }

        public CT_UnsignedInt AddNewAxId()
        {
            this.axIdField=new CT_UnsignedInt();
            return this.axIdField;
        }
        public CT_AxPos AddNewAxPos()
        {
            this.axPosField=new CT_AxPos();
            return this.axPosField;
        }
        public CT_Scaling AddNewScaling()
        {
            this.scalingField=new CT_Scaling();
            return this.scalingField;
        }
        public CT_CrossBetween AddNewCrossBetween()
        {
            this.crossBetweenField=new CT_CrossBetween();
            return this.crossBetweenField;
        }
        public CT_UnsignedInt AddNewCrossAx()
        {
            this.crossAxField= new CT_UnsignedInt();
            return this.crossAxField;
        }
        public CT_TickLblPos AddNewTickLblPos()
        {
            this.tickLblPosField = new CT_TickLblPos();
            return this.tickLblPosField;
        }
        [XmlElement(Order = 0)]
        public CT_UnsignedInt axId
        {
            get
            {
                return this.axIdField;
            }
            set
            {
                this.axIdField = value;
            }
        }

        [XmlElement(Order = 1)]
        public CT_Scaling scaling
        {
            get
            {
                return this.scalingField;
            }
            set
            {
                this.scalingField = value;
            }
        }

        [XmlElement(Order = 2)]
        public CT_Boolean delete
        {
            get
            {
                return this.deleteField;
            }
            set
            {
                this.deleteField = value;
            }
        }

        [XmlElement(Order = 3)]
        public CT_AxPos axPos
        {
            get
            {
                return this.axPosField;
            }
            set
            {
                this.axPosField = value;
            }
        }

        [XmlElement(Order = 4)]
        public CT_ChartLines majorGridlines
        {
            get
            {
                return this.majorGridlinesField;
            }
            set
            {
                this.majorGridlinesField = value;
            }
        }

        [XmlElement(Order = 5)]
        public CT_ChartLines minorGridlines
        {
            get
            {
                return this.minorGridlinesField;
            }
            set
            {
                this.minorGridlinesField = value;
            }
        }

        [XmlElement(Order = 6)]
        public CT_Title title
        {
            get
            {
                return this.titleField;
            }
            set
            {
                this.titleField = value;
            }
        }

        [XmlElement(Order = 7)]
        public CT_NumFmt numFmt
        {
            get
            {
                return this.numFmtField;
            }
            set
            {
                this.numFmtField = value;
            }
        }

        [XmlElement(Order = 8)]
        public CT_TickMark majorTickMark
        {
            get
            {
                return this.majorTickMarkField;
            }
            set
            {
                this.majorTickMarkField = value;
            }
        }

        [XmlElement(Order = 9)]
        public CT_TickMark minorTickMark
        {
            get
            {
                return this.minorTickMarkField;
            }
            set
            {
                this.minorTickMarkField = value;
            }
        }

        [XmlElement(Order = 10)]
        public CT_TickLblPos tickLblPos
        {
            get
            {
                return this.tickLblPosField;
            }
            set
            {
                this.tickLblPosField = value;
            }
        }

        [XmlElement(Order = 11)]
        public CT_ShapeProperties spPr
        {
            get
            {
                return this.spPrField;
            }
            set
            {
                this.spPrField = value;
            }
        }

        [XmlElement(Order = 12)]
        public CT_TextBody txPr
        {
            get
            {
                return this.txPrField;
            }
            set
            {
                this.txPrField = value;
            }
        }

        [XmlElement(Order = 13)]
        public CT_UnsignedInt crossAx
        {
            get
            {
                return this.crossAxField;
            }
            set
            {
                this.crossAxField = value;
            }
        }
        CT_Crosses crossesField;
        [XmlElement(Order = 14)]
        public CT_Crosses crosses
        {
            get
            {
                return this.crossesField;
            }
            set
            {
                this.crossesField = value;
            }
        }
        CT_Double crossesAtField;
        [XmlElement(Order = 15)]
        public CT_Double crossesAt
        {
            get
            {
                return this.crossesAtField;
            }
            set
            {
                this.crossesAtField = value;
            }
        }

        [XmlElement(Order = 16)]
        public CT_CrossBetween crossBetween
        {
            get
            {
                return this.crossBetweenField;
            }
            set
            {
                this.crossBetweenField = value;
            }
        }

        [XmlElement(Order = 17)]
        public CT_AxisUnit majorUnit
        {
            get
            {
                return this.majorUnitField;
            }
            set
            {
                this.majorUnitField = value;
            }
        }

        [XmlElement(Order = 18)]
        public CT_AxisUnit minorUnit
        {
            get
            {
                return this.minorUnitField;
            }
            set
            {
                this.minorUnitField = value;
            }
        }

        [XmlElement(Order = 19)]
        public CT_DispUnits dispUnits
        {
            get
            {
                return this.dispUnitsField;
            }
            set
            {
                this.dispUnitsField = value;
            }
        }

        [XmlElement(Order = 20)]
        public List<CT_Extension> extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }

        public CT_Boolean AddNewDelete()
        {
            this.deleteField = new CT_Boolean();
            return this.deleteField;
        }

        public CT_TickMark AddNewMajorTickMark()
        {
            this.majorTickMarkField = new CT_TickMark();
            return this.majorTickMarkField;
        }
        public CT_TickMark AddNewMinorTickMark()
        {
            this.minorTickMarkField = new CT_TickMark();
            return this.minorTickMarkField;
        }
        public CT_ChartLines AddNewMajorGridlines()
        {
            this.majorGridlinesField = new CT_ChartLines();
            return this.majorGridlinesField;
        }
        public CT_ChartLines AddNewMinorGridlines()
        {
            this.minorGridlinesField = new CT_ChartLines();
            return this.minorGridlinesField;
        }
    }



    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_SerTx
    {

        CT_StrRef strRefField;
        public CT_StrRef strRef
        {
            get { return this.strRefField; }
            set { this.strRefField = value; }
        }

        String vField;
        public String v
        {
            get { return this.vField; }
            set { this.vField = value; }
        }
        public static CT_SerTx Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_SerTx ctObj = new CT_SerTx();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "strRef")
                    ctObj.strRef = CT_StrRef.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "v")
                    ctObj.v = childNode.InnerText;
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            sw.Write(">");
            if (this.strRef != null)
                this.strRef.Write(sw, "strRef");
            if (this.v != null)
                sw.Write(string.Format("<c:v>{0}</c:v>", XmlHelper.EncodeXml(this.v)));
            sw.Write(string.Format("</c:{0}>", nodeName));
        }


        public CT_StrRef AddNewStrRef()
        {
            this.strRefField = new CT_StrRef();
            return this.strRefField;
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_DPt
    {

        private CT_UnsignedInt idxField;

        private CT_Boolean invertIfNegativeField;

        private CT_Marker markerField;

        private CT_Boolean bubble3DField;

        private CT_UnsignedInt explosionField;

        private CT_ShapeProperties spPrField;

        private CT_PictureOptions pictureOptionsField;

        private List<CT_Extension> extLstField;
        public static CT_DPt Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_DPt ctObj = new CT_DPt();
            ctObj.extLst = new List<CT_Extension>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "idx")
                    ctObj.idx = CT_UnsignedInt.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "invertIfNegative")
                    ctObj.invertIfNegative = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "marker")
                    ctObj.marker = CT_Marker.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "bubble3D")
                    ctObj.bubble3D = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "explosion")
                    ctObj.explosion = CT_UnsignedInt.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "spPr")
                    ctObj.spPr = CT_ShapeProperties.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "pictureOptions")
                    ctObj.pictureOptions = CT_PictureOptions.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "extLst")
                    ctObj.extLst.Add(CT_Extension.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            sw.Write(">");
            if (this.idx != null)
                this.idx.Write(sw, "idx");
            if (this.invertIfNegative != null)
                this.invertIfNegative.Write(sw, "invertIfNegative");
            if (this.marker != null)
                this.marker.Write(sw, "marker");
            if (this.bubble3D != null)
                this.bubble3D.Write(sw, "bubble3D");
            if (this.explosion != null)
                this.explosion.Write(sw, "explosion");
            if (this.spPr != null)
                this.spPr.Write(sw, "spPr");
            if (this.pictureOptions != null)
                this.pictureOptions.Write(sw, "pictureOptions");
            if (this.extLst != null)
            {
                foreach (CT_Extension x in this.extLst)
                {
                    x.Write(sw, "extLst");
                }
            }
            sw.Write(string.Format("</c:{0}>", nodeName));
        }

        public CT_DPt()
        {
            //this.extLstField = new List<CT_Extension>();
            //this.pictureOptionsField = new CT_PictureOptions();
            //this.explosionField = new CT_UnsignedInt();
            //this.bubble3DField = new CT_Boolean();
            //this.markerField = new CT_Marker();
            //this.invertIfNegativeField = new CT_Boolean();
            //this.idxField = new CT_UnsignedInt();
        }

        [XmlElement(Order = 0)]
        public CT_UnsignedInt idx
        {
            get
            {
                return this.idxField;
            }
            set
            {
                this.idxField = value;
            }
        }

        [XmlElement(Order = 1)]
        public CT_Boolean invertIfNegative
        {
            get
            {
                return this.invertIfNegativeField;
            }
            set
            {
                this.invertIfNegativeField = value;
            }
        }

        [XmlElement(Order = 2)]
        public CT_Marker marker
        {
            get
            {
                return this.markerField;
            }
            set
            {
                this.markerField = value;
            }
        }

        [XmlElement(Order = 3)]
        public CT_Boolean bubble3D
        {
            get
            {
                return this.bubble3DField;
            }
            set
            {
                this.bubble3DField = value;
            }
        }

        [XmlElement(Order = 4)]
        public CT_UnsignedInt explosion
        {
            get
            {
                return this.explosionField;
            }
            set
            {
                this.explosionField = value;
            }
        }

        [XmlElement(Order = 5)]
        public CT_ShapeProperties spPr
        {
            get
            {
                return this.spPrField;
            }
            set
            {
                this.spPrField = value;
            }
        }

        [XmlElement(Order = 6)]
        public CT_PictureOptions pictureOptions
        {
            get
            {
                return this.pictureOptionsField;
            }
            set
            {
                this.pictureOptionsField = value;
            }
        }

        [XmlElement(Order = 7)]
        public List<CT_Extension> extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_Marker
    {

        private CT_MarkerStyle symbolField;

        private CT_MarkerSize sizeField;

        private CT_ShapeProperties spPrField;

        private List<CT_Extension> extLstField;

        public CT_Marker()
        {
            //this.extLstField = new List<CT_Extension>();
            //this.sizeField = new CT_MarkerSize();
            //this.symbolField = new CT_MarkerStyle();
        }
        public static CT_Marker Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_Marker ctObj = new CT_Marker();
            ctObj.extLst = new List<CT_Extension>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "symbol")
                    ctObj.symbol = CT_MarkerStyle.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "size")
                    ctObj.size = CT_MarkerSize.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "spPr")
                    ctObj.spPr = CT_ShapeProperties.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "extLst")
                    ctObj.extLst.Add(CT_Extension.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            sw.Write(">");
            if (this.symbol != null)
                this.symbol.Write(sw, "symbol");
            if (this.size != null)
                this.size.Write(sw, "size");
            if (this.spPr != null)
                this.spPr.Write(sw, "spPr");
            if (this.extLst != null)
            {
                foreach (CT_Extension x in this.extLst)
                {
                    x.Write(sw, "extLst");
                }
            }
            sw.Write(string.Format("</c:{0}>", nodeName));
        }

        [XmlElement(Order = 0)]
        public CT_MarkerStyle symbol
        {
            get
            {
                return this.symbolField;
            }
            set
            {
                this.symbolField = value;
            }
        }

        [XmlElement(Order = 1)]
        public CT_MarkerSize size
        {
            get
            {
                return this.sizeField;
            }
            set
            {
                this.sizeField = value;
            }
        }

        [XmlElement(Order = 2)]
        public CT_ShapeProperties spPr
        {
            get
            {
                return this.spPrField;
            }
            set
            {
                this.spPrField = value;
            }
        }

        [XmlElement(Order = 3)]
        public List<CT_Extension> extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }

        public CT_MarkerStyle AddNewSymbol()
        {
            this.symbolField = new CT_MarkerStyle();
            return this.symbolField;
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_MarkerStyle
    {

        private ST_MarkerStyle valField;

        [XmlAttribute]
        public ST_MarkerStyle val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
        public static CT_MarkerStyle Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_MarkerStyle ctObj = new CT_MarkerStyle();
            if (node.Attributes["val"] != null)
                ctObj.val = (ST_MarkerStyle)Enum.Parse(typeof(ST_MarkerStyle), node.Attributes["val"].Value);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "val", this.val.ToString());
            sw.Write("/>");
        }

    }


    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    public enum ST_MarkerStyle
    {

        /// <remarks/>
        circle,

        /// <remarks/>
        dash,

        /// <remarks/>
        diamond,

        /// <remarks/>
        dot,

        /// <remarks/>
        none,

        /// <remarks/>
        picture,

        /// <remarks/>
        plus,

        /// <remarks/>
        square,

        /// <remarks/>
        star,

        /// <remarks/>
        triangle,

        /// <remarks/>
        x,

        auto
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_MarkerSize
    {

        private byte valField;

        public CT_MarkerSize()
        {
            this.valField = ((byte)(5));
        }

        [XmlAttribute]
        [DefaultValue(typeof(byte), "5")]
        public byte val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
        public static CT_MarkerSize Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_MarkerSize ctObj = new CT_MarkerSize();
            ctObj.val = XmlHelper.ReadByte(node.Attributes["val"]);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "val", this.val);
            sw.Write("/>");
        }


    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_PictureOptions
    {

        private CT_Boolean applyToFrontField;

        private CT_Boolean applyToSidesField;

        private CT_Boolean applyToEndField;

        private CT_PictureFormat pictureFormatField;

        private CT_PictureStackUnit pictureStackUnitField;

        public CT_PictureOptions()
        {

        }
        public static CT_PictureOptions Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_PictureOptions ctObj = new CT_PictureOptions();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "applyToFront")
                    ctObj.applyToFront = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "applyToSides")
                    ctObj.applyToSides = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "applyToEnd")
                    ctObj.applyToEnd = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "pictureFormat")
                    ctObj.pictureFormat = CT_PictureFormat.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "pictureStackUnit")
                    ctObj.pictureStackUnit = CT_PictureStackUnit.Parse(childNode, namespaceManager);
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            sw.Write(">");
            if (this.applyToFront != null)
                this.applyToFront.Write(sw, "applyToFront");
            if (this.applyToSides != null)
                this.applyToSides.Write(sw, "applyToSides");
            if (this.applyToEnd != null)
                this.applyToEnd.Write(sw, "applyToEnd");
            if (this.pictureFormat != null)
                this.pictureFormat.Write(sw, "pictureFormat");
            if (this.pictureStackUnit != null)
                this.pictureStackUnit.Write(sw, "pictureStackUnit");
            sw.Write(string.Format("</c:{0}>", nodeName));
        }

        [XmlElement(Order = 0)]
        public CT_Boolean applyToFront
        {
            get
            {
                return this.applyToFrontField;
            }
            set
            {
                this.applyToFrontField = value;
            }
        }

        [XmlElement(Order = 1)]
        public CT_Boolean applyToSides
        {
            get
            {
                return this.applyToSidesField;
            }
            set
            {
                this.applyToSidesField = value;
            }
        }

        [XmlElement(Order = 2)]
        public CT_Boolean applyToEnd
        {
            get
            {
                return this.applyToEndField;
            }
            set
            {
                this.applyToEndField = value;
            }
        }

        [XmlElement(Order = 3)]
        public CT_PictureFormat pictureFormat
        {
            get
            {
                return this.pictureFormatField;
            }
            set
            {
                this.pictureFormatField = value;
            }
        }

        [XmlElement(Order = 4)]
        public CT_PictureStackUnit pictureStackUnit
        {
            get
            {
                return this.pictureStackUnitField;
            }
            set
            {
                this.pictureStackUnitField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_PictureFormat
    {
        public static CT_PictureFormat Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_PictureFormat ctObj = new CT_PictureFormat();
            if (node.Attributes["val"] != null)
                ctObj.val = (ST_PictureFormat)Enum.Parse(typeof(ST_PictureFormat), node.Attributes["val"].Value);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "val", this.val.ToString());
            sw.Write("/>");
        }

        private ST_PictureFormat valField;

        [XmlAttribute]
        public ST_PictureFormat val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
    }


    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    public enum ST_PictureFormat
    {

        /// <remarks/>
        stretch,

        /// <remarks/>
        stack,

        /// <remarks/>
        stackScale,
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_PictureStackUnit
    {
        public static CT_PictureStackUnit Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_PictureStackUnit ctObj = new CT_PictureStackUnit();
            ctObj.val = XmlHelper.ReadDouble(node.Attributes["val"]);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "val", this.val);
            sw.Write("/>");
        }

        private double valField;

        [XmlAttribute]
        public double val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_DLbls
    {

        private List<CT_DLbl> dLblField;

        private string separatorField;
        private CT_NumFmt numFmtField;
        private CT_Boolean showBubbleSizeField;
        private CT_Boolean showCatNameField;
        private CT_Boolean showLeaderLinesField;
        private CT_Boolean showLegendKeyField;
        private CT_Boolean showPercentField;
        private CT_Boolean showSerNameField;
        private CT_Boolean showValField;
        private CT_Boolean deleteField;
        private CT_DLblPos dLblPosField;

        private List<CT_Extension> extLstField;

        public CT_DLbls()
        {
            //this.dLblField = new List<CT_DLbl>();
        }
        public static CT_DLbls Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_DLbls ctObj = new CT_DLbls();
            ctObj.dLbl = new List<CT_DLbl>();
            ctObj.extLst = new List<CT_Extension>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "dLblPos")
                    ctObj.dLblPos = CT_DLblPos.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "numFmt")
                    ctObj.numFmt = CT_NumFmt.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "spPr")
                    ctObj.spPr = CT_ShapeProperties.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "txPr")
                    ctObj.txPr = CT_TextBody.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "showBubbleSize")
                    ctObj.showBubbleSize = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "showCatName")
                    ctObj.showCatName = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "showLegendKey")
                    ctObj.showLegendKey = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "showPercent")
                    ctObj.showPercent = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "showSerName")
                    ctObj.showSerName = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "showVal")
                    ctObj.showVal = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "delete")
                    ctObj.delete = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "separator")
                    ctObj.separator = childNode.InnerText;
                else if (childNode.LocalName == "showLeaderLines")
                    ctObj.showLeaderLines = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "dLbl")
                    ctObj.dLbl.Add(CT_DLbl.Parse(childNode, namespaceManager));
                else if (childNode.LocalName == "extLst")
                    ctObj.extLst.Add(CT_Extension.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            //if (this.dLbl.Count == 0 || this.extLst.Count == 0)
            //    return;
            sw.Write(string.Format("<c:{0}", nodeName));
            sw.Write(">");

            if (this.numFmt != null)
                this.numFmt.Write(sw, "numFmt");
            if (this.spPr != null)
                this.spPr.Write(sw, "spPr");
            if (this.txPr != null)
                this.txPr.Write(sw, "txPr");
            if (this.showLegendKey != null)
                this.showLegendKey.Write(sw, "showLegendKey");
            if (this.showVal != null)
                this.showVal.Write(sw, "showVal");
            if (this.showCatName != null)
                this.showCatName.Write(sw, "showCatName");
            if (this.showSerName != null)
                this.showSerName.Write(sw, "showSerName");
            if (this.showPercent != null)
                this.showPercent.Write(sw, "showPercent");
            if (this.showBubbleSize != null)
                this.showBubbleSize.Write(sw, "showBubbleSize");
            if (this.delete != null)
                this.delete.Write(sw, "delete");
            if (this.separator != null)
                sw.Write(string.Format("<separator>{0}</separator>", this.separator));
            if (this.showLeaderLines != null)
                this.showLeaderLines.Write(sw, "showLeaderLines");
            if (this.dLbl != null)
            {
                foreach (CT_DLbl x in this.dLbl)
                {
                    x.Write(sw, "dLbl");
                }
            }
            if (this.dLblPos != null)
                this.dLblPos.Write(sw, "dLblPos");
            if (this.extLst != null)
            {
                foreach (CT_Extension x in this.extLst)
                {
                    x.Write(sw, "extLst");
                }
            }
            sw.Write(string.Format("</c:{0}>", nodeName));
        }

        [XmlElement("dLbl", Order = 0)]
        public List<CT_DLbl> dLbl
        {
            get
            {
                return this.dLblField;
            }
            set
            {
                this.dLblField = value;
            }
        }
        [XmlElement(Order = 1)]
        public CT_DLblPos dLblPos
        {
            get
            {
                return this.dLblPosField;
            }
            set
            {
                this.dLblPosField = value;
            }
        }
        [XmlElement(Order = 2)]
        public CT_NumFmt numFmt
        {
            get
            {
                return this.numFmtField;
            }
            set
            {
                this.numFmtField = value;
            }
        }
        CT_ShapeProperties spPrField;
        [XmlElement(Order = 4)]
        public CT_ShapeProperties spPr
        {
            get
            {
                return this.spPrField;
            }
            set
            {
                this.spPrField = value;
            }
        }
        CT_TextBody txPrField;
        [XmlElement(Order = 5)]
        public CT_TextBody txPr
        {
            get
            {
                return this.txPrField;
            }
            set
            {
                this.txPrField = value;
            }
        }
        [XmlElement(Order = 8)]
        public CT_Boolean showBubbleSize
        {
            get
            {
                return this.showBubbleSizeField;
            }
            set
            {
                this.showBubbleSizeField = value;
            }
        }
        [XmlElement(Order = 9)]
        public CT_Boolean showCatName
        {
            get
            {
                return this.showCatNameField;
            }
            set
            {
                this.showCatNameField = value;
            }
        }

        [XmlElement(Order = 11)]
        public CT_Boolean showLegendKey
        {
            get
            {
                return this.showLegendKeyField;
            }
            set
            {
                this.showLegendKeyField = value;
            }
        }
        [XmlElement(Order = 12)]
        public CT_Boolean showPercent
        {
            get
            {
                return this.showPercentField;
            }
            set
            {
                this.showPercentField = value;
            }
        }
        [XmlElement(Order = 13)]
        public CT_Boolean showSerName
        {
            get
            {
                return this.showSerNameField;
            }
            set
            {
                this.showSerNameField = value;
            }
        }
        [XmlElement(Order = 14)]
        public CT_Boolean showVal
        {
            get
            {
                return this.showValField;
            }
            set
            {
                this.showValField = value;
            }
        }
        [XmlElement(Order = 15)]
        public CT_Boolean delete
        {
            get
            {
                return this.deleteField;
            }
            set
            {
                this.deleteField = value;
            }
        }
        [XmlElement(Order = 16)]
        public string separator
        {
            get
            {
                return this.separatorField;
            }
            set
            {
                this.separatorField = value;
            }
        }

        //[XmlElement("leaderLines", typeof(CT_ChartLines), Order = 1)]
        [XmlElement(Order = 17)]
        public CT_Boolean showLeaderLines
        {
            get
            {
                return this.showLeaderLinesField;
            }
            set
            {
                this.showLeaderLinesField = value;
            }
        }

        [XmlElement(Order = 18)]
        public List<CT_Extension> extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_DLbl
    {

        private CT_UnsignedInt idxField;
        private string separatorField;
        private CT_NumFmt numFmtField;
        private CT_Boolean showBubbleSizeField;
        private CT_Boolean showCatNameField;
        private CT_Boolean showLegendKeyField;
        private CT_Boolean showPercentField;
        private CT_Boolean showSerNameField;
        private CT_Boolean showValField;
        private CT_Boolean deleteField;
        private CT_DLblPos dLblPosField;
        private CT_Layout layoutField;
        private List<CT_Extension> extLstField;

        public CT_DLbl()
        {
            //this.idxField = new CT_UnsignedInt();
        }
        public static CT_DLbl Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_DLbl ctObj = new CT_DLbl();
            ctObj.extLst = new List<CT_Extension>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "idx")
                    ctObj.idx = CT_UnsignedInt.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "layout")
                    ctObj.layout = CT_Layout.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "dLblPos")
                    ctObj.dLblPos = CT_DLblPos.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "numFmt")
                    ctObj.numFmt = CT_NumFmt.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "spPr")
                    ctObj.spPr = CT_ShapeProperties.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "txPr")
                    ctObj.txPr = CT_TextBody.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "delete")
                    ctObj.delete = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "showBubbleSize")
                    ctObj.showBubbleSize = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "showCatName")
                    ctObj.showCatName = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "showLegendKey")
                    ctObj.showLegendKey = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "showPercent")
                    ctObj.showPercent = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "showSerName")
                    ctObj.showSerName = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "showVal")
                    ctObj.showVal = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "separator")
                    ctObj.separator = childNode.InnerText;
                else if (childNode.LocalName == "extLst")
                    ctObj.extLst.Add(CT_Extension.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            sw.Write(">");
            if (this.idx != null)
                this.idx.Write(sw, "idx");
            if (this.layout != null)
                this.layout.Write(sw, "layout");
            if (this.dLblPos != null)
                this.dLblPos.Write(sw, "dLblPos");
            if (this.numFmt != null)
                this.numFmt.Write(sw, "numFmt");
            if (this.spPr != null)
                this.spPr.Write(sw, "spPr");
            if (this.txPr != null)
                this.txPr.Write(sw, "txPr");
            if (this.delete != null)
                this.delete.Write(sw, "delete");
            if (this.showBubbleSize != null)
                this.showBubbleSize.Write(sw, "showBubbleSize");
            if (this.showCatName != null)
                this.showCatName.Write(sw, "showCatName");
            if (this.showLegendKey != null)
                this.showLegendKey.Write(sw, "showLegendKey");
            if (this.showPercent != null)
                this.showPercent.Write(sw, "showPercent");
            if (this.showSerName != null)
                this.showSerName.Write(sw, "showSerName");
            if (this.showVal != null)
                this.showVal.Write(sw, "showVal");
            if (this.separator != null)
                sw.Write(string.Format("<separator>{0}</separator>", this.separator));
            if (this.extLst != null)
            {
                foreach (CT_Extension x in this.extLst)
                {
                    x.Write(sw, "extLst");
                }
            }
            sw.Write(string.Format("</c:{0}>", nodeName));
        }

        [XmlElement(Order = 0)]
        public CT_UnsignedInt idx
        {
            get
            {
                return this.idxField;
            }
            set
            {
                this.idxField = value;
            }
        }
        [XmlElement(Order = 1)]
        public CT_Layout layout
        {
            get
            {
                return this.layoutField;
            }
            set
            {
                this.layoutField = value;
            }
        }
        [XmlElement(Order = 2)]
        public CT_DLblPos dLblPos
        {
            get
            {
                return this.dLblPosField;
            }
            set
            {
                this.dLblPosField = value;
            }
        }
        [XmlElement(Order = 3)]
        public CT_NumFmt numFmt
        {
            get
            {
                return this.numFmtField;
            }
            set
            {
                this.numFmtField = value;
            }
        }

        CT_ShapeProperties spPrField;
        [XmlElement(Order = 4)]
        public CT_ShapeProperties spPr
        {
            get
            {
                return this.spPrField;
            }
            set
            {
                this.spPrField = value;
            }
        }
        CT_TextBody txPrField;
        [XmlElement(Order = 5)]
        public CT_TextBody txPr
        {
            get
            {
                return this.txPrField;
            }
            set
            {
                this.txPrField = value;
            }
        }

        [XmlElement(Order = 8)]
        public CT_Boolean delete
        {
            get
            {
                return this.deleteField;
            }
            set
            {
                this.deleteField = value;
            }
        }
        [XmlElement(Order = 9)]
        public CT_Boolean showBubbleSize
        {
            get
            {
                return this.showBubbleSizeField;
            }
            set
            {
                this.showBubbleSizeField = value;
            }
        }
        [XmlElement(Order = 10)]
        public CT_Boolean showCatName
        {
            get
            {
                return this.showCatNameField;
            }
            set
            {
                this.showCatNameField = value;
            }
        }
        [XmlElement(Order =11)]
        public CT_Boolean showLegendKey
        {
            get
            {
                return this.showLegendKeyField;
            }
            set
            {
                this.showLegendKeyField = value;
            }
        }
        [XmlElement(Order = 12)]
        public CT_Boolean showPercent
        {
            get
            {
                return this.showPercentField;
            }
            set
            {
                this.showPercentField = value;
            }
        }
        [XmlElement(Order = 13)]
        public CT_Boolean showSerName
        {
            get
            {
                return this.showSerNameField;
            }
            set
            {
                this.showSerNameField = value;
            }
        }
        [XmlElement(Order = 14)]
        public CT_Boolean showVal
        {
            get
            {
                return this.showValField;
            }
            set
            {
                this.showValField = value;
            }
        }
        [XmlElement(Order = 15)]
        public string separator
        {
            get
            {
                return this.separatorField;
            }
            set
            {
                this.separatorField = value;
            }
        }


        //[XmlElement("tx", typeof(CT_Tx), Order = 1)]

        [XmlElement(Order = 18)]
        public List<CT_Extension> extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_DLblPos
    {

        private ST_DLblPos valField;

        [XmlAttribute]
        public ST_DLblPos val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
        public static CT_DLblPos Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_DLblPos ctObj = new CT_DLblPos();
            if (node.Attributes["val"] != null)
                ctObj.val = (ST_DLblPos)Enum.Parse(typeof(ST_DLblPos), node.Attributes["val"].Value);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "val", this.val.ToString());
            sw.Write("/>");
        }

    }


    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    public enum ST_DLblPos
    {

        /// <remarks/>
        bestFit,

        /// <remarks/>
        b,

        /// <remarks/>
        ctr,

        /// <remarks/>
        inBase,

        /// <remarks/>
        inEnd,

        /// <remarks/>
        l,

        /// <remarks/>
        outEnd,

        /// <remarks/>
        r,

        /// <remarks/>
        t,
    }



    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_Trendline
    {

        private string nameField;

        private CT_ShapeProperties spPrField;

        private CT_TrendlineType trendlineTypeField;

        private CT_Order orderField;

        private CT_Period periodField;

        private CT_Double forwardField;

        private CT_Double backwardField;

        private CT_Double interceptField;

        private CT_Boolean dispRSqrField;

        private CT_Boolean dispEqField;

        private CT_TrendlineLbl trendlineLblField;

        private List<CT_Extension> extLstField;

        public CT_Trendline()
        {

        }
        public static CT_Trendline Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_Trendline ctObj = new CT_Trendline();
            ctObj.extLst = new List<CT_Extension>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "name")
                    ctObj.name = childNode.InnerText;
                else if (childNode.LocalName == "spPr")
                    ctObj.spPr = CT_ShapeProperties.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "trendlineType")
                    ctObj.trendlineType = CT_TrendlineType.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "order")
                    ctObj.order = CT_Order.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "period")
                    ctObj.period = CT_Period.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "forward")
                    ctObj.forward = CT_Double.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "backward")
                    ctObj.backward = CT_Double.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "intercept")
                    ctObj.intercept = CT_Double.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "dispRSqr")
                    ctObj.dispRSqr = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "dispEq")
                    ctObj.dispEq = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "trendlineLbl")
                    ctObj.trendlineLbl = CT_TrendlineLbl.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "extLst")
                    ctObj.extLst.Add(CT_Extension.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            sw.Write(">");
            if (this.name != null)
                sw.Write(string.Format("<name>{0}</name>", this.name));
            if (this.spPr != null)
                this.spPr.Write(sw, "spPr");
            if (this.trendlineType != null)
                this.trendlineType.Write(sw, "trendlineType");
            if (this.order != null)
                this.order.Write(sw, "order");
            if (this.period != null)
                this.period.Write(sw, "period");
            if (this.forward != null)
                this.forward.Write(sw, "forward");
            if (this.backward != null)
                this.backward.Write(sw, "backward");
            if (this.intercept != null)
                this.intercept.Write(sw, "intercept");
            if (this.dispRSqr != null)
                this.dispRSqr.Write(sw, "dispRSqr");
            if (this.dispEq != null)
                this.dispEq.Write(sw, "dispEq");
            if (this.trendlineLbl != null)
                this.trendlineLbl.Write(sw, "trendlineLbl");
            if (this.extLst != null)
            {
                foreach (CT_Extension x in this.extLst)
                {
                    x.Write(sw, "extLst");
                }
            }
            sw.Write(string.Format("</c:{0}>", nodeName));
        }


        [XmlElement(Order = 0)]
        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        [XmlElement(Order = 1)]
        public CT_ShapeProperties spPr
        {
            get
            {
                return this.spPrField;
            }
            set
            {
                this.spPrField = value;
            }
        }

        [XmlElement(Order = 2)]
        public CT_TrendlineType trendlineType
        {
            get
            {
                return this.trendlineTypeField;
            }
            set
            {
                this.trendlineTypeField = value;
            }
        }

        [XmlElement(Order = 3)]
        public CT_Order order
        {
            get
            {
                return this.orderField;
            }
            set
            {
                this.orderField = value;
            }
        }

        [XmlElement(Order = 4)]
        public CT_Period period
        {
            get
            {
                return this.periodField;
            }
            set
            {
                this.periodField = value;
            }
        }

        [XmlElement(Order = 5)]
        public CT_Double forward
        {
            get
            {
                return this.forwardField;
            }
            set
            {
                this.forwardField = value;
            }
        }

        [XmlElement(Order = 6)]
        public CT_Double backward
        {
            get
            {
                return this.backwardField;
            }
            set
            {
                this.backwardField = value;
            }
        }

        [XmlElement(Order = 7)]
        public CT_Double intercept
        {
            get
            {
                return this.interceptField;
            }
            set
            {
                this.interceptField = value;
            }
        }

        [XmlElement(Order = 8)]
        public CT_Boolean dispRSqr
        {
            get
            {
                return this.dispRSqrField;
            }
            set
            {
                this.dispRSqrField = value;
            }
        }

        [XmlElement(Order = 9)]
        public CT_Boolean dispEq
        {
            get
            {
                return this.dispEqField;
            }
            set
            {
                this.dispEqField = value;
            }
        }

        [XmlElement(Order = 10)]
        public CT_TrendlineLbl trendlineLbl
        {
            get
            {
                return this.trendlineLblField;
            }
            set
            {
                this.trendlineLblField = value;
            }
        }

        [XmlElement(Order = 11)]
        public List<CT_Extension> extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_TrendlineType
    {

        private ST_TrendlineType valField;

        public CT_TrendlineType()
        {
            this.valField = ST_TrendlineType.linear;
        }
        public static CT_TrendlineType Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_TrendlineType ctObj = new CT_TrendlineType();
            if (node.Attributes["val"] != null)
                ctObj.val = (ST_TrendlineType)Enum.Parse(typeof(ST_TrendlineType), node.Attributes["val"].Value);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "val", this.val.ToString());
            sw.Write("/>");
        }

        [XmlAttribute]
        [DefaultValue(ST_TrendlineType.linear)]
        public ST_TrendlineType val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
    }


    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    public enum ST_TrendlineType
    {

        /// <remarks/>
        exp,

        /// <remarks/>
        linear,

        /// <remarks/>
        log,

        /// <remarks/>
        movingAvg,

        /// <remarks/>
        poly,

        /// <remarks/>
        power,
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_Order
    {

        private byte valField;
        public static CT_Order Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_Order ctObj = new CT_Order();
            if (node.Attributes["val"] != null)
                ctObj.val = XmlHelper.ReadByte(node.Attributes["val"]);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "val", this.val, true);
            sw.Write("/>");
        }

        public CT_Order()
        {
            this.valField = ((byte)(2));
        }

        [XmlAttribute]
        [DefaultValue(typeof(byte), "2")]
        public byte val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_Period
    {

        private byte valField;

        public CT_Period()
        {
            this.valField = ((byte)(2));
        }
        public static CT_Period Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_Period ctObj = new CT_Period();
            if (node.Attributes["val"] != null)
                ctObj.val = XmlHelper.ReadByte(node.Attributes["val"]);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "val", this.val);
            sw.Write("/>");
        }

        [XmlAttribute]
        [DefaultValue(typeof(byte), "2")]
        public byte val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_TrendlineLbl
    {

        private CT_Layout layoutField;

        private CT_Tx txField;

        private CT_NumFmt numFmtField;

        private CT_ShapeProperties spPrField;

        private CT_TextBody txPrField;

        private List<CT_Extension> extLstField;

        public CT_TrendlineLbl()
        {
            //this.extLstField = new List<CT_Extension>();
            //this.numFmtField = new CT_NumFmt();
            //this.txField = new CT_Tx();
            //this.layoutField = new CT_Layout();
        }
        public static CT_TrendlineLbl Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_TrendlineLbl ctObj = new CT_TrendlineLbl();
            ctObj.extLst = new List<CT_Extension>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "layout")
                    ctObj.layout = CT_Layout.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "tx")
                    ctObj.tx = CT_Tx.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "numFmt")
                    ctObj.numFmt = CT_NumFmt.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "spPr")
                    ctObj.spPr = CT_ShapeProperties.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "txPr")
                    ctObj.txPr = CT_TextBody.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "extLst")
                    ctObj.extLst.Add(CT_Extension.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            sw.Write(">");
            if (this.layout != null)
                this.layout.Write(sw, "layout");
            if (this.tx != null)
                this.tx.Write(sw, "tx");
            if (this.numFmt != null)
                this.numFmt.Write(sw, "numFmt");
            if (this.spPr != null)
                this.spPr.Write(sw, "spPr");
            if (this.txPr != null)
                this.txPr.Write(sw, "txPr");
            if (this.extLst != null)
            {
                foreach (CT_Extension x in this.extLst)
                {
                    x.Write(sw, "extLst");
                }
            }
            sw.Write(string.Format("</c:{0}>", nodeName));
        }

        [XmlElement(Order = 0)]
        public CT_Layout layout
        {
            get
            {
                return this.layoutField;
            }
            set
            {
                this.layoutField = value;
            }
        }

        [XmlElement(Order = 1)]
        public CT_Tx tx
        {
            get
            {
                return this.txField;
            }
            set
            {
                this.txField = value;
            }
        }

        [XmlElement(Order = 2)]
        public CT_NumFmt numFmt
        {
            get
            {
                return this.numFmtField;
            }
            set
            {
                this.numFmtField = value;
            }
        }

        [XmlElement(Order = 3)]
        public CT_ShapeProperties spPr
        {
            get
            {
                return this.spPrField;
            }
            set
            {
                this.spPrField = value;
            }
        }

        [XmlElement(Order = 4)]
        public CT_TextBody txPr
        {
            get
            {
                return this.txPrField;
            }
            set
            {
                this.txPrField = value;
            }
        }

        [XmlElement(Order = 5)]
        public List<CT_Extension> extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_ErrBars
    {

        private CT_ErrDir errDirField;

        private CT_ErrBarType errBarTypeField;

        private CT_ErrValType errValTypeField;

        private CT_Boolean noEndCapField;

        private CT_NumDataSource plusField;

        private CT_NumDataSource minusField;

        private CT_Double valField;

        private CT_ShapeProperties spPrField;

        private List<CT_Extension> extLstField;

        public CT_ErrBars()
        {
        }
        public static CT_ErrBars Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_ErrBars ctObj = new CT_ErrBars();
            ctObj.extLst = new List<CT_Extension>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "errDir")
                    ctObj.errDir = CT_ErrDir.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "errBarType")
                    ctObj.errBarType = CT_ErrBarType.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "errValType")
                    ctObj.errValType = CT_ErrValType.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "noEndCap")
                    ctObj.noEndCap = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "plus")
                    ctObj.plus = CT_NumDataSource.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "minus")
                    ctObj.minus = CT_NumDataSource.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "val")
                    ctObj.val = CT_Double.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "spPr")
                    ctObj.spPr = CT_ShapeProperties.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "extLst")
                    ctObj.extLst.Add(CT_Extension.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            sw.Write(">");
            if (this.errDir != null)
                this.errDir.Write(sw, "errDir");
            if (this.errBarType != null)
                this.errBarType.Write(sw, "errBarType");
            if (this.errValType != null)
                this.errValType.Write(sw, "errValType");
            if (this.noEndCap != null)
                this.noEndCap.Write(sw, "noEndCap");
            if (this.plus != null)
                this.plus.Write(sw, "plus");
            if (this.minus != null)
                this.minus.Write(sw, "minus");
            if (this.val != null)
                this.val.Write(sw, "val");
            if (this.spPr != null)
                this.spPr.Write(sw, "spPr");
            if (this.extLst != null)
            {
                foreach (CT_Extension x in this.extLst)
                {
                    x.Write(sw, "extLst");
                }
            }
            sw.Write(string.Format("</c:{0}>", nodeName));
        }


        [XmlElement(Order = 0)]
        public CT_ErrDir errDir
        {
            get
            {
                return this.errDirField;
            }
            set
            {
                this.errDirField = value;
            }
        }

        [XmlElement(Order = 1)]
        public CT_ErrBarType errBarType
        {
            get
            {
                return this.errBarTypeField;
            }
            set
            {
                this.errBarTypeField = value;
            }
        }

        [XmlElement(Order = 2)]
        public CT_ErrValType errValType
        {
            get
            {
                return this.errValTypeField;
            }
            set
            {
                this.errValTypeField = value;
            }
        }

        [XmlElement(Order = 3)]
        public CT_Boolean noEndCap
        {
            get
            {
                return this.noEndCapField;
            }
            set
            {
                this.noEndCapField = value;
            }
        }

        [XmlElement(Order = 4)]
        public CT_NumDataSource plus
        {
            get
            {
                return this.plusField;
            }
            set
            {
                this.plusField = value;
            }
        }

        [XmlElement(Order = 5)]
        public CT_NumDataSource minus
        {
            get
            {
                return this.minusField;
            }
            set
            {
                this.minusField = value;
            }
        }

        [XmlElement(Order = 6)]
        public CT_Double val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }

        [XmlElement(Order = 7)]
        public CT_ShapeProperties spPr
        {
            get
            {
                return this.spPrField;
            }
            set
            {
                this.spPrField = value;
            }
        }

        [XmlElement(Order = 8)]
        public List<CT_Extension> extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_ErrDir
    {
        public static CT_ErrDir Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_ErrDir ctObj = new CT_ErrDir();
            if (node.Attributes["val"] != null)
                ctObj.val = (ST_ErrDir)Enum.Parse(typeof(ST_ErrDir), node.Attributes["val"].Value);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "val", this.val.ToString());
            sw.Write("/>");
        }

        private ST_ErrDir valField;

        [XmlAttribute]
        public ST_ErrDir val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
    }


    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    public enum ST_ErrDir
    {

        /// <remarks/>
        x,

        /// <remarks/>
        y,
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_ErrBarType
    {
        public static CT_ErrBarType Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_ErrBarType ctObj = new CT_ErrBarType();
            if (node.Attributes["val"] != null)
                ctObj.val = (ST_ErrBarType)Enum.Parse(typeof(ST_ErrBarType), node.Attributes["val"].Value);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "val", this.val.ToString());
            sw.Write("/>");
        }

        private ST_ErrBarType valField;

        public CT_ErrBarType()
        {
            this.valField = ST_ErrBarType.both;
        }

        [XmlAttribute]
        [DefaultValue(ST_ErrBarType.both)]
        public ST_ErrBarType val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
    }


    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    public enum ST_ErrBarType
    {

        /// <remarks/>
        both,

        /// <remarks/>
        minus,

        /// <remarks/>
        plus,
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_ErrValType
    {

        private ST_ErrValType valField;

        public CT_ErrValType()
        {
            this.valField = ST_ErrValType.fixedVal;
        }
        public static CT_ErrValType Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_ErrValType ctObj = new CT_ErrValType();
            if (node.Attributes["val"] != null)
                ctObj.val = (ST_ErrValType)Enum.Parse(typeof(ST_ErrValType), node.Attributes["val"].Value);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "val", this.val.ToString());
            sw.Write("/>");
        }

        [XmlAttribute]
        [DefaultValue(ST_ErrValType.fixedVal)]
        public ST_ErrValType val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
    }


    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    public enum ST_ErrValType
    {

        /// <remarks/>
        cust,

        /// <remarks/>
        fixedVal,

        /// <remarks/>
        percentage,

        /// <remarks/>
        stdDev,

        /// <remarks/>
        stdErr,
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_NumDataSource
    {
        CT_NumData numLitField;
        CT_NumRef numRefField;
        public static CT_NumDataSource Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_NumDataSource ctObj = new CT_NumDataSource();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "numLit")
                    ctObj.numLit = CT_NumData.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "numRef")
                    ctObj.numRef = CT_NumRef.Parse(childNode, namespaceManager);
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            sw.Write(">");
            if (this.numLit != null)
                this.numLit.Write(sw, "numLit");
            if (this.numRef != null)
                this.numRef.Write(sw, "numRef");
            sw.Write(string.Format("</c:{0}>", nodeName));
        }

        public CT_NumRef AddNewNumRef()
        {
            this.numRefField = new CT_NumRef();
            return this.numRefField;
        }
        public CT_NumData numLit
        {
            get
            {
                return this.numLitField;
            }
            set
            {
                this.numLitField = value;
            }
        }
        public CT_NumRef numRef
        {
            get
            {
                return this.numRefField;
            }
            set
            {
                this.numRefField = value;
            }
        }

        public CT_NumData AddNewNumLit()
        {
            numLit = new CT_NumData();
            return numLit;
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_NumData
    {

        private string formatCodeField;

        private CT_UnsignedInt ptCountField;

        private List<CT_NumVal> ptField;

        private List<CT_Extension> extLstField;
        public static CT_NumData Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_NumData ctObj = new CT_NumData();
            ctObj.pt = new List<CT_NumVal>();
            ctObj.extLst = new List<CT_Extension>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "formatCode")
                    ctObj.formatCode = childNode.InnerText;
                else if (childNode.LocalName == "ptCount")
                    ctObj.ptCount = CT_UnsignedInt.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "pt")
                    ctObj.pt.Add(CT_NumVal.Parse(childNode, namespaceManager));
                else if (childNode.LocalName == "extLst")
                    ctObj.extLst.Add(CT_Extension.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            sw.Write(">");
            if (this.formatCode != null)
                sw.Write(string.Format("<c:formatCode>{0}</c:formatCode>", this.formatCode));
            if (this.ptCount != null)
                this.ptCount.Write(sw, "ptCount");
            if (this.pt != null)
            {
                foreach (CT_NumVal x in this.pt)
                {
                    x.Write(sw, "pt");
                }
            }
            if (this.extLst != null)
            {
                foreach (CT_Extension x in this.extLst)
                {
                    x.Write(sw, "extLst");
                }
            }
            sw.Write(string.Format("</c:{0}>", nodeName));
        }

        public CT_NumData()
        {
            //this.extLstField = new List<CT_Extension>();
            //this.ptField = new List<CT_NumVal>();
            //this.ptCountField = new CT_UnsignedInt();
        }
        public CT_NumVal AddNewPt()
        {
            if(this.ptField==null)
                this.ptField = new List<CT_NumVal>();
            CT_NumVal val = new CT_NumVal();
            this.ptField.Add(val);
            return val;
        }
        public CT_UnsignedInt AddNewPtCount()
        {
            this.ptCountField = new CT_UnsignedInt();
            return ptCountField;
        }
        [XmlElement(Order = 0)]
        public string formatCode
        {
            get
            {
                return this.formatCodeField;
            }
            set
            {
                this.formatCodeField = value;
            }
        }

        [XmlElement(Order = 1)]
        public CT_UnsignedInt ptCount
        {
            get
            {
                return this.ptCountField;
            }
            set
            {
                this.ptCountField = value;
            }
        }

        [XmlElement("pt", Order = 2)]
        public List<CT_NumVal> pt
        {
            get
            {
                return this.ptField;
            }
            set
            {
                this.ptField = value;
            }
        }

        [XmlElement(Order = 3)]
        public List<CT_Extension> extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_NumVal
    {

        private string vField;

        private uint idxField;

        private string formatCodeField;
        public static CT_NumVal Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_NumVal ctObj = new CT_NumVal();
            if (node.Attributes["idx"] != null)
                ctObj.idx = XmlHelper.ReadUInt(node.Attributes["idx"]);
            ctObj.formatCode = XmlHelper.ReadString(node.Attributes["formatCode"]);
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "v")
                    ctObj.v = childNode.InnerText;
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "idx", this.idx, true);
            XmlHelper.WriteAttribute(sw, "formatCode", this.formatCode);
            sw.Write(">");
            if (this.v != null)
                sw.Write(string.Format("<c:v>{0}</c:v>", this.v.ToString()));
            sw.Write(string.Format("</c:{0}>", nodeName));
        }

        [XmlElement(Order = 0)]
        public string v
        {
            get
            {
                return this.vField;
            }
            set
            {
                this.vField = value;
            }
        }

        [XmlAttribute]
        public uint idx
        {
            get
            {
                return this.idxField;
            }
            set
            {
                this.idxField = value;
            }
        }

        [XmlAttribute]
        public string formatCode
        {
            get
            {
                return this.formatCodeField;
            }
            set
            {
                this.formatCodeField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_NumRef
    {

        private string fField;

        private CT_NumData numCacheField;

        private List<CT_Extension> extLstField;

        public CT_NumRef()
        {
        }
        public static CT_NumRef Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_NumRef ctObj = new CT_NumRef();
            ctObj.extLst = new List<CT_Extension>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "f")
                    ctObj.f = childNode.InnerText;
                else if (childNode.LocalName == "numCache")
                    ctObj.numCache = CT_NumData.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "extLst")
                    ctObj.extLst.Add(CT_Extension.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            sw.Write(">");
            if (this.f != null)
                sw.Write(string.Format("<c:f>{0}</c:f>", this.f));
            if (this.numCache != null)
                this.numCache.Write(sw, "numCache");
            if (this.extLst != null)
            {
                foreach (CT_Extension x in this.extLst)
                {
                    x.Write(sw, "extLst");
                }
            }
            sw.Write(string.Format("</c:{0}>", nodeName));
        }

        public CT_NumData AddNewNumCache()
        {
            this.numCacheField = new CT_NumData();
            return this.numCacheField;
        }
        [XmlElement(Order = 0)]
        public string f
        {
            get
            {
                return this.fField;
            }
            set
            {
                this.fField = value;
            }
        }

        [XmlElement(Order = 1)]
        public CT_NumData numCache
        {
            get
            {
                return this.numCacheField;
            }
            set
            {
                this.numCacheField = value;
            }
        }

        [XmlElement(Order = 2)]
        public List<CT_Extension> extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_AxDataSource
    {
        CT_MultiLvlStrRef multiLvlStrRefField;
        CT_NumData numLitField;
        CT_NumRef numRefField;
        CT_StrData strLitField;
        CT_StrRef strRefField;
        public static CT_AxDataSource Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_AxDataSource ctObj = new CT_AxDataSource();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "numLit")
                    ctObj.numLit = CT_NumData.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "numRef")
                    ctObj.numRef = CT_NumRef.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "strLit")
                    ctObj.strLit = CT_StrData.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "strRef")
                    ctObj.strRef = CT_StrRef.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "multiLvlStrRef")
                    ctObj.multiLvlStrRef = CT_MultiLvlStrRef.Parse(childNode, namespaceManager);
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            sw.Write(">");
            if (this.numLit != null)
                this.numLit.Write(sw, "numLit");
            if (this.numRef != null)
                this.numRef.Write(sw, "numRef");
            if (this.strLit != null)
                this.strLit.Write(sw, "strLit");
            if (this.strRef != null)
                this.strRef.Write(sw, "strRef");
            if (this.multiLvlStrRef != null)
                this.multiLvlStrRef.Write(sw, "multiLvlStrRef");
            sw.Write(string.Format("</c:{0}>", nodeName));
        }

        public CT_NumRef AddNewNumRef()
        {
            this.numRefField = new CT_NumRef();
            return this.numRefField;
        }
        public CT_NumData AddNewNumLit()
        {
            numLit = new CT_NumData();
            return numLit;
        }
        public CT_NumData numLit
        {
            get
            {
                return this.numLitField;
            }
            set
            {
                this.numLitField = value;
            }
        }
        public CT_NumRef numRef
        {
            get
            {
                return this.numRefField;
            }
            set
            {
                this.numRefField = value;
            }
        }
        public CT_StrData strLit
        {
            get
            {
                return this.strLitField;
            }
            set
            {
                this.strLitField = value;
            }
        }
        public CT_StrRef strRef
        {
            get
            {
                return this.strRefField;
            }
            set
            {
                this.strRefField = value;
            }
        }
        public CT_MultiLvlStrRef multiLvlStrRef
        {
            get
            {
                return this.multiLvlStrRefField;
            }
            set
            {
                this.multiLvlStrRefField = value;
            }
        }
        //private object itemField;

        //[XmlElement("multiLvlStrRef", typeof(CT_MultiLvlStrRef), Order = 0)]
        //[XmlElement("numLit", typeof(CT_NumData), Order = 0)]
        //[XmlElement("numRef", typeof(CT_NumRef), Order = 0)]
        //[XmlElement("strLit", typeof(CT_StrData), Order = 0)]
        //[XmlElement("strRef", typeof(CT_StrRef), Order = 0)]
        //public object Item
        //{
        //    get
        //    {
        //        return this.itemField;
        //    }
        //    set
        //    {
        //        this.itemField = value;
        //    }
        //}



        public CT_StrRef AddNewStrRef()
        {
            strRef = new CT_StrRef();
            return strRef;
        }

        public CT_StrData AddNewStrLit()
        {
            strLit = new CT_StrData();
            return strLit;
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_MultiLvlStrRef
    {
        public static CT_MultiLvlStrRef Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_MultiLvlStrRef ctObj = new CT_MultiLvlStrRef();
            ctObj.extLst = new List<CT_Extension>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "f")
                    ctObj.f = childNode.InnerText;
                else if (childNode.LocalName == "multiLvlStrCache")
                    ctObj.multiLvlStrCache = CT_MultiLvlStrData.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "extLst")
                    ctObj.extLst.Add(CT_Extension.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            sw.Write(">");
            if (this.f != null)
                sw.Write(string.Format("<c:f>{0}</c:f>", this.f));
            if (this.multiLvlStrCache != null)
                this.multiLvlStrCache.Write(sw, "multiLvlStrCache");
            if (this.extLst != null)
            {
                foreach (CT_Extension x in this.extLst)
                {
                    x.Write(sw, "extLst");
                }
            }
            sw.Write(string.Format("</c:{0}>", nodeName));
        }

        private string fField;

        private CT_MultiLvlStrData multiLvlStrCacheField;

        private List<CT_Extension> extLstField;

        public CT_MultiLvlStrRef()
        {
        }

        [XmlElement(Order = 0)]
        public string f
        {
            get
            {
                return this.fField;
            }
            set
            {
                this.fField = value;
            }
        }

        [XmlElement(Order = 1)]
        public CT_MultiLvlStrData multiLvlStrCache
        {
            get
            {
                return this.multiLvlStrCacheField;
            }
            set
            {
                this.multiLvlStrCacheField = value;
            }
        }

        [XmlElement(Order = 2)]
        public List<CT_Extension> extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_MultiLvlStrData
    {

        private CT_UnsignedInt ptCountField;

        private List<CT_Lvl> lvlField;

        private List<CT_Extension> extLstField;

        public static CT_MultiLvlStrData Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_MultiLvlStrData ctObj = new CT_MultiLvlStrData();
            ctObj.lvl = new List<CT_Lvl>();
            ctObj.extLst = new List<CT_Extension>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "ptCount")
                    ctObj.ptCount = CT_UnsignedInt.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "lvl")
                    ctObj.lvl.Add(CT_Lvl.Parse(childNode, namespaceManager));
                else if (childNode.LocalName == "extLst")
                    ctObj.extLst.Add(CT_Extension.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            sw.Write(">");
            if (this.ptCount != null)
                this.ptCount.Write(sw, "ptCount");
            if (this.lvl != null && this.lvl.Count > 0)
            {
                foreach (CT_Lvl x in this.lvl)
                {
                    x.Write(sw, "lvl");
                }
            }
            if (this.extLst != null)
            {
                foreach (CT_Extension x in this.extLst)
                {
                    x.Write(sw, "extLst");
                }
            }
            sw.Write(string.Format("</c:{0}>", nodeName));
        }

        public CT_MultiLvlStrData()
        {
        }

        [XmlElement(Order = 0)]
        public CT_UnsignedInt ptCount
        {
            get
            {
                return this.ptCountField;
            }
            set
            {
                this.ptCountField = value;
            }
        }

        [XmlElement(Order = 1)]
        public List<CT_Lvl> lvl
        {
            get
            {
                return this.lvlField;
            }
            set
            {
                this.lvlField = value;
            }
        }

        [XmlElement(Order = 2)]
        public List<CT_Extension> extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_BandFmt
    {

        private CT_UnsignedInt idxField;

        private CT_ShapeProperties spPrField;

        public CT_BandFmt()
        {

        }
        public static CT_BandFmt Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_BandFmt ctObj = new CT_BandFmt();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "idx")
                    ctObj.idx = CT_UnsignedInt.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "spPr")
                    ctObj.spPr = CT_ShapeProperties.Parse(childNode, namespaceManager);
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            sw.Write(">");
            if (this.idx != null)
                this.idx.Write(sw, "idx");
            if (this.spPr != null)
                this.spPr.Write(sw, "spPr");
            sw.Write(string.Format("</c:{0}>", nodeName));
        }


        [XmlElement(Order = 0)]
        public CT_UnsignedInt idx
        {
            get
            {
                return this.idxField;
            }
            set
            {
                this.idxField = value;
            }
        }

        [XmlElement(Order = 1)]
        public CT_ShapeProperties spPr
        {
            get
            {
                return this.spPrField;
            }
            set
            {
                this.spPrField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_SurfaceChart
    {

        private CT_Boolean wireframeField;

        private List<CT_SurfaceSer> serField;

        private List<CT_BandFmt> bandFmtsField;

        private List<CT_UnsignedInt> axIdField;

        private List<CT_Extension> extLstField;

        public CT_SurfaceChart()
        {
        }
        public static CT_SurfaceChart Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_SurfaceChart ctObj = new CT_SurfaceChart();
            ctObj.ser = new List<CT_SurfaceSer>();
            ctObj.bandFmts = new List<CT_BandFmt>();
            ctObj.axId = new List<CT_UnsignedInt>();
            ctObj.extLst = new List<CT_Extension>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "wireframe")
                    ctObj.wireframe = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "ser")
                    ctObj.ser.Add(CT_SurfaceSer.Parse(childNode, namespaceManager));
                else if (childNode.LocalName == "bandFmts")
                    ctObj.bandFmts.Add(CT_BandFmt.Parse(childNode, namespaceManager));
                else if (childNode.LocalName == "axId")
                    ctObj.axId.Add(CT_UnsignedInt.Parse(childNode, namespaceManager));
                else if (childNode.LocalName == "extLst")
                    ctObj.extLst.Add(CT_Extension.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            sw.Write(">");
            if (this.wireframe != null)
                this.wireframe.Write(sw, "wireframe");
            if (this.ser != null)
            {
                foreach (CT_SurfaceSer x in this.ser)
                {
                    x.Write(sw, "ser");
                }
            }
            if (this.bandFmts != null)
            {
                foreach (CT_BandFmt x in this.bandFmts)
                {
                    x.Write(sw, "bandFmts");
                }
            }
            if (this.axId != null)
            {
                foreach (CT_UnsignedInt x in this.axId)
                {
                    x.Write(sw, "axId");
                }
            }
            if (this.extLst != null)
            {
                foreach (CT_Extension x in this.extLst)
                {
                    x.Write(sw, "extLst");
                }
            }
            sw.Write(string.Format("</c:{0}>", nodeName));
        }

        [XmlElement(Order = 0)]
        public CT_Boolean wireframe
        {
            get
            {
                return this.wireframeField;
            }
            set
            {
                this.wireframeField = value;
            }
        }

        public int GetSeriesCount()
        {
            return this.serField == null ? 0 : this.serField.Count;
        }

        [XmlElement("ser", Order = 1)]
        public List<CT_SurfaceSer> ser
        {
            get
            {
                return this.serField;
            }
            set
            {
                this.serField = value;
            }
        }

        [XmlElement(Order = 2)]
        public List<CT_BandFmt> bandFmts
        {
            get
            {
                return this.bandFmtsField;
            }
            set
            {
                this.bandFmtsField = value;
            }
        }

        [XmlElement("axId", Order = 3)]
        public List<CT_UnsignedInt> axId
        {
            get
            {
                return this.axIdField;
            }
            set
            {
                this.axIdField = value;
            }
        }

        [XmlElement(Order = 4)]
        public List<CT_Extension> extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_SecondPieSize
    {

        private ushort valField;

        public CT_SecondPieSize()
        {
            this.valField = ((ushort)(75));
        }
        public static CT_SecondPieSize Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_SecondPieSize ctObj = new CT_SecondPieSize();
            if (node.Attributes["val"] != null)
                ctObj.val = XmlHelper.ReadUShort(node.Attributes["val"]);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "val", this.val);
            sw.Write("/>");
        }

        [XmlAttribute]
        [DefaultValue(typeof(ushort), "75")]
        public ushort val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_SplitType
    {

        private ST_SplitType valField;

        public CT_SplitType()
        {
            this.valField = ST_SplitType.auto;
        }
        public static CT_SplitType Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_SplitType ctObj = new CT_SplitType();
            if (node.Attributes["val"] != null)
                ctObj.val = (ST_SplitType)Enum.Parse(typeof(ST_SplitType), node.Attributes["val"].Value);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "val", this.val.ToString());
            sw.Write("/>");
        }

        [XmlAttribute]
        [DefaultValue(ST_SplitType.auto)]
        public ST_SplitType val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
    }


    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    public enum ST_SplitType
    {

        /// <remarks/>
        auto,

        /// <remarks/>
        cust,

        /// <remarks/>
        percent,

        /// <remarks/>
        pos,

        /// <remarks/>
        val,
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_GapAmount
    {

        private ushort valField;

        public CT_GapAmount()
        {
            this.valField = ((ushort)(150));
        }
        public static CT_GapAmount Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_GapAmount ctObj = new CT_GapAmount();
            if (node.Attributes["val"]!=null)
                ctObj.val = XmlHelper.ReadUShort(node.Attributes["val"]);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "val", this.val);
            sw.Write("/>");
        }

        [XmlAttribute]
        [DefaultValue(typeof(ushort), "150")]
        public ushort val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
    }



    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_Shape
    {

        private ST_Shape valField;

        public CT_Shape()
        {
            this.valField = ST_Shape.box;
        }
        public static CT_Shape Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_Shape ctObj = new CT_Shape();
            if (node.Attributes["val"] != null)
                ctObj.val = (ST_Shape)Enum.Parse(typeof(ST_Shape), node.Attributes["val"].Value);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "val", this.val.ToString());
            sw.Write("/>");
        }

        [XmlAttribute]
        [DefaultValue(ST_Shape.box)]
        public ST_Shape val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
    }


    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    public enum ST_Shape
    {

        /// <remarks/>
        cone,

        /// <remarks/>
        coneToMax,

        /// <remarks/>
        box,

        /// <remarks/>
        cylinder,

        /// <remarks/>
        pyramid,

        /// <remarks/>
        pyramidToMax,
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_Overlap
    {
        public static CT_Overlap Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_Overlap ctObj = new CT_Overlap();
            if (node.Attributes["val"] != null)
                ctObj.val = XmlHelper.ReadSByte(node.Attributes["val"]);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "val", this.val);
            sw.Write("/>");
        }

        private sbyte valField;

        public CT_Overlap()
        {
            this.valField = ((sbyte)(0));
        }

        [XmlAttribute]
        [DefaultValue(typeof(sbyte), "0")]
        public sbyte val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
    }



    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_Grouping
    {

        private ST_Grouping valField;

        public CT_Grouping()
        {
            this.valField = ST_Grouping.standard;
        }
        public static CT_Grouping Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_Grouping ctObj = new CT_Grouping();
            if (node.Attributes["val"] != null)
                ctObj.val = (ST_Grouping)Enum.Parse(typeof(ST_Grouping), node.Attributes["val"].Value);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "val", this.val.ToString());
            sw.Write("/>");
        }

        [XmlAttribute]
        [DefaultValue(ST_Grouping.standard)]
        public ST_Grouping val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
    }


    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    public enum ST_Grouping
    {

        /// <remarks/>
        percentStacked,

        /// <remarks/>
        standard,

        /// <remarks/>
        stacked,
    }



    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_PlotArea
    {

        private CT_Layout layoutField;

        private CT_DTable dTableField;

        private CT_ShapeProperties spPrField;

        private List<CT_Extension> extLstField;

        public CT_PlotArea()
        {
            //this.items1Field = new List<object>();
        }

        public static CT_PlotArea Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_PlotArea ctObj = new CT_PlotArea();
            ctObj.surfaceChart = new List<CT_SurfaceChart>();
            ctObj.lineChart = new List<CT_LineChart>();
            ctObj.bubbleChart = new List<CT_BubbleChart>();
            ctObj.bar3DChart = new List<CT_Bar3DChart>();
            ctObj.area3DChart = new List<CT_Area3DChart>();
            ctObj.doughnutChart = new List<CT_DoughnutChart>();
            ctObj.pie3DChart = new List<CT_Pie3DChart>();
            ctObj.line3DChart = new List<CT_Line3DChart>();
            ctObj.surface3DChart = new List<CT_Surface3DChart>();
            ctObj.barChart = new List<CT_BarChart>();
            ctObj.radarChart = new List<CT_RadarChart>();
            ctObj.areaChart = new List<CT_AreaChart>();
            ctObj.scatterChart = new List<CT_ScatterChart>();
            ctObj.ofPieChart = new List<CT_OfPieChart>();
            ctObj.pieChart = new List<CT_PieChart>();
            ctObj.stockChart = new List<CT_StockChart>();
            ctObj.valAx = new List<CT_ValAx>();
            ctObj.serAx = new List<CT_SerAx>();
            ctObj.dateAx = new List<CT_DateAx>();
            ctObj.catAx = new List<CT_CatAx>();
            ctObj.extLst = new List<CT_Extension>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "layout")
                    ctObj.layout = CT_Layout.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "dTable")
                    ctObj.dTable = CT_DTable.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "spPr")
                    ctObj.spPr = CT_ShapeProperties.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "surfaceChart")
                    ctObj.surfaceChart.Add(CT_SurfaceChart.Parse(childNode, namespaceManager));
                else if (childNode.LocalName == "lineChart")
                    ctObj.lineChart.Add(CT_LineChart.Parse(childNode, namespaceManager));
                else if (childNode.LocalName == "bubbleChart")
                    ctObj.bubbleChart.Add(CT_BubbleChart.Parse(childNode, namespaceManager));
                else if (childNode.LocalName == "bar3DChart")
                    ctObj.bar3DChart.Add(CT_Bar3DChart.Parse(childNode, namespaceManager));
                else if (childNode.LocalName == "area3DChart")
                    ctObj.area3DChart.Add(CT_Area3DChart.Parse(childNode, namespaceManager));
                else if (childNode.LocalName == "doughnutChart")
                    ctObj.doughnutChart.Add(CT_DoughnutChart.Parse(childNode, namespaceManager));
                else if (childNode.LocalName == "pie3DChart")
                    ctObj.pie3DChart.Add(CT_Pie3DChart.Parse(childNode, namespaceManager));
                else if (childNode.LocalName == "line3DChart")
                    ctObj.line3DChart.Add(CT_Line3DChart.Parse(childNode, namespaceManager));
                else if (childNode.LocalName == "surface3DChart")
                    ctObj.surface3DChart.Add(CT_Surface3DChart.Parse(childNode, namespaceManager));
                else if (childNode.LocalName == "barChart")
                    ctObj.barChart.Add(CT_BarChart.Parse(childNode, namespaceManager));
                else if (childNode.LocalName == "radarChart")
                    ctObj.radarChart.Add(CT_RadarChart.Parse(childNode, namespaceManager));
                else if (childNode.LocalName == "areaChart")
                    ctObj.areaChart.Add(CT_AreaChart.Parse(childNode, namespaceManager));
                else if (childNode.LocalName == "scatterChart")
                    ctObj.scatterChart.Add(CT_ScatterChart.Parse(childNode, namespaceManager));
                else if (childNode.LocalName == "ofPieChart")
                    ctObj.ofPieChart.Add(CT_OfPieChart.Parse(childNode, namespaceManager));
                else if (childNode.LocalName == "pieChart")
                    ctObj.pieChart.Add(CT_PieChart.Parse(childNode, namespaceManager));
                else if (childNode.LocalName == "stockChart")
                    ctObj.stockChart.Add(CT_StockChart.Parse(childNode, namespaceManager));
                else if (childNode.LocalName == "valAx")
                    ctObj.valAx.Add(CT_ValAx.Parse(childNode, namespaceManager));
                else if (childNode.LocalName == "serAx")
                    ctObj.serAx.Add(CT_SerAx.Parse(childNode, namespaceManager));
                else if (childNode.LocalName == "dateAx")
                    ctObj.dateAx.Add(CT_DateAx.Parse(childNode, namespaceManager));
                else if (childNode.LocalName == "catAx")
                    ctObj.catAx.Add(CT_CatAx.Parse(childNode, namespaceManager));
                else if (childNode.LocalName == "extLst")
                    ctObj.extLst.Add(CT_Extension.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}>", nodeName));
            if (this.layout != null)
                this.layout.Write(sw, "layout");
            if (this.dTable != null)
                this.dTable.Write(sw, "dTable");
            if (this.surfaceChart != null)
            {
                foreach (CT_SurfaceChart x in this.surfaceChart)
                {
                    x.Write(sw, "surfaceChart");
                }
            }
            if (this.bubbleChart != null)
            {
                foreach (CT_BubbleChart x in this.bubbleChart)
                {
                    x.Write(sw, "bubbleChart");
                }
            }
            if (this.bar3DChart != null)
            {
                foreach (CT_Bar3DChart x in this.bar3DChart)
                {
                    x.Write(sw, "bar3DChart");
                }
            }
            if (this.area3DChart != null)
            {
                foreach (CT_Area3DChart x in this.area3DChart)
                {
                    x.Write(sw, "area3DChart");
                }
            }
            if (this.doughnutChart != null)
            {
                foreach (CT_DoughnutChart x in this.doughnutChart)
                {
                    x.Write(sw, "doughnutChart");
                }
            }
            if (this.pie3DChart != null)
            {
                foreach (CT_Pie3DChart x in this.pie3DChart)
                {
                    x.Write(sw, "pie3DChart");
                }
            }
            if (this.line3DChart != null)
            {
                foreach (CT_Line3DChart x in this.line3DChart)
                {
                    x.Write(sw, "line3DChart");
                }
            }
            if (this.surface3DChart != null)
            {
                foreach (CT_Surface3DChart x in this.surface3DChart)
                {
                    x.Write(sw, "surface3DChart");
                }
            }
            if (this.barChart != null)
            {
                foreach (CT_BarChart x in this.barChart)
                {
                    x.Write(sw, "barChart");
                }
            }
            if (this.lineChart != null)
            {
                foreach (CT_LineChart x in this.lineChart)
                {
                    x.Write(sw, "lineChart");
                }
            }
            if (this.radarChart != null)
            {
                foreach (CT_RadarChart x in this.radarChart)
                {
                    x.Write(sw, "radarChart");
                }
            }
            if (this.areaChart != null)
            {
                foreach (CT_AreaChart x in this.areaChart)
                {
                    x.Write(sw, "areaChart");
                }
            }
            if (this.scatterChart != null)
            {
                foreach (CT_ScatterChart x in this.scatterChart)
                {
                    x.Write(sw, "scatterChart");
                }
            }
            if (this.ofPieChart != null)
            {
                foreach (CT_OfPieChart x in this.ofPieChart)
                {
                    x.Write(sw, "ofPieChart");
                }
            }
            if (this.pieChart != null)
            {
                foreach (CT_PieChart x in this.pieChart)
                {
                    x.Write(sw, "pieChart");
                }
            }
            if (this.stockChart != null)
            {
                foreach (CT_StockChart x in this.stockChart)
                {
                    x.Write(sw, "stockChart");
                }
            }
            if (this.serAx != null)
            {
                foreach (CT_SerAx x in this.serAx)
                {
                    x.Write(sw, "serAx");
                }
            }
            if (this.dateAx != null)
            {
                foreach (CT_DateAx x in this.dateAx)
                {
                    x.Write(sw, "dateAx");
                }
            }
            if (this.valAx != null)
            {
                foreach (CT_ValAx x in this.valAx)
                {
                    x.Write(sw, "valAx");
                }
            }
            if (this.catAx != null)
            {
                foreach (CT_CatAx x in this.catAx)
                {
                    x.Write(sw, "catAx");
                }
            }
            if (this.spPr != null)
                this.spPr.Write(sw, "spPr");
            if (this.extLst != null)
            {
                foreach (CT_Extension x in this.extLst)
                {
                    x.Write(sw, "extLst");
                }
            }
            sw.Write(string.Format("</c:{0}>", nodeName));
        }

        List<CT_ValAx> valAxField;
        List<CT_SerAx> serAxField;
        List<CT_CatAx> catAxField;
        List<CT_DateAx> dateAxField;
        public CT_ValAx AddNewValAx()
        {
            if (valAxField == null)
                valAxField = new List<CT_ValAx>();
            CT_ValAx val = new CT_ValAx();
            this.valAxField.Add(val);
            return val;
        }

        public CT_SerAx AddNewSerAx()
        {
            if (serAxField == null)
                serAxField = new List<CT_SerAx>();
            CT_SerAx val = new CT_SerAx();
            this.serAxField.Add(val);
            return val;
        }
        public bool IsSetLayout()
        {
            return this.layoutField != null;
        }
        [XmlElement(Order = 0)]
        public CT_Layout layout
        {
            get
            {
                return this.layoutField;
            }
            set
            {
                this.layoutField = value;
            }
        }
        public CT_Layout AddNewLayout()
        {
            this.layoutField = new CT_Layout();
            return this.layoutField;
        }
        //[XmlElement("area3DChart", typeof(CT_Area3DChart), Order = 1)]
        //[XmlElement("areaChart", typeof(CT_AreaChart), Order = 1)]
        //[XmlElement("bar3DChart", typeof(CT_Bar3DChart), Order = 1)]
        //[XmlElement("barChart", typeof(CT_BarChart), Order = 1)]
        //[XmlElement("bubbleChart", typeof(CT_BubbleChart), Order = 1)]
        //[XmlElement("doughnutChart", typeof(CT_DoughnutChart), Order = 1)]
        //[XmlElement("line3DChart", typeof(CT_Line3DChart), Order = 1)]
        //[XmlElement("lineChart", typeof(CT_LineChart), Order = 1)]
        //[XmlElement("ofPieChart", typeof(CT_OfPieChart), Order = 1)]
        //[XmlElement("pie3DChart", typeof(CT_Pie3DChart), Order = 1)]
        //[XmlElement("pieChart", typeof(CT_PieChart), Order = 1)]
        //[XmlElement("radarChart", typeof(CT_RadarChart), Order = 1)]
        //[XmlElement("scatterChart", typeof(CT_ScatterChart), Order = 1)]
        //[XmlElement("stockChart", typeof(CT_StockChart), Order = 1)]
        //[XmlElement("surface3DChart", typeof(CT_Surface3DChart), Order = 1)]
        //[XmlElement("surfaceChart", typeof(CT_SurfaceChart), Order = 1)]
        //public List<object> Items
        //{
        //    get
        //    {
        //        return this.itemsField;
        //    }
        //    set
        //    {
        //        this.itemsField = value;
        //    }
        //}
        public CT_Pie3DChart AddNewPie3DChart()
        {
            if (this.pie3DChartField == null)
                this.pie3DChartField = new List<CT_Pie3DChart>();
            CT_Pie3DChart newobj = new CT_Pie3DChart();
            this.pie3DChartField.Add(newobj);
            return newobj;
        }

        public CT_PieChart AddNewPieChart()
        {
            if (this.pieChartField == null)
                this.pieChartField = new List<CT_PieChart>();
            CT_PieChart newobj = new CT_PieChart();
            this.pieChartField.Add(newobj);
            return newobj;
        }

        public CT_ScatterChart AddNewScatterChart()
        {
            if (this.scatterChartField == null)
                this.scatterChartField = new List<CT_ScatterChart>();
            CT_ScatterChart newobj = new CT_ScatterChart();
            this.scatterChartField.Add(newobj);
            return newobj;
        }

        public int GetAllSeriesCount()
        {
            return (surfaceChartField == null ? 0 : surfaceChartField.Select(x=>x.GetSeriesCount()).Sum())
                + (lineChartField == null ? 0 : lineChartField.Select(x => x.GetSeriesCount()).Sum())
                + (bubbleChartField == null ? 0 : bubbleChartField.Select(x => x.GetSeriesCount()).Sum())
                + (bar3DChartField == null ? 0 : bar3DChartField.Select(x => x.GetSeriesCount()).Sum())
                + (area3DChartField == null ? 0 : area3DChartField.Select(x => x.GetSeriesCount()).Sum())
                + (doughnutChartField == null ? 0 : doughnutChartField.Select(x => x.GetSeriesCount()).Sum())
                + (pie3DChartField == null ? 0 : pie3DChartField.Select(x => x.GetSeriesCount()).Sum())
                + (line3DChartField == null ? 0 : line3DChartField.Select(x => x.GetSeriesCount()).Sum())
                + (surface3DChartField == null ? 0 : surface3DChartField.Select(x => x.GetSeriesCount()).Sum())
                + (barChartField == null ? 0 : barChartField.Select(x => x.GetSeriesCount()).Sum())
                + (radarChartField == null ? 0 : radarChartField.Select(x => x.GetSeriesCount()).Sum())
                + (areaChartField == null ? 0 : areaChartField.Select(x => x.GetSeriesCount()).Sum())
                + (scatterChartField == null ? 0 : scatterChartField.Select(x => x.GetSeriesCount()).Sum())
                + (ofPieChartField == null ? 0 : ofPieChartField.Select(x => x.GetSeriesCount()).Sum())
                + (pieChartField == null ? 0 : pieChartField.Select(x => x.GetSeriesCount()).Sum())
                + (stockChartField == null ? 0 : stockChartField.Select(x => x.GetSeriesCount()).Sum());
        }

        List<CT_SurfaceChart> surfaceChartField;
        public List<CT_SurfaceChart> surfaceChart
        {
            get { return this.surfaceChartField; }
            set { this.surfaceChartField = value; }
        }

        List<CT_LineChart> lineChartField;
        public List<CT_LineChart> lineChart
        {
            get { return this.lineChartField; }
            set { this.lineChartField = value; }
        }

        List<CT_BubbleChart> bubbleChartField;
        public List<CT_BubbleChart> bubbleChart
        {
            get { return this.bubbleChartField; }
            set { this.bubbleChartField = value; }
        }

        List<CT_Bar3DChart> bar3DChartField;
        public List<CT_Bar3DChart> bar3DChart
        {
            get { return this.bar3DChartField; }
            set { this.bar3DChartField = value; }
        }

        List<CT_Area3DChart> area3DChartField;
        public List<CT_Area3DChart> area3DChart
        {
            get { return this.area3DChartField; }
            set { this.area3DChartField = value; }
        }

        List<CT_DoughnutChart> doughnutChartField;
        public List<CT_DoughnutChart> doughnutChart
        {
            get { return this.doughnutChartField; }
            set { this.doughnutChartField = value; }
        }

        List<CT_Pie3DChart> pie3DChartField;
        public List<CT_Pie3DChart> pie3DChart
        {
            get { return this.pie3DChartField; }
            set { this.pie3DChartField = value; }
        }

        List<CT_Line3DChart> line3DChartField;
        public List<CT_Line3DChart> line3DChart
        {
            get { return this.line3DChartField; }
            set { this.line3DChartField = value; }
        }

        List<CT_Surface3DChart> surface3DChartField;
        public List<CT_Surface3DChart> surface3DChart
        {
            get { return this.surface3DChartField; }
            set { this.surface3DChartField = value; }
        }

        List<CT_BarChart> barChartField;
        public List<CT_BarChart> barChart
        {
            get { return this.barChartField; }
            set { this.barChartField = value; }
        }

        List<CT_RadarChart> radarChartField;
        public List<CT_RadarChart> radarChart
        {
            get { return this.radarChartField; }
            set { this.radarChartField = value; }
        }

        List<CT_AreaChart> areaChartField;
        public List<CT_AreaChart> areaChart
        {
            get { return this.areaChartField; }
            set { this.areaChartField = value; }
        }

        List<CT_ScatterChart> scatterChartField;
        public List<CT_ScatterChart> scatterChart
        {
            get { return this.scatterChartField; }
            set { this.scatterChartField = value; }
        }

        List<CT_OfPieChart> ofPieChartField;
        public List<CT_OfPieChart> ofPieChart
        {
            get { return this.ofPieChartField; }
            set { this.ofPieChartField = value; }
        }

        List<CT_PieChart> pieChartField;
        public List<CT_PieChart> pieChart
        {
            get { return this.pieChartField; }
            set { this.pieChartField = value; }
        }

        List<CT_StockChart> stockChartField;
        public List<CT_StockChart> stockChart
        {
            get { return this.stockChartField; }
            set { this.stockChartField = value; }
        }


        [XmlElement(Order = 21)]
        public List<CT_ValAx> valAx
        {
            get
            {
                return this.valAxField;
            }
            set
            {
                this.valAxField = value;
            }
        }

        [XmlElement(Order = 22)]
        public List<CT_SerAx> serAx
        {
            get
            {
                return this.serAxField;
            }
            set
            {
                this.serAxField = value;
            }
        }
        [XmlElement(Order = 23)]
        public List<CT_DateAx> dateAx
        {
            get
            {
                return this.dateAxField;
            }
            set
            {
                this.dateAxField = value;
            }
        }
        [XmlElement(Order = 24)]
        public List<CT_CatAx> catAx
        {
            get
            {
                return this.catAxField;
            }
            set
            {
                this.catAxField = value;
            }
        }
        [XmlElement(Order = 25)]
        public CT_DTable dTable
        {
            get
            {
                return this.dTableField;
            }
            set
            {
                this.dTableField = value;
            }
        }

        [XmlElement(Order = 26)]
        public CT_ShapeProperties spPr
        {
            get
            {
                return this.spPrField;
            }
            set
            {
                this.spPrField = value;
            }
        }

        [XmlElement(Order = 27)]
        public List<CT_Extension> extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }

        public CT_BarChart AddNewBarChart()
        {
            CT_BarChart ctchart = new CT_BarChart();
            if (this.barChartField == null)
            {
                this.barChartField = new List<CT_BarChart>();
            }
            this.barChartField.Add(ctchart);
            return ctchart;
        }

        public CT_AreaChart AddNewAreaChart()
        {
            CT_AreaChart ctchart = new CT_AreaChart();
            if (this.areaChartField == null)
            {
                this.areaChartField = new List<CT_AreaChart>();
            }
            this.areaChartField.Add(ctchart);
            return ctchart;
        }

        public CT_LineChart AddNewLineChart()
        {
            CT_LineChart ctchart = new CT_LineChart();
            if(this.lineChartField==null)
                this.lineChartField = new List<CT_LineChart>();
            lineChartField.Add(ctchart);
            return ctchart;
        }

        public CT_CatAx AddNewCatAx()
        {
            CT_CatAx newax = new CT_CatAx();
            if(this.catAxField==null)
                this.catAxField = new List<CT_CatAx>();
            this.catAxField.Add(newax);
            return newax;
        }

        public CT_DateAx AddNewDateAx()
        {
            CT_DateAx newax = new CT_DateAx();
            if (this.dateAxField == null)
            {
                this.dateAxField = new List<CT_DateAx>();
            }
            this.dateAxField.Add(newax);
            return newax;
        }
    }



    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_Perspective
    {

        private byte valField;

        public CT_Perspective()
        {
            this.valField = ((byte)(30));
        }
        public static CT_Perspective Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_Perspective ctObj = new CT_Perspective();
            if (node.Attributes["val"]!=null)
                ctObj.val = XmlHelper.ReadByte(node.Attributes["val"]);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            if(this.val!=30)
                XmlHelper.WriteAttribute(sw, "val", this.val);
            sw.Write("/>");
        }

        [XmlAttribute]
        [DefaultValue(typeof(byte), "30")]
        public byte val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_DepthPercent
    {

        private ushort valField;

        public CT_DepthPercent()
        {
            this.valField = ((ushort)(100));
        }

        [XmlAttribute]
        [DefaultValue(typeof(ushort), "100")]
        public ushort val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
        public static CT_DepthPercent Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_DepthPercent ctObj = new CT_DepthPercent();
            if (node.Attributes["val"]!=null)
                ctObj.val = XmlHelper.ReadUShort(node.Attributes["val"]);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            if(valField!=100)
                XmlHelper.WriteAttribute(sw, "val", this.val);
            sw.Write("/>");
        }

    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_RotY
    {

        private ushort valField;

        public CT_RotY()
        {
            this.valField = ((ushort)(0));
        }
        public static CT_RotY Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_RotY ctObj = new CT_RotY();
            ctObj.val = XmlHelper.ReadUShort(node.Attributes["val"]);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "val", this.val);
            sw.Write("/>");
        }


        [XmlAttribute]
        [DefaultValue(typeof(ushort), "0")]
        public ushort val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_HPercent
    {
        public static CT_HPercent Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_HPercent ctObj = new CT_HPercent();
            ctObj.val = XmlHelper.ReadUShort(node.Attributes["val"]);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "val", this.val);
            sw.Write("/>");
        }


        private ushort valField;

        public CT_HPercent()
        {
            this.valField = ((ushort)(100));
        }

        [XmlAttribute]
        [DefaultValue(typeof(ushort), "100")]
        public ushort val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_RotX
    {

        private sbyte valField;

        public CT_RotX()
        {
            this.valField = ((sbyte)(0));
        }
        public static CT_RotX Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_RotX ctObj = new CT_RotX();
            ctObj.val = XmlHelper.ReadSByte(node.Attributes["val"]);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "val", this.val);
            sw.Write("/>");
        }


        [XmlAttribute]
        [DefaultValue(typeof(sbyte), "0")]
        public sbyte val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_View3D
    {

        private CT_RotX rotXField;

        private CT_HPercent hPercentField;

        private CT_RotY rotYField;

        private CT_DepthPercent depthPercentField;

        private CT_Boolean rAngAxField;

        private CT_Perspective perspectiveField;

        private List<CT_Extension> extLstField;

        public CT_View3D()
        {

        }
        public static CT_View3D Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_View3D ctObj = new CT_View3D();
            ctObj.extLst = new List<CT_Extension>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "rotX")
                    ctObj.rotX = CT_RotX.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "hPercent")
                    ctObj.hPercent = CT_HPercent.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "rotY")
                    ctObj.rotY = CT_RotY.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "depthPercent")
                    ctObj.depthPercent = CT_DepthPercent.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "rAngAx")
                    ctObj.rAngAx = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "perspective")
                    ctObj.perspective = CT_Perspective.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "extLst")
                    ctObj.extLst.Add(CT_Extension.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            sw.Write(">");
            if (this.rotX != null)
                this.rotX.Write(sw, "rotX");
            if (this.hPercent != null)
                this.hPercent.Write(sw, "hPercent");
            if (this.rotY != null)
                this.rotY.Write(sw, "rotY");
            if (this.depthPercent != null)
                this.depthPercent.Write(sw, "depthPercent");
            if (this.rAngAx != null)
                this.rAngAx.Write(sw, "rAngAx");
            if (this.perspective != null)
                this.perspective.Write(sw, "perspective");
            if (this.extLst != null)
            {
                foreach (CT_Extension x in this.extLst)
                {
                    x.Write(sw, "extLst");
                }
            }
            sw.Write(string.Format("</c:{0}>", nodeName));
        }

        [XmlElement(Order = 0)]
        public CT_RotX rotX
        {
            get
            {
                return this.rotXField;
            }
            set
            {
                this.rotXField = value;
            }
        }

        [XmlElement(Order = 1)]
        public CT_HPercent hPercent
        {
            get
            {
                return this.hPercentField;
            }
            set
            {
                this.hPercentField = value;
            }
        }

        [XmlElement(Order = 2)]
        public CT_RotY rotY
        {
            get
            {
                return this.rotYField;
            }
            set
            {
                this.rotYField = value;
            }
        }

        [XmlElement(Order = 3)]
        public CT_DepthPercent depthPercent
        {
            get
            {
                return this.depthPercentField;
            }
            set
            {
                this.depthPercentField = value;
            }
        }

        [XmlElement(Order = 4)]
        public CT_Boolean rAngAx
        {
            get
            {
                return this.rAngAxField;
            }
            set
            {
                this.rAngAxField = value;
            }
        }

        [XmlElement(Order = 5)]
        public CT_Perspective perspective
        {
            get
            {
                return this.perspectiveField;
            }
            set
            {
                this.perspectiveField = value;
            }
        }

        [XmlElement(Order = 6)]
        public List<CT_Extension> extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_PivotFmt
    {

        private CT_UnsignedInt idxField;

        private CT_ShapeProperties spPrField;

        private CT_TextBody txPrField;

        private CT_Marker markerField;

        private CT_DLbl dLblField;

        private List<CT_Extension> extLstField;

        public CT_PivotFmt()
        {
            //this.extLstField = new List<CT_Extension>();
            //this.dLblField = new CT_DLbl();
            //this.markerField = new CT_Marker();
            //this.idxField = new CT_UnsignedInt();
        }
        public static CT_PivotFmt Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_PivotFmt ctObj = new CT_PivotFmt();
            ctObj.extLst = new List<CT_Extension>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "idx")
                    ctObj.idx = CT_UnsignedInt.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "spPr")
                    ctObj.spPr = CT_ShapeProperties.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "txPr")
                    ctObj.txPr = CT_TextBody.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "marker")
                    ctObj.marker = CT_Marker.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "dLbl")
                    ctObj.dLbl = CT_DLbl.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "extLst")
                    ctObj.extLst.Add(CT_Extension.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            sw.Write(">");
            if (this.idx != null)
                this.idx.Write(sw, "idx");
            if (this.spPr != null)
                this.spPr.Write(sw, "spPr");
            if (this.txPr != null)
                this.txPr.Write(sw, "txPr");
            if (this.marker != null)
                this.marker.Write(sw, "marker");
            if (this.dLbl != null)
                this.dLbl.Write(sw, "dLbl");
            if (this.extLst != null)
            {
                foreach (CT_Extension x in this.extLst)
                {
                    x.Write(sw, "extLst");
                }
            }
            sw.Write(string.Format("</c:{0}>", nodeName));
        }

        [XmlElement(Order = 0)]
        public CT_UnsignedInt idx
        {
            get
            {
                return this.idxField;
            }
            set
            {
                this.idxField = value;
            }
        }

        [XmlElement(Order = 1)]
        public CT_ShapeProperties spPr
        {
            get
            {
                return this.spPrField;
            }
            set
            {
                this.spPrField = value;
            }
        }

        [XmlElement(Order = 2)]
        public CT_TextBody txPr
        {
            get
            {
                return this.txPrField;
            }
            set
            {
                this.txPrField = value;
            }
        }

        [XmlElement(Order = 3)]
        public CT_Marker marker
        {
            get
            {
                return this.markerField;
            }
            set
            {
                this.markerField = value;
            }
        }

        [XmlElement(Order = 4)]
        public CT_DLbl dLbl
        {
            get
            {
                return this.dLblField;
            }
            set
            {
                this.dLblField = value;
            }
        }

        [XmlElement(Order = 5)]
        public List<CT_Extension> extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart",ElementName = "chart", IsNullable = true)]
    public class CT_Chart
    {
        private CT_Title titleField;

        private CT_Boolean autoTitleDeletedField;

        private CT_PivotFmts pivotFmtsField;

        private CT_View3D view3DField;

        private CT_Surface floorField;

        private CT_Surface sideWallField;

        private CT_Surface backWallField;

        private CT_PlotArea plotAreaField;

        private CT_Legend legendField;

        private CT_Boolean plotVisOnlyField;

        private CT_DispBlanksAs dispBlanksAsField;

        private CT_Boolean showDLblsOverMaxField;

        private List<CT_Extension> extLstField;

        public CT_Chart()
        {
        }
        public static CT_Chart Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_Chart ctObj = new CT_Chart();
            ctObj.extLst = new List<CT_Extension>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "title")
                    ctObj.title = CT_Title.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "autoTitleDeleted")
                    ctObj.autoTitleDeleted = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "pivotFmts")
                    ctObj.pivotFmts = CT_PivotFmts.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "view3D")
                    ctObj.view3D = CT_View3D.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "floor")
                    ctObj.floor = CT_Surface.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "sideWall")
                    ctObj.sideWall = CT_Surface.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "backWall")
                    ctObj.backWall = CT_Surface.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "plotArea")
                    ctObj.plotArea = CT_PlotArea.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "legend")
                    ctObj.legend = CT_Legend.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "plotVisOnly")
                    ctObj.plotVisOnly = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "dispBlanksAs")
                    ctObj.dispBlanksAs = CT_DispBlanksAs.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "showDLblsOverMax")
                    ctObj.showDLblsOverMax = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "extLst")
                    ctObj.extLst.Add(CT_Extension.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            sw.Write(">");
            if (this.title != null)
                this.title.Write(sw, "title");
            if (this.autoTitleDeleted != null)
                this.autoTitleDeleted.Write(sw, "autoTitleDeleted");
            if (this.pivotFmts != null)
                this.pivotFmts.Write(sw, "pivotFmts");
            if (this.view3D != null)
                this.view3D.Write(sw, "view3D");
            if (this.floor != null)
                this.floor.Write(sw, "floor");
            if (this.sideWall != null)
                this.sideWall.Write(sw, "sideWall");
            if (this.backWall != null)
                this.backWall.Write(sw, "backWall");
            if (this.plotArea != null)
                this.plotArea.Write(sw, "plotArea");
            if (this.legend != null)
                this.legend.Write(sw, "legend");
            if (this.plotVisOnly != null)
                this.plotVisOnly.Write(sw, "plotVisOnly");
            if (this.dispBlanksAs != null)
                this.dispBlanksAs.Write(sw, "dispBlanksAs");
            if (this.showDLblsOverMax != null)
                this.showDLblsOverMax.Write(sw, "showDLblsOverMax");

            if (this.extLst != null)
            {
                foreach (CT_Extension x in this.extLst)
                {
                    x.Write(sw, "extLst");
                }
            }
            sw.Write(string.Format("</c:{0}>", nodeName));
        }

        public CT_Boolean AddNewPlotVisOnly()
        {
            this.plotVisOnlyField=new CT_Boolean();
            return this.plotVisOnlyField;
        }
        public CT_PlotArea AddNewPlotArea()
        {
            this.plotAreaField = new CT_PlotArea();
            return this.plotAreaField;
        }
        public bool IsSetTitle()
        {
            return titleField != null;
        }
        public bool IsSetLegend()
        {
            return legendField != null;
        }
        public void unsetLegend()
        {
            legendField = null;
        }
        public CT_Legend AddNewLegend()
        {
            if(this.legendField==null)
                this.legendField = new CT_Legend();
            return this.legendField;
        }

        public CT_Title AddNewTitle()
        {
            this.titleField = new CT_Title();
            return this.titleField;
        }

        [XmlElement(Order = 0)]
        public CT_Title title
        {
            get
            {
                return this.titleField;
            }
            set
            {
                this.titleField = value;
            }
        }

        [XmlElement(Order = 1)]
        public CT_Boolean autoTitleDeleted
        {
            get
            {
                return this.autoTitleDeletedField;
            }
            set
            {
                this.autoTitleDeletedField = value;
            }
        }

        [XmlElement(Order = 2)]
        public CT_PivotFmts pivotFmts
        {
            get
            {
                return this.pivotFmtsField;
            }
            set
            {
                this.pivotFmtsField = value;
            }
        }

        [XmlElement(Order = 3)]
        public CT_View3D view3D
        {
            get
            {
                return this.view3DField;
            }
            set
            {
                this.view3DField = value;
            }
        }

        [XmlElement(Order = 4)]
        public CT_Surface floor
        {
            get
            {
                return this.floorField;
            }
            set
            {
                this.floorField = value;
            }
        }

        [XmlElement(Order = 5)]
        public CT_Surface sideWall
        {
            get
            {
                return this.sideWallField;
            }
            set
            {
                this.sideWallField = value;
            }
        }

        [XmlElement(Order = 6)]
        public CT_Surface backWall
        {
            get
            {
                return this.backWallField;
            }
            set
            {
                this.backWallField = value;
            }
        }

        [XmlElement(Order = 7)]
        public CT_PlotArea plotArea
        {
            get
            {
                return this.plotAreaField;
            }
            set
            {
                this.plotAreaField = value;
            }
        }

        [XmlElement(Order = 8)]
        public CT_Legend legend
        {
            get
            {
                return this.legendField;
            }
            set
            {
                this.legendField = value;
            }
        }

        [XmlElement(Order = 9)]
        public CT_Boolean plotVisOnly
        {
            get
            {
                return this.plotVisOnlyField;
            }
            set
            {
                this.plotVisOnlyField = value;
            }
        }

        [XmlElement(Order = 10)]
        public CT_DispBlanksAs dispBlanksAs
        {
            get
            {
                return this.dispBlanksAsField;
            }
            set
            {
                this.dispBlanksAsField = value;
            }
        }

        [XmlElement(Order = 11)]
        public CT_Boolean showDLblsOverMax
        {
            get
            {
                return this.showDLblsOverMaxField;
            }
            set
            {
                this.showDLblsOverMaxField = value;
            }
        }

        [XmlElement(Order = 12)]
        public List<CT_Extension> extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_Protection
    {

        private CT_Boolean chartObjectField;

        private CT_Boolean dataField;

        private CT_Boolean formattingField;

        private CT_Boolean selectionField;

        private CT_Boolean userInterfaceField;

        public CT_Protection()
        {
            //this.userInterfaceField = new CT_Boolean();
            //this.selectionField = new CT_Boolean();
            //this.formattingField = new CT_Boolean();
            //this.dataField = new CT_Boolean();
            //this.chartObjectField = new CT_Boolean();
        }
        public static CT_Protection Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_Protection ctObj = new CT_Protection();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "chartObject")
                    ctObj.chartObject = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "data")
                    ctObj.data = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "formatting")
                    ctObj.formatting = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "selection")
                    ctObj.selection = CT_Boolean.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "userInterface")
                    ctObj.userInterface = CT_Boolean.Parse(childNode, namespaceManager);
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            sw.Write(">");
            if (this.chartObject != null)
                this.chartObject.Write(sw, "chartObject");
            if (this.data != null)
                this.data.Write(sw, "data");
            if (this.formatting != null)
                this.formatting.Write(sw, "formatting");
            if (this.selection != null)
                this.selection.Write(sw, "selection");
            if (this.userInterface != null)
                this.userInterface.Write(sw, "userInterface");
            sw.Write(string.Format("</c:{0}>", nodeName));
        }

        [XmlElement(Order = 0)]
        public CT_Boolean chartObject
        {
            get
            {
                return this.chartObjectField;
            }
            set
            {
                this.chartObjectField = value;
            }
        }

        [XmlElement(Order = 1)]
        public CT_Boolean data
        {
            get
            {
                return this.dataField;
            }
            set
            {
                this.dataField = value;
            }
        }

        [XmlElement(Order = 2)]
        public CT_Boolean formatting
        {
            get
            {
                return this.formattingField;
            }
            set
            {
                this.formattingField = value;
            }
        }

        [XmlElement(Order = 3)]
        public CT_Boolean selection
        {
            get
            {
                return this.selectionField;
            }
            set
            {
                this.selectionField = value;
            }
        }

        [XmlElement(Order = 4)]
        public CT_Boolean userInterface
        {
            get
            {
                return this.userInterfaceField;
            }
            set
            {
                this.userInterfaceField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_PivotSource
    {

        private string nameField;

        private CT_UnsignedInt fmtIdField;

        private List<CT_Extension> extLstField;

        public CT_PivotSource()
        {
        }
        public static CT_PivotSource Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_PivotSource ctObj = new CT_PivotSource();
            ctObj.extLst = new List<CT_Extension>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "name")
                    ctObj.name = childNode.InnerText;
                else if (childNode.LocalName == "fmtId")
                    ctObj.fmtId = CT_UnsignedInt.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "extLst")
                    ctObj.extLst.Add(CT_Extension.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            sw.Write(">");
            if (this.name != null)
                sw.Write(string.Format("<c:name>{0}</c:name>", this.name));
            if (this.fmtId != null)
                this.fmtId.Write(sw, "fmtId");
            if (this.extLst != null)
            {
                foreach (CT_Extension x in this.extLst)
                {
                    x.Write(sw, "extLst");
                }
            }
            sw.Write(string.Format("</c:{0}>", nodeName));
        }


        [XmlElement(Order = 0)]
        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        [XmlElement(Order = 1)]
        public CT_UnsignedInt fmtId
        {
            get
            {
                return this.fmtIdField;
            }
            set
            {
                this.fmtIdField = value;
            }
        }

        [XmlElement(Order = 2)]
        public List<CT_Extension> extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_Style
    {
        public static CT_Style Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_Style ctObj = new CT_Style();
            ctObj.val = XmlHelper.ReadByte(node.Attributes["val"]);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "val", this.val);
            sw.Write("/>");
        }

        private byte valField;

        [XmlAttribute]
        public byte val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_TextLanguageID
    {

        private string valField;

        [XmlAttribute]
        public string val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
        public static CT_TextLanguageID Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_TextLanguageID ctObj = new CT_TextLanguageID();
            ctObj.val = XmlHelper.ReadString(node.Attributes["val"]);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "val", this.val);
            sw.Write("/>");
        }

    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_ExtensionList
    {

        private List<CT_Extension> extField;

        public CT_ExtensionList()
        {
            //this.extField = new List<CT_Extension>();
        }

        [XmlElement("ext", Order = 0)]
        public List<CT_Extension> ext
        {
            get
            {
                return this.extField;
            }
            set
            {
                this.extField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_Lvl
    {
        private List<CT_StrVal> ptField;

        public static CT_Lvl Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_Lvl ctObj = new CT_Lvl();
            ctObj.pt = new List<CT_StrVal>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "pt")
                    ctObj.pt.Add(CT_StrVal.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}>", nodeName));
            foreach (CT_StrVal x in this.pt)
            {
                x.Write(sw, "pt");
            }
            sw.Write(string.Format("</c:{0}>", nodeName));
        }

        public CT_Lvl()
        {
            //this.ptField = new List<CT_StrVal>();
        }

        [XmlElement("pt", Order = 0)]
        public List<CT_StrVal> pt
        {
            get
            {
                return this.ptField;
            }
            set
            {
                this.ptField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_CustSplit
    {

        private List<CT_UnsignedInt> secondPiePtField;

        public CT_CustSplit()
        {
            //this.secondPiePtField = new List<CT_UnsignedInt>();
        }

        [XmlElement("secondPiePt", Order = 0)]
        public List<CT_UnsignedInt> secondPiePt
        {
            get
            {
                return this.secondPiePtField;
            }
            set
            {
                this.secondPiePtField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_BandFmts
    {

        private List<CT_BandFmt> bandFmtField;

        public CT_BandFmts()
        {
            //this.bandFmtField = new List<CT_BandFmt>();
        }

        [XmlElement("bandFmt", Order = 0)]
        public List<CT_BandFmt> bandFmt
        {
            get
            {
                return this.bandFmtField;
            }
            set
            {
                this.bandFmtField = value;
            }
        }
    }


    [Serializable]

    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_PivotFmts
    {
        private List<CT_PivotFmt> pivotFmtField;

        public static CT_PivotFmts Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_PivotFmts ctObj = new CT_PivotFmts();
            ctObj.pivotFmt = new List<CT_PivotFmt>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "pivotFmt")
                    ctObj.pivotFmt.Add(CT_PivotFmt.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            if (this.pivotFmt.Count == 0)
            {
                return;
            }

            sw.Write(string.Format("<c:{0}>", nodeName));
            foreach (CT_PivotFmt x in this.pivotFmt)
            {
                x.Write(sw, "pivotFmt");
            }
            sw.Write(string.Format("</c:{0}>", nodeName));
        }

        public CT_PivotFmts()
        {
            //this.pivotFmtField = new List<CT_PivotFmt>();
        }

        [XmlElement("pivotFmt", Order = 0)]
        public List<CT_PivotFmt> pivotFmt
        {
            get
            {
                return this.pivotFmtField;
            }
            set
            {
                this.pivotFmtField = value;
            }
        }
    }

    [Serializable]

    [System.ComponentModel.DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_TextBody
    {

        private CT_TextBodyProperties bodyPrField;

        private CT_TextListStyle lstStyleField;

        private List<CT_TextParagraph> pField;

        public static CT_TextBody Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_TextBody ctObj = new CT_TextBody();
            ctObj.p = new List<CT_TextParagraph>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "bodyPr")
                    ctObj.bodyPr = CT_TextBodyProperties.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "lstStyle")
                    ctObj.lstStyle = CT_TextListStyle.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "p")
                    ctObj.p.Add(CT_TextParagraph.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}>", nodeName));
            if (this.bodyPr != null)
                this.bodyPr.Write(sw, "bodyPr");
            if (this.lstStyle != null)
                this.lstStyle.Write(sw, "lstStyle");
            foreach (CT_TextParagraph x in this.p)
            {
                x.Write(sw, "p");
            }
            sw.Write(string.Format("</c:{0}>", nodeName));
        }

        public void SetPArray(CT_TextParagraph[] array)
        {
            pField = new List<CT_TextParagraph>(array);
        }
        public CT_TextParagraph AddNewP()
        {
            if (this.pField == null)
                pField = new List<CT_TextParagraph>();
            CT_TextParagraph tp = new CT_TextParagraph();
            pField.Add(tp);
            return tp;
        }
        public CT_TextBodyProperties AddNewBodyPr()
        {
            this.bodyPrField = new CT_TextBodyProperties();
            return this.bodyPrField;
        }
        public CT_TextListStyle AddNewLstStyle()
        {
            this.lstStyleField = new CT_TextListStyle();
            return this.lstStyleField;
        }

        public CT_TextBodyProperties bodyPr
        {
            get
            {
                return this.bodyPrField;
            }
            set
            {
                this.bodyPrField = value;
            }
        }


        public CT_TextListStyle lstStyle
        {
            get
            {
                return this.lstStyleField;
            }
            set
            {
                this.lstStyleField = value;
            }
        }
        public override string ToString()
        {
            if (p == null || p.Count == 0)
                return string.Empty;
            
            using(var sb = ZString.CreateStringBuilder())
            {
                foreach(CT_TextParagraph tp in p)
                {
                    foreach(CT_RegularTextRun tr in tp.r)
                    {
                        sb.Append(tr.t);
                    }
                }
                return sb.ToString();
            }
                
        }

        public int SizeOfPArray()
        {
            if (this.pField == null)
                pField = new List<CT_TextParagraph>();
            return this.pField.Count;
        }

        public CT_TextParagraph GetPArray(int v)
        {
            return this.pField[v];
        }

        [XmlElement("p")]
        public List<CT_TextParagraph> p
        {
            get
            {
                return this.pField;
            }
            set
            {
                this.pField = value;
            }
        }
    }
    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/chart", IsNullable = true)]
    public class CT_ShapeProperties
    {

        private CT_Transform2D xfrmField = null;

        private CT_CustomGeometry2D custGeomField = null;

        private CT_PresetGeometry2D prstGeomField = null;

        private CT_NoFillProperties noFillField = null;

        private CT_SolidColorFillProperties solidFillField = null;

        private CT_GradientFillProperties gradFillField = null;

        private CT_BlipFillProperties blipFillField = null;

        private CT_PatternFillProperties pattFillField = null;

        private CT_GroupFillProperties grpFillField = null;

        private CT_LineProperties lnField = null;

        private CT_EffectList effectLstField = null;

        private CT_EffectContainer effectDagField = null;

        private CT_Scene3D scene3dField = null;

        private CT_Shape3D sp3dField = null;

        private CT_OfficeArtExtensionList extLstField = null;

        private ST_BlackWhiteMode bwModeField = ST_BlackWhiteMode.none;


        public CT_PresetGeometry2D AddNewPrstGeom()
        {
            this.prstGeomField = new CT_PresetGeometry2D();
            return this.prstGeomField;
        }
        public CT_Transform2D AddNewXfrm()
        {
            this.xfrmField = new CT_Transform2D();
            return this.xfrmField;
        }
        public CT_SolidColorFillProperties AddNewSolidFill()
        {
            this.solidFillField = new CT_SolidColorFillProperties();
            return this.solidFillField;
        }
        public bool IsSetPattFill()
        {
            return this.pattFillField != null;
        }
        public bool IsSetSolidFill()
        {
            return this.solidFillField != null;
        }
        public bool IsSetLn()
        {
            return this.lnField != null;
        }
        public CT_LineProperties AddNewLn()
        {
            this.lnField = new CT_LineProperties();
            return lnField;
        }
        public void unsetPattFill()
        {
            this.pattFill = null;
        }
        public void unsetSolidFill()
        {
            this.solidFill = null;
        }

        [XmlElement(Order = 0)]
        public CT_Transform2D xfrm
        {
            get
            {
                return this.xfrmField;
            }
            set
            {
                this.xfrmField = value;
            }
        }

        [XmlElement(Order = 1)]
        public CT_CustomGeometry2D custGeom
        {
            get
            {
                return this.custGeomField;
            }
            set
            {
                this.custGeomField = value;
            }
        }

        [XmlElement(Order = 2)]
        public CT_PresetGeometry2D prstGeom
        {
            get
            {
                return this.prstGeomField;
            }
            set
            {
                this.prstGeomField = value;
            }
        }

        [XmlElement(Order = 3)]
        public CT_NoFillProperties noFill
        {
            get
            {
                return this.noFillField;
            }
            set
            {
                this.noFillField = value;
            }
        }

        [XmlElement(Order = 4)]
        public CT_SolidColorFillProperties solidFill
        {
            get
            {
                return this.solidFillField;
            }
            set
            {
                this.solidFillField = value;
            }
        }

        [XmlElement(Order = 5)]
        public CT_GradientFillProperties gradFill
        {
            get
            {
                return this.gradFillField;
            }
            set
            {
                this.gradFillField = value;
            }
        }

        [XmlElement(Order = 6)]
        public CT_BlipFillProperties blipFill
        {
            get
            {
                return this.blipFillField;
            }
            set
            {
                this.blipFillField = value;
            }
        }

        [XmlElement(Order = 7)]
        public CT_PatternFillProperties pattFill
        {
            get
            {
                return this.pattFillField;
            }
            set
            {
                this.pattFillField = value;
            }
        }

        [XmlElement(Order = 8)]
        public CT_GroupFillProperties grpFill
        {
            get
            {
                return this.grpFillField;
            }
            set
            {
                this.grpFillField = value;
            }
        }

        [XmlElement(Order = 9)]
        public CT_LineProperties ln
        {
            get
            {
                return this.lnField;
            }
            set
            {
                this.lnField = value;
            }
        }

        [XmlElement(Order = 10)]
        public CT_EffectList effectLst
        {
            get
            {
                return this.effectLstField;
            }
            set
            {
                this.effectLstField = value;
            }
        }

        [XmlElement(Order = 11)]
        public CT_EffectContainer effectDag
        {
            get
            {
                return this.effectDagField;
            }
            set
            {
                this.effectDagField = value;
            }
        }

        [XmlElement(Order = 12)]
        public CT_Scene3D scene3d
        {
            get
            {
                return this.scene3dField;
            }
            set
            {
                this.scene3dField = value;
            }
        }

        [XmlElement(Order = 13)]
        public CT_Shape3D sp3d
        {
            get
            {
                return this.sp3dField;
            }
            set
            {
                this.sp3dField = value;
            }
        }

        [XmlElement(Order = 14)]
        public CT_OfficeArtExtensionList extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }

        [XmlAttribute]
        public ST_BlackWhiteMode bwMode
        {
            get
            {
                return this.bwModeField;
            }
            set
            {
                this.bwModeField = value;
            }
        }
        [XmlIgnore]
        public bool bwModeSpecified
        {
            get { return ST_BlackWhiteMode.none != this.bwModeField; }
        }

        public static CT_ShapeProperties Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_ShapeProperties ctObj = new CT_ShapeProperties();
            if (node.Attributes["bwMode"] != null)
                ctObj.bwMode = (ST_BlackWhiteMode)Enum.Parse(typeof(ST_BlackWhiteMode), node.Attributes["bwMode"].Value);
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "xfrm")
                    ctObj.xfrm = CT_Transform2D.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "custGeom")
                    ctObj.custGeom = CT_CustomGeometry2D.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "prstGeom")
                    ctObj.prstGeom = CT_PresetGeometry2D.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "noFill")
                    ctObj.noFill = new CT_NoFillProperties();
                else if (childNode.LocalName == "solidFill")
                    ctObj.solidFill = CT_SolidColorFillProperties.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "gradFill")
                    ctObj.gradFill = CT_GradientFillProperties.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "blipFill")
                    ctObj.blipFill = CT_BlipFillProperties.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "pattFill")
                    ctObj.pattFill = CT_PatternFillProperties.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "grpFill")
                    ctObj.grpFill = new CT_GroupFillProperties();
                else if (childNode.LocalName == "ln")
                    ctObj.ln = CT_LineProperties.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "effectLst")
                    ctObj.effectLst = CT_EffectList.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "effectDag")
                    ctObj.effectDag = CT_EffectContainer.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "scene3d")
                    ctObj.scene3d = CT_Scene3D.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "sp3d")
                    ctObj.sp3d = CT_Shape3D.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "extLst")
                    ctObj.extLst = CT_OfficeArtExtensionList.Parse(childNode, namespaceManager);
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<c:{0}", nodeName));
            if(this.bwMode!= ST_BlackWhiteMode.none)
                XmlHelper.WriteAttribute(sw, "bwMode", this.bwMode.ToString());
            sw.Write(">");
            if (this.xfrm != null)
                this.xfrm.Write(sw, "a:xfrm");
            if (this.custGeom != null)
                this.custGeom.Write(sw, "custGeom");
            if (this.prstGeom != null)
                this.prstGeom.Write(sw, "prstGeom");
            if (this.noFill != null)
                sw.Write("<a:noFill/>");
            if (this.solidFill != null)
                this.solidFill.Write(sw, "solidFill");
            if (this.gradFill != null)
                this.gradFill.Write(sw, "gradFill");
            if (this.blipFill != null)
                this.blipFill.Write(sw, "a:blipFill");
            if (this.pattFill != null)
                this.pattFill.Write(sw, "pattFill");
            if (this.grpFill != null)
                sw.Write("<a:grpFill/>");
            if (this.ln != null)
                this.ln.Write(sw, "ln");
            if (this.effectLst != null)
                this.effectLst.Write(sw, "effectLst");
            if (this.effectDag != null)
                this.effectDag.Write(sw, "effectDag");
            if (this.scene3d != null)
                this.scene3d.Write(sw, "scene3d");
            if (this.sp3d != null)
                this.sp3d.Write(sw, "sp3d");
            if (this.extLst != null)
                this.extLst.Write(sw, "extLst");
            sw.Write(string.Format("</c:{0}>", nodeName));
        }

    }
}
