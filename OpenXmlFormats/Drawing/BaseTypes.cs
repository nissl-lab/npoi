// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.38967
//    <NameSpace>schemas</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>False</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net20</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>False</GenerateXMLAttributes><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------

using NPOI.OpenXml4Net.Util;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Xml;
using System.Xml.Serialization;

namespace NPOI.OpenXmlFormats.Dml
{

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRootAttribute(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_OfficeArtExtension
    {

        private string anyField; // 1..1

        private string uriField = null;
        private bool uriSpecifiedField;
        [XmlText]
        public string Any
        {
            get
            {
                return this.anyField;
            }
            set
            {
                this.anyField = value;
            }
        }
        [XmlAttribute(DataType = "token")]
        public string uri
        {
            get
            {
                return this.uriField;
            }
            set
            {
                this.uriField = value;
            }
        }

        public bool uriSpecified
        {
            get { return this.uriSpecifiedField; }
            set { this.uriSpecifiedField = value; }
        }

        public static CT_OfficeArtExtension Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_OfficeArtExtension ctObj = new CT_OfficeArtExtension();
            ctObj.uri = XmlHelper.ReadString(node.Attributes["uri"]);
            ctObj.Any = node.InnerXml.Replace(" xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\"","");
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<a:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "uri", this.uri);
            sw.Write(">");
            if (!string.IsNullOrEmpty(this.anyField))
                sw.Write(this.anyField);
            sw.Write(string.Format("</a:{0}>", nodeName));
        }


    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_Angle
    {

        private int valField;
        [XmlAttribute]
        public int val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_PositiveFixedAngle
    {

        private int valField;
        [XmlAttribute]
        public int val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_Percentage
    {

        private int valField;
        [XmlAttribute]
        public int val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_PositivePercentage
    {

        private int valField;
        [XmlAttribute]
        public int val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_FixedPercentage
    {

        private int valField;
        [XmlAttribute]
        public int val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_PositiveFixedPercentage
    {

        private int valField;
        [XmlAttribute]
        public int val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_Ratio
    {

        private long nField;

        private long dField;
        [XmlAttribute]
        public long n
        {
            get
            {
                return this.nField;
            }
            set
            {
                this.nField = value;
            }
        }
        [XmlAttribute]
        public long d
        {
            get
            {
                return this.dField;
            }
            set
            {
                this.dField = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_Point2D
    {

        private long xField;

        private long yField;

        private string name;

        public static CT_Point2D Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_Point2D ctObj = new CT_Point2D();
            ctObj.name = node.Name;
            ctObj.x = XmlHelper.ReadLong(node.Attributes["x"]);
            ctObj.y = XmlHelper.ReadLong(node.Attributes["y"]);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            if (name == null)
                sw.Write(string.Format("<a:{0}", nodeName));
            else
                sw.Write(string.Format("<{0}", name));

            XmlHelper.WriteAttribute(sw, "x", this.x, true);
            XmlHelper.WriteAttribute(sw, "y", this.y, true);
            sw.Write("/>");
        }


        [XmlAttribute]
        public long x
        {
            get
            {
                return this.xField;
            }
            set
            {
                this.xField = value;
            }
        }
        [XmlAttribute]
        public long y
        {
            get
            {
                return this.yField;
            }
            set
            {
                this.yField = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_PositiveSize2D
    {

        private long cxField;

        private long cyField;
        public static CT_PositiveSize2D Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_PositiveSize2D ctObj = new CT_PositiveSize2D();
            ctObj.cx = XmlHelper.ReadLong(node.Attributes["cx"]);
            ctObj.cy = XmlHelper.ReadLong(node.Attributes["cy"]);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "cx", this.cx, true);
            XmlHelper.WriteAttribute(sw, "cy", this.cy, true);
            sw.Write("/>");
        }

        [XmlAttribute]
        public long cx
        {
            get
            {
                return this.cxField;
            }
            set
            {
                this.cxField = value;
            }
        }
        [XmlAttribute]
        public long cy
        {
            get
            {
                return this.cyField;
            }
            set
            {
                this.cyField = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_ComplementTransform
    {
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_InverseTransform
    {
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_GrayscaleTransform
    {
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_GammaTransform
    {
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_InverseGammaTransform
    {
    }
    
    [Serializable]

    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_ScRgbColor
    {

        private List<string> itemsValueField;

        private List<EG_ColorTransform> itemsElementNameField;

        private int rField;

        private int gField;

        private int bField;

        public CT_ScRgbColor()
        {
            this.itemsElementNameField = new List<EG_ColorTransform>();
            this.itemsValueField = new List<string>();
        }
        public static CT_ScRgbColor Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_ScRgbColor ctObj = new CT_ScRgbColor();
            ctObj.r = XmlHelper.ReadInt(node.Attributes["r"]);
            ctObj.g = XmlHelper.ReadInt(node.Attributes["g"]);
            ctObj.b = XmlHelper.ReadInt(node.Attributes["b"]);
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "alpha")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.alpha);
                else if (childNode.LocalName == "alphaMod")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.alphaMod);
                else if (childNode.LocalName == "alphaOff")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.alphaOff);
                else if (childNode.LocalName == "blue")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.blue);
                else if (childNode.LocalName == "blueMod")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.blueMod);
                else if (childNode.LocalName == "blueOff")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.blueOff);
                else if (childNode.LocalName == "comp")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.comp);
                else if (childNode.LocalName == "gamma")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.gamma);
                else if (childNode.LocalName == "gray")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.gray);
                else if (childNode.LocalName == "green")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.green);
                else if (childNode.LocalName == "greenMod")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.greenMod);
                else if (childNode.LocalName == "greenOff")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.greenOff);
                else if (childNode.LocalName == "hue")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.hue);
                else if (childNode.LocalName == "hueMod")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.hueMod);
                else if (childNode.LocalName == "hueOff")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.hueOff);
                else if (childNode.LocalName == "inv")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.inv);
                else if (childNode.LocalName == "invGamma")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.invGamma);
                else if (childNode.LocalName == "lum")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.lum);
                else if (childNode.LocalName == "lumMod")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.lumMod);
                else if (childNode.LocalName == "lumOff")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.lumOff);
                else if (childNode.LocalName == "red")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.red);
                else if (childNode.LocalName == "redMod")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.redMod);
                else if (childNode.LocalName == "redOff")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.redOff);
                else if (childNode.LocalName == "sat")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.sat);
                else if (childNode.LocalName == "satMod")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.satMod);
                else if (childNode.LocalName == "satOff")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.satOff);
                else if (childNode.LocalName == "shade")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.shade);
                else if (childNode.LocalName == "tint")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.tint);

                if (childNode.Attributes["val"] != null)
                    ctObj.itemsValueField.Add(childNode.Attributes["val"].Value);
                else
                    ctObj.itemsValueField.Add(null);
            }
            return ctObj;
        }


        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<a:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "r", this.r, true);
            XmlHelper.WriteAttribute(sw, "g", this.g, true);
            XmlHelper.WriteAttribute(sw, "b", this.b, true);
            sw.Write(">");
            if (this.ItemsElementName != null)
            {
                for (int i = 0; i < itemsElementNameField.Count; i++)
                {
                    EG_ColorTransform x = itemsElementNameField[i];
                    string value = itemsValueField[i];

                    sw.Write(string.Format("<a:{0}", x));
                    if (value != null)
                        sw.Write(" val=\"" + value + "\"");
                    sw.Write("/>");
                }
            }
            sw.Write(string.Format("</a:{0}>", nodeName));
        }

        [XmlIgnore]
        public List<EG_ColorTransform> ItemsElementName
        {
            get
            {
                return this.itemsElementNameField;
            }
            set
            {
               this.itemsElementNameField = value;
            }
        }

        [XmlAttribute]
        public int r
        {
            get
            {
                return this.rField;
            }
            set
            {
                this.rField = value;
            }
        }

        [XmlAttribute]
        public int g
        {
            get
            {
                return this.gField;
            }
            set
            {
                this.gField = value;
            }
        }

        [XmlAttribute]
        public int b
        {
            get
            {
                return this.bField;
            }
            set
            {
                this.bField = value;
            }
        }
    }


    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IncludeInSchema = false)]
    public enum EG_ColorTransform
    {

        /// <remarks/>
        alpha,

        /// <remarks/>
        alphaMod,

        /// <remarks/>
        alphaOff,

        /// <remarks/>
        blue,

        /// <remarks/>
        blueMod,

        /// <remarks/>
        blueOff,

        /// <remarks/>
        comp,

        /// <remarks/>
        gamma,

        /// <remarks/>
        gray,

        /// <remarks/>
        green,

        /// <remarks/>
        greenMod,

        /// <remarks/>
        greenOff,

        /// <remarks/>
        hue,

        /// <remarks/>
        hueMod,

        /// <remarks/>
        hueOff,

        /// <remarks/>
        inv,

        /// <remarks/>
        invGamma,

        /// <remarks/>
        lum,

        /// <remarks/>
        lumMod,

        /// <remarks/>
        lumOff,

        /// <remarks/>
        red,

        /// <remarks/>
        redMod,

        /// <remarks/>
        redOff,

        /// <remarks/>
        sat,

        /// <remarks/>
        satMod,

        /// <remarks/>
        satOff,

        /// <remarks/>
        shade,

        /// <remarks/>
        tint,
    }


    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_SRgbColor
    {
        private List<string> itemsValueField;
        private List<EG_ColorTransform> itemsElementNameField;

        private byte[] valField;

        public CT_SRgbColor()
        {
            this.itemsElementNameField = new List<EG_ColorTransform>();
            this.itemsValueField = new List<string>();
        }

        [XmlIgnore]
        public List<EG_ColorTransform> ItemsElementName
        {
            get
            {
                return this.itemsElementNameField;
            }
            set
            {
                this.itemsElementNameField = value;
            }
        }

        [XmlAttribute(DataType = "hexBinary")]
        public byte[] val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }

        public static CT_SRgbColor Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_SRgbColor ctObj = new CT_SRgbColor();
            ctObj.val = XmlHelper.ReadBytes(node.Attributes["val"]);
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "alpha")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.alpha);
                else if (childNode.LocalName == "alphaMod")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.alphaMod);
                else if (childNode.LocalName == "alphaOff")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.alphaOff);
                else if (childNode.LocalName == "blue")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.blue);
                else if (childNode.LocalName == "blueMod")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.blueMod);
                else if (childNode.LocalName == "blueOff")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.blueOff);
                else if (childNode.LocalName == "comp")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.comp);
                else if (childNode.LocalName == "gamma")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.gamma);
                else if (childNode.LocalName == "gray")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.gray);
                else if (childNode.LocalName == "green")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.green);
                else if (childNode.LocalName == "greenMod")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.greenMod);
                else if (childNode.LocalName == "greenOff")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.greenOff);
                else if (childNode.LocalName == "hue")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.hue);
                else if (childNode.LocalName == "hueMod")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.hueMod);
                else if (childNode.LocalName == "hueOff")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.hueOff);
                else if (childNode.LocalName == "inv")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.inv);
                else if (childNode.LocalName == "invGamma")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.invGamma);
                else if (childNode.LocalName == "lum")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.lum);
                else if (childNode.LocalName == "lumMod")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.lumMod);
                else if (childNode.LocalName == "lumOff")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.lumOff);
                else if (childNode.LocalName == "red")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.red);
                else if (childNode.LocalName == "redMod")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.redMod);
                else if (childNode.LocalName == "redOff")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.redOff);
                else if (childNode.LocalName == "sat")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.sat);
                else if (childNode.LocalName == "satMod")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.satMod);
                else if (childNode.LocalName == "satOff")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.satOff);
                else if (childNode.LocalName == "shade")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.shade);
                else if (childNode.LocalName == "tint")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.tint);

                if (childNode.Attributes["val"] != null)
                    ctObj.itemsValueField.Add(childNode.Attributes["val"].Value);
                else
                    ctObj.itemsValueField.Add(null);
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<a:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "val", this.val);


            if (this.ItemsElementName.Count>0)
            {
                sw.Write(">");
                for (int i = 0; i < itemsElementNameField.Count; i++)
                {
                    EG_ColorTransform x = itemsElementNameField[i];
                    string value = itemsValueField[i];

                    sw.Write(string.Format("<a:{0}", x));
                    if (value != null)
                        sw.Write(" val=\"" + value + "\"");
                    sw.Write("/>");
                }
                sw.Write(string.Format("</a:{0}>", nodeName));
            }
            else
            {
                sw.Write("/>");
            }
            
        }

    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_HslColor
    {

        private List<string> itemsValueField;

        private List<EG_ColorTransform> itemsElementNameField;

        private int hueField;

        private int satField;

        private int lumField;

        public CT_HslColor()
        {
            this.itemsElementNameField = new List<EG_ColorTransform>();
            this.itemsValueField = new List<string>();
        }

        [XmlElement("ItemsElementName", Order = 1)]
        [XmlIgnore]
        public List<EG_ColorTransform> ItemsElementName
        {
            get
            {
                return this.itemsElementNameField;
            }
            set
            {
                this.itemsElementNameField = value;
            }
        }

        [XmlAttribute]
        public int hue
        {
            get
            {
                return this.hueField;
            }
            set
            {
                this.hueField = value;
            }
        }

        [XmlAttribute]
        public int sat
        {
            get
            {
                return this.satField;
            }
            set
            {
                this.satField = value;
            }
        }

        [XmlAttribute]
        public int lum
        {
            get
            {
                return this.lumField;
            }
            set
            {
                this.lumField = value;
            }
        }

        public static CT_HslColor Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_HslColor ctObj = new CT_HslColor();
            ctObj.hue = XmlHelper.ReadInt(node.Attributes["hue"]);
            ctObj.sat = XmlHelper.ReadInt(node.Attributes["sat"]);
            ctObj.lum = XmlHelper.ReadInt(node.Attributes["lum"]);
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "alpha")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.alpha);
                else if (childNode.LocalName == "alphaMod")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.alphaMod);
                else if (childNode.LocalName == "alphaOff")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.alphaOff);
                else if (childNode.LocalName == "blue")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.blue);
                else if (childNode.LocalName == "blueMod")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.blueMod);
                else if (childNode.LocalName == "blueOff")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.blueOff);
                else if (childNode.LocalName == "comp")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.comp);
                else if (childNode.LocalName == "gamma")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.gamma);
                else if (childNode.LocalName == "gray")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.gray);
                else if (childNode.LocalName == "green")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.green);
                else if (childNode.LocalName == "greenMod")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.greenMod);
                else if (childNode.LocalName == "greenOff")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.greenOff);
                else if (childNode.LocalName == "hue")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.hue);
                else if (childNode.LocalName == "hueMod")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.hueMod);
                else if (childNode.LocalName == "hueOff")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.hueOff);
                else if (childNode.LocalName == "inv")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.inv);
                else if (childNode.LocalName == "invGamma")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.invGamma);
                else if (childNode.LocalName == "lum")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.lum);
                else if (childNode.LocalName == "lumMod")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.lumMod);
                else if (childNode.LocalName == "lumOff")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.lumOff);
                else if (childNode.LocalName == "red")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.red);
                else if (childNode.LocalName == "redMod")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.redMod);
                else if (childNode.LocalName == "redOff")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.redOff);
                else if (childNode.LocalName == "sat")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.sat);
                else if (childNode.LocalName == "satMod")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.satMod);
                else if (childNode.LocalName == "satOff")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.satOff);
                else if (childNode.LocalName == "shade")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.shade);
                else if (childNode.LocalName == "tint")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.tint);

                if (childNode.Attributes["val"] != null)
                    ctObj.itemsValueField.Add(childNode.Attributes["val"].Value);
                else
                    ctObj.itemsValueField.Add(null);
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<a:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "hue", this.hue);
            XmlHelper.WriteAttribute(sw, "sat", this.sat);
            XmlHelper.WriteAttribute(sw, "lum", this.lum);

            if (this.ItemsElementName.Count>0)
            {
                sw.Write(">");
                for (int i = 0; i < itemsElementNameField.Count; i++)
                {
                    EG_ColorTransform x = itemsElementNameField[i];
                    string value = itemsValueField[i];

                    sw.Write(string.Format("<a:{0}", x));
                    if (value != null)
                        sw.Write(" val=\"" + value + "\"");
                    sw.Write("/>");
                }
                sw.Write(string.Format("</a:{0}>", nodeName));
            }
            else
            {
                sw.Write("/>");
            }
        }

    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_SystemColor
    {

        private List<string> itemsValueField;

        private List<EG_ColorTransform> itemsElementNameField;

        private ST_SystemColorVal valField;

        private byte[] lastClrField;
        private bool lastClrFieldSpecified;

        public CT_SystemColor()
        {
            this.ItemsElementName = new List<EG_ColorTransform>();
            this.itemsValueField = new List<string>();
        }

        public static CT_SystemColor Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_SystemColor ctObj = new CT_SystemColor();
            if (node.Attributes["val"] != null)
                ctObj.val = (ST_SystemColorVal)Enum.Parse(typeof(ST_SystemColorVal), node.Attributes["val"].Value);
            ctObj.lastClrFieldSpecified = node.Attributes["lastClr"] != null;
            ctObj.lastClr = XmlHelper.ReadBytes(node.Attributes["lastClr"]);

            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "alpha")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.alpha);
                else if (childNode.LocalName == "alphaMod")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.alphaMod);
                else if (childNode.LocalName == "alphaOff")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.alphaOff);
                else if (childNode.LocalName == "blue")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.blue);
                else if (childNode.LocalName == "blueMod")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.blueMod);
                else if (childNode.LocalName == "blueOff")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.blueOff);
                else if (childNode.LocalName == "comp")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.comp);
                else if (childNode.LocalName == "gamma")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.gamma);
                else if (childNode.LocalName == "gray")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.gray);
                else if (childNode.LocalName == "green")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.green);
                else if (childNode.LocalName == "greenMod")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.greenMod);
                else if (childNode.LocalName == "greenOff")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.greenOff);
                else if (childNode.LocalName == "hue")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.hue);
                else if (childNode.LocalName == "hueMod")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.hueMod);
                else if (childNode.LocalName == "hueOff")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.hueOff);
                else if (childNode.LocalName == "inv")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.inv);
                else if (childNode.LocalName == "invGamma")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.invGamma);
                else if (childNode.LocalName == "lum")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.lum);
                else if (childNode.LocalName == "lumMod")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.lumMod);
                else if (childNode.LocalName == "lumOff")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.lumOff);
                else if (childNode.LocalName == "red")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.red);
                else if (childNode.LocalName == "redMod")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.redMod);
                else if (childNode.LocalName == "redOff")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.redOff);
                else if (childNode.LocalName == "sat")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.sat);
                else if (childNode.LocalName == "satMod")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.satMod);
                else if (childNode.LocalName == "satOff")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.satOff);
                else if (childNode.LocalName == "shade")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.shade);
                else if (childNode.LocalName == "tint")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.tint);

                if (childNode.Attributes["val"]!=null)
                    ctObj.itemsValueField.Add(childNode.Attributes["val"].Value);
                else
                    ctObj.itemsValueField.Add(null);
            }
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<a:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "val", this.val.ToString());
            if(lastClrFieldSpecified)
                XmlHelper.WriteAttribute(sw, "lastClr", this.lastClr);
            if (this.ItemsElementName.Count > 0)
            {
                sw.Write(">");
                for (int i = 0; i < itemsElementNameField.Count; i++)
                {
                    EG_ColorTransform x = itemsElementNameField[i];
                    string value = itemsValueField[i];

                    sw.Write(string.Format("<a:{0}", x));
                    if (value != null)
                        sw.Write(" val=\"" + value + "\"");
                    sw.Write("/>");
                }
                sw.Write(string.Format("</a:{0}>", nodeName));
            }
            else
            {
                sw.Write(string.Format("/>", nodeName));
            }
        }

        [XmlIgnore]
        public List<EG_ColorTransform> ItemsElementName
        {
            get
            {
                return this.itemsElementNameField;
            }
            set
            {
                this.itemsElementNameField = value;
            }
        }

        [XmlAttribute]
        public ST_SystemColorVal val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }

        [XmlAttribute(DataType = "hexBinary")]
        public byte[] lastClr
        {
            get
            {
                return this.lastClrField;
            }
            set
            {
                this.lastClrSpecified = true;
                this.lastClrField = value;
            }
        }

        public bool lastClrSpecified
        {
            get { return this.lastClrFieldSpecified; }
            set { this.lastClrFieldSpecified = value; }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    public enum ST_SystemColorVal
    {

        /// <remarks/>
        scrollBar,

        /// <remarks/>
        background,

        /// <remarks/>
        activeCaption,

        /// <remarks/>
        inactiveCaption,

        /// <remarks/>
        menu,

        /// <remarks/>
        window,

        /// <remarks/>
        windowFrame,

        /// <remarks/>
        menuText,

        /// <remarks/>
        windowText,

        /// <remarks/>
        captionText,

        /// <remarks/>
        activeBorder,

        /// <remarks/>
        inactiveBorder,

        /// <remarks/>
        appWorkspace,

        /// <remarks/>
        highlight,

        /// <remarks/>
        highlightText,

        /// <remarks/>
        btnFace,

        /// <remarks/>
        btnShadow,

        /// <remarks/>
        grayText,

        /// <remarks/>
        btnText,

        /// <remarks/>
        inactiveCaptionText,

        /// <remarks/>
        btnHighlight,

        /// <remarks/>
        [XmlEnum("3dDkShadow")]
        x3dDkShadow,

        /// <remarks/>
        [XmlEnum("3dLight")]
        x3dLight,

        /// <remarks/>
        infoText,

        /// <remarks/>
        infoBk,

        /// <remarks/>
        hotLight,

        /// <remarks/>
        gradientActiveCaption,

        /// <remarks/>
        gradientInactiveCaption,

        /// <remarks/>
        menuHighlight,

        /// <remarks/>
        menuBar,
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_SchemeColor
    {
        private List<string> itemsValueField;
        private List<EG_ColorTransform> itemsElementNameField;

        private ST_SchemeColorVal valField;

        public CT_SchemeColor()
        {
            this.itemsElementNameField = new List<EG_ColorTransform>();
            this.itemsValueField = new List<string>();
        }

        public CT_PositiveFixedPercentage AddNewShade()
        {
            CT_PositiveFixedPercentage obj = new CT_PositiveFixedPercentage();
            this.itemsElementNameField.Add(EG_ColorTransform.shade);
            this.itemsValueField.Add(null);
            return obj;
        }

        public void AddNewLum(int dpIndex)
        {
            var accentsLoopIndex = dpIndex / 6;
            //modValue and offValue allows to set custom tint on accent color
            //in such a way we can get unique colors for each pie sector.
            if (accentsLoopIndex != 0)
            {
                var modValue = 10000 * new Random().Next(2, 9);
                var offValue = 10000 * new Random().Next(1, 5);
                itemsElementNameField.Add(EG_ColorTransform.lumMod);
                itemsValueField.Add(modValue.ToString());
                itemsElementNameField.Add(EG_ColorTransform.lumOff);
                itemsValueField.Add(offValue.ToString());
            }
        }

        public static CT_SchemeColor Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_SchemeColor ctObj = new CT_SchemeColor();
            if (node.Attributes["val"] != null)
                ctObj.val = (ST_SchemeColorVal)Enum.Parse(typeof(ST_SchemeColorVal), node.Attributes["val"].Value);
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "alpha")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.alpha);
                else if (childNode.LocalName == "alphaMod")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.alphaMod);
                else if (childNode.LocalName == "alphaOff")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.alphaOff);
                else if (childNode.LocalName == "blue")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.blue);
                else if (childNode.LocalName == "blueMod")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.blueMod);
                else if (childNode.LocalName == "blueOff")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.blueOff);
                else if (childNode.LocalName == "comp")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.comp);
                else if (childNode.LocalName == "gamma")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.gamma);
                else if (childNode.LocalName == "gray")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.gray);
                else if (childNode.LocalName == "green")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.green);
                else if (childNode.LocalName == "greenMod")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.greenMod);
                else if (childNode.LocalName == "greenOff")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.greenOff);
                else if (childNode.LocalName == "hue")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.hue);
                else if (childNode.LocalName == "hueMod")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.hueMod);
                else if (childNode.LocalName == "hueOff")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.hueOff);
                else if (childNode.LocalName == "inv")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.inv);
                else if (childNode.LocalName == "invGamma")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.invGamma);
                else if (childNode.LocalName == "lum")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.lum);
                else if (childNode.LocalName == "lumMod")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.lumMod);
                else if (childNode.LocalName == "lumOff")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.lumOff);
                else if (childNode.LocalName == "red")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.red);
                else if (childNode.LocalName == "redMod")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.redMod);
                else if (childNode.LocalName == "redOff")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.redOff);
                else if (childNode.LocalName == "sat")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.sat);
                else if (childNode.LocalName == "satMod")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.satMod);
                else if (childNode.LocalName == "satOff")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.satOff);
                else if (childNode.LocalName == "shade")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.shade);
                else if (childNode.LocalName == "tint")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.tint);

                if (childNode.Attributes["val"] != null)
                    ctObj.itemsValueField.Add(childNode.Attributes["val"].Value);
                else
                    ctObj.itemsValueField.Add(null);
            }
            return ctObj;
        }


        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<a:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "val", this.val.ToString());

            if (this.ItemsElementName.Count>0)
            {
                sw.Write(">");
                for (int i = 0; i < itemsElementNameField.Count; i++)
                {
                    EG_ColorTransform x = itemsElementNameField[i];
                    string value = itemsValueField[i];

                    sw.Write(string.Format("<a:{0}", x));
                    if (value != null)
                        sw.Write(" val=\"" + value + "\"");
                    sw.Write("/>");
                }
                sw.Write(string.Format("</a:{0}>", nodeName));
            }
            else
            {
                sw.Write("/>");
            }
        }

        [XmlIgnore]
        public List<EG_ColorTransform> ItemsElementName
        {
            get
            {
                return this.itemsElementNameField;
            }
            set
            {
                this.itemsElementNameField = value;
            }
        }
        [XmlAttribute]
        public ST_SchemeColorVal val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
    }


    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    public enum ST_SchemeColorVal
    {

        /// <remarks/>
        bg1,

        /// <remarks/>
        tx1,

        /// <remarks/>
        bg2,

        /// <remarks/>
        tx2,

        /// <remarks/>
        accent1,

        /// <remarks/>
        accent2,

        /// <remarks/>
        accent3,

        /// <remarks/>
        accent4,

        /// <remarks/>
        accent5,

        /// <remarks/>
        accent6,

        /// <remarks/>
        hlink,

        /// <remarks/>
        folHlink,

        /// <remarks/>
        phClr,

        /// <remarks/>
        dk1,

        /// <remarks/>
        lt1,

        /// <remarks/>
        dk2,

        /// <remarks/>
        lt2,
    }


    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_PresetColor
    {
        private List<string> itemsValueField;
        private List<EG_ColorTransform> itemsElementNameField;

        private ST_PresetColorVal valField;

        private bool valFieldSpecified;

        public CT_PresetColor()
        {
            this.itemsElementNameField = new List<EG_ColorTransform>();
            this.itemsValueField = new List<string>();
        }

        [XmlIgnore]
        public List<EG_ColorTransform> ItemsElementName
        {
            get
            {
                return this.itemsElementNameField;
            }
            set
            {
               this.itemsElementNameField = value;
            }
        }

        [XmlAttribute]
        public ST_PresetColorVal val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valFieldSpecified = true;
                this.valField = value;
            }
        }

        [XmlIgnore]
        public bool valSpecified
        {
            get
            {
                return this.valFieldSpecified;
            }
            set
            {
                this.valFieldSpecified = value;
            }
        }

        public static CT_PresetColor Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_PresetColor ctObj = new CT_PresetColor();
            ctObj.valSpecified = node.Attributes["val"] != null;
            if (node.Attributes["val"] != null)
                ctObj.val = (ST_PresetColorVal)Enum.Parse(typeof(ST_PresetColorVal), node.Attributes["val"].Value);
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "alpha")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.alpha);
                else if (childNode.LocalName == "alphaMod")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.alphaMod);
                else if (childNode.LocalName == "alphaOff")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.alphaOff);
                else if (childNode.LocalName == "blue")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.blue);
                else if (childNode.LocalName == "blueMod")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.blueMod);
                else if (childNode.LocalName == "blueOff")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.blueOff);
                else if (childNode.LocalName == "comp")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.comp);
                else if (childNode.LocalName == "gamma")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.gamma);
                else if (childNode.LocalName == "gray")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.gray);
                else if (childNode.LocalName == "green")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.green);
                else if (childNode.LocalName == "greenMod")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.greenMod);
                else if (childNode.LocalName == "greenOff")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.greenOff);
                else if (childNode.LocalName == "hue")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.hue);
                else if (childNode.LocalName == "hueMod")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.hueMod);
                else if (childNode.LocalName == "hueOff")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.hueOff);
                else if (childNode.LocalName == "inv")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.inv);
                else if (childNode.LocalName == "invGamma")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.invGamma);
                else if (childNode.LocalName == "lum")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.lum);
                else if (childNode.LocalName == "lumMod")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.lumMod);
                else if (childNode.LocalName == "lumOff")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.lumOff);
                else if (childNode.LocalName == "red")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.red);
                else if (childNode.LocalName == "redMod")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.redMod);
                else if (childNode.LocalName == "redOff")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.redOff);
                else if (childNode.LocalName == "sat")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.sat);
                else if (childNode.LocalName == "satMod")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.satMod);
                else if (childNode.LocalName == "satOff")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.satOff);
                else if (childNode.LocalName == "shade")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.shade);
                else if (childNode.LocalName == "tint")
                    ctObj.ItemsElementName.Add(EG_ColorTransform.tint);

                if (childNode.Attributes["val"] != null)
                    ctObj.itemsValueField.Add(childNode.Attributes["val"].Value);
                else
                    ctObj.itemsValueField.Add(null);
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<a:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "val", this.val.ToString());

            if (this.ItemsElementName.Count > 0)
            {
                sw.Write(">");
                for (int i = 0; i < itemsElementNameField.Count; i++)
                {
                    EG_ColorTransform x = itemsElementNameField[i];
                    string value = itemsValueField[i];

                    sw.Write(string.Format("<a:{0}", x));
                    if (value != null)
                        sw.Write(" val=\"" + value + "\"");
                    sw.Write("/>");
                }
                sw.Write(string.Format("</a:{0}>", nodeName));
            }
            else
            {
                sw.Write("/>");
            }
            
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    public enum ST_PresetColorVal
    {

        /// <remarks/>
        aliceBlue,

        /// <remarks/>
        antiqueWhite,

        /// <remarks/>
        aqua,

        /// <remarks/>
        aquamarine,

        /// <remarks/>
        azure,

        /// <remarks/>
        beige,

        /// <remarks/>
        bisque,

        /// <remarks/>
        black,

        /// <remarks/>
        blanchedAlmond,

        /// <remarks/>
        blue,

        /// <remarks/>
        blueViolet,

        /// <remarks/>
        brown,

        /// <remarks/>
        burlyWood,

        /// <remarks/>
        cadetBlue,

        /// <remarks/>
        chartreuse,

        /// <remarks/>
        chocolate,

        /// <remarks/>
        coral,

        /// <remarks/>
        cornflowerBlue,

        /// <remarks/>
        cornsilk,

        /// <remarks/>
        crimson,

        /// <remarks/>
        cyan,

        /// <remarks/>
        dkBlue,

        /// <remarks/>
        dkCyan,

        /// <remarks/>
        dkGoldenrod,

        /// <remarks/>
        dkGray,

        /// <remarks/>
        dkGreen,

        /// <remarks/>
        dkKhaki,

        /// <remarks/>
        dkMagenta,

        /// <remarks/>
        dkOliveGreen,

        /// <remarks/>
        dkOrange,

        /// <remarks/>
        dkOrchid,

        /// <remarks/>
        dkRed,

        /// <remarks/>
        dkSalmon,

        /// <remarks/>
        dkSeaGreen,

        /// <remarks/>
        dkSlateBlue,

        /// <remarks/>
        dkSlateGray,

        /// <remarks/>
        dkTurquoise,

        /// <remarks/>
        dkViolet,

        /// <remarks/>
        deepPink,

        /// <remarks/>
        deepSkyBlue,

        /// <remarks/>
        dimGray,

        /// <remarks/>
        dodgerBlue,

        /// <remarks/>
        firebrick,

        /// <remarks/>
        floralWhite,

        /// <remarks/>
        forestGreen,

        /// <remarks/>
        fuchsia,

        /// <remarks/>
        gainsboro,

        /// <remarks/>
        ghostWhite,

        /// <remarks/>
        gold,

        /// <remarks/>
        goldenrod,

        /// <remarks/>
        gray,

        /// <remarks/>
        green,

        /// <remarks/>
        greenYellow,

        /// <remarks/>
        honeydew,

        /// <remarks/>
        hotPink,

        /// <remarks/>
        indianRed,

        /// <remarks/>
        indigo,

        /// <remarks/>
        ivory,

        /// <remarks/>
        khaki,

        /// <remarks/>
        lavender,

        /// <remarks/>
        lavenderBlush,

        /// <remarks/>
        lawnGreen,

        /// <remarks/>
        lemonChiffon,

        /// <remarks/>
        ltBlue,

        /// <remarks/>
        ltCoral,

        /// <remarks/>
        ltCyan,

        /// <remarks/>
        ltGoldenrodYellow,

        /// <remarks/>
        ltGray,

        /// <remarks/>
        ltGreen,

        /// <remarks/>
        ltPink,

        /// <remarks/>
        ltSalmon,

        /// <remarks/>
        ltSeaGreen,

        /// <remarks/>
        ltSkyBlue,

        /// <remarks/>
        ltSlateGray,

        /// <remarks/>
        ltSteelBlue,

        /// <remarks/>
        ltYellow,

        /// <remarks/>
        lime,

        /// <remarks/>
        limeGreen,

        /// <remarks/>
        linen,

        /// <remarks/>
        magenta,

        /// <remarks/>
        maroon,

        /// <remarks/>
        medAquamarine,

        /// <remarks/>
        medBlue,

        /// <remarks/>
        medOrchid,

        /// <remarks/>
        medPurple,

        /// <remarks/>
        medSeaGreen,

        /// <remarks/>
        medSlateBlue,

        /// <remarks/>
        medSpringGreen,

        /// <remarks/>
        medTurquoise,

        /// <remarks/>
        medVioletRed,

        /// <remarks/>
        midnightBlue,

        /// <remarks/>
        mintCream,

        /// <remarks/>
        mistyRose,

        /// <remarks/>
        moccasin,

        /// <remarks/>
        navajoWhite,

        /// <remarks/>
        navy,

        /// <remarks/>
        oldLace,

        /// <remarks/>
        olive,

        /// <remarks/>
        oliveDrab,

        /// <remarks/>
        orange,

        /// <remarks/>
        orangeRed,

        /// <remarks/>
        orchid,

        /// <remarks/>
        paleGoldenrod,

        /// <remarks/>
        paleGreen,

        /// <remarks/>
        paleTurquoise,

        /// <remarks/>
        paleVioletRed,

        /// <remarks/>
        papayaWhip,

        /// <remarks/>
        peachPuff,

        /// <remarks/>
        peru,

        /// <remarks/>
        pink,

        /// <remarks/>
        plum,

        /// <remarks/>
        powderBlue,

        /// <remarks/>
        purple,

        /// <remarks/>
        red,

        /// <remarks/>
        rosyBrown,

        /// <remarks/>
        royalBlue,

        /// <remarks/>
        saddleBrown,

        /// <remarks/>
        salmon,

        /// <remarks/>
        sandyBrown,

        /// <remarks/>
        seaGreen,

        /// <remarks/>
        seaShell,

        /// <remarks/>
        sienna,

        /// <remarks/>
        silver,

        /// <remarks/>
        skyBlue,

        /// <remarks/>
        slateBlue,

        /// <remarks/>
        slateGray,

        /// <remarks/>
        snow,

        /// <remarks/>
        springGreen,

        /// <remarks/>
        steelBlue,

        /// <remarks/>
        tan,

        /// <remarks/>
        teal,

        /// <remarks/>
        thistle,

        /// <remarks/>
        tomato,

        /// <remarks/>
        turquoise,

        /// <remarks/>
        violet,

        /// <remarks/>
        wheat,

        /// <remarks/>
        white,

        /// <remarks/>
        whiteSmoke,

        /// <remarks/>
        yellow,

        /// <remarks/>
        yellowGreen,
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_OfficeArtExtensionList
    {

        private List<CT_OfficeArtExtension> extField;

        public CT_OfficeArtExtensionList()
        {
            this.extField = new List<CT_OfficeArtExtension>();
        }
        public static CT_OfficeArtExtensionList Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_OfficeArtExtensionList ctObj = new CT_OfficeArtExtensionList();
            ctObj.ext = new List<CT_OfficeArtExtension>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "ext")
                    ctObj.ext.Add(CT_OfficeArtExtension.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<a:{0}", nodeName));
            sw.Write(">");
            if (this.ext != null)
            {
                foreach (CT_OfficeArtExtension x in this.ext)
                {
                    x.Write(sw, "ext");
                }
            }
            sw.Write(string.Format("</a:{0}>", nodeName));
        }

        [XmlElement("ext", Order = 0)]
        public List<CT_OfficeArtExtension> ext
        {
            get
            {
                return this.extField;
            }
            set
            {
                this.extField = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_Scale2D
    {

        private CT_Ratio sxField;

        private CT_Ratio syField;

        public CT_Scale2D()
        {
            this.syField = new CT_Ratio();
            this.sxField = new CT_Ratio();
        }

        [XmlElement(Order = 0)]
        public CT_Ratio sx
        {
            get
            {
                return this.sxField;
            }
            set
            {
                this.sxField = value;
            }
        }

        [XmlElement(Order = 1)]
        public CT_Ratio sy
        {
            get
            {
                return this.syField;
            }
            set
            {
                this.syField = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_Transform2D
    {

        private CT_Point2D offField = null;

        private CT_PositiveSize2D extField = null;

        private int rotField;
        private bool rotFieldSpecified;

        private bool flipHField;
        private bool flipHFieldSpecified;

        private bool flipVField;
        private bool flipVFieldSpecified;
        public static CT_Transform2D Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_Transform2D ctObj = new CT_Transform2D();
            
            ctObj.rotFieldSpecified = node.Attributes["rot"] != null;
            if(ctObj.rotFieldSpecified)
                ctObj.rotField = XmlHelper.ReadInt(node.Attributes["rot"]);

            ctObj.flipHFieldSpecified = node.Attributes["flipH"] != null;
            if(ctObj.flipHFieldSpecified)
                ctObj.flipH = XmlHelper.ReadBool(node.Attributes["flipH"]);

            ctObj.flipVFieldSpecified = node.Attributes["flipV"] != null;
            if(ctObj.flipVFieldSpecified)
                ctObj.flipV = XmlHelper.ReadBool(node.Attributes["flipV"]);

            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "off")
                    ctObj.off = CT_Point2D.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "ext")
                    ctObj.ext = CT_PositiveSize2D.Parse(childNode, namespaceManager);
            }
            return ctObj;
        }


        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            if(this.rotFieldSpecified)
                XmlHelper.WriteAttribute(sw, "rot", this.rot);
            if(this.flipHFieldSpecified)
                XmlHelper.WriteAttribute(sw, "flipH", this.flipH, false);
            if(this.flipVFieldSpecified)
                XmlHelper.WriteAttribute(sw, "flipV", this.flipV,false);
            sw.Write(">");
            if (this.off != null)
                this.off.Write(sw, "off");
            if (this.ext != null)
                this.ext.Write(sw, "a:ext");
            sw.Write(string.Format("</{0}>", nodeName));
        }


        public CT_PositiveSize2D AddNewExt()
        {
            this.extField = new CT_PositiveSize2D();
            return this.extField;
        }
        public CT_Point2D AddNewOff()
        {
            this.offField = new CT_Point2D();
            return this.offField;
        }

        public bool IsSetOff()
        {
            return this.offField != null;
        }

        public void UnsetOff()
        {
            this.offField = null;
        }

        public bool IsSetExt()
        {
            return this.ext != null;
        }

        public void UnsetExt()
        {
            this.ext = null;
        }

        [XmlElement(Order = 0)]
        public CT_Point2D off
        {
            get
            {
                return this.offField;
            }
            set
            {
                this.offField = value;
            }
        }

        [XmlElement(Order = 1)]
        public CT_PositiveSize2D ext
        {
            get
            {
                return this.extField;
            }
            set
            {
                this.extField = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(0)]
        public int rot
        {
            get
            {
                return rotField;
            }
            set
            {
                this.rotField = value;
            }
        }

        [XmlIgnore]
        public bool rotSpecified
        {
            get
            {
                return rotFieldSpecified;
            }
            set
            {
                this.rotFieldSpecified = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        public bool flipH
        {
            get
            {
                return flipHField;
            }
            set
            {
                this.flipHField = value;
            }
        }

        [XmlIgnore]
        public bool flipHSpecified
        {
            get
            {
                return flipHFieldSpecified;
            }
            set
            {
                this.flipHFieldSpecified = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        public bool flipV
        {
            get
            {
                return flipVField;
            }
            set
            {
                this.flipVField = value;
            }
        }

        [XmlIgnore]
        public bool flipVSpecified
        {
            get
            {
                return flipVFieldSpecified;
            }
            set
            {
                this.flipVFieldSpecified = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_GroupTransform2D
    {

        private CT_Point2D offField;

        private CT_PositiveSize2D extField;

        private CT_Point2D chOffField;

        private CT_PositiveSize2D chExtField;

        private int rotField;

        private bool flipHField;

        private bool flipVField;

        public CT_GroupTransform2D()
        {
            //this.chExtField = new CT_PositiveSize2D();
            //this.chOffField = new CT_Point2D();
            //this.extField = new CT_PositiveSize2D();
            //this.offField = new CT_Point2D();
            this.rotField = 0;
            this.flipHField = false;
            this.flipVField = false;
        }
        public static CT_GroupTransform2D Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_GroupTransform2D ctObj = new CT_GroupTransform2D();
            ctObj.rot = XmlHelper.ReadInt(node.Attributes["rot"]);
            ctObj.flipH = XmlHelper.ReadBool(node.Attributes["flipH"]);
            ctObj.flipV = XmlHelper.ReadBool(node.Attributes["flipV"]);
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "off")
                    ctObj.off = CT_Point2D.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "ext")
                    ctObj.ext = CT_PositiveSize2D.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "chOff")
                    ctObj.chOff = CT_Point2D.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "chExt")
                    ctObj.chExt = CT_PositiveSize2D.Parse(childNode, namespaceManager);
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<a:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "rot", this.rot);
            XmlHelper.WriteAttribute(sw, "flipH", this.flipH, false);
            XmlHelper.WriteAttribute(sw, "flipV", this.flipV,false);
            sw.Write(">");
            if (this.off != null)
                this.off.Write(sw, "off");
            if (this.ext != null)
                this.ext.Write(sw, "a:ext");
            if (this.chOff != null)
                this.chOff.Write(sw, "chOff");
            if (this.chExt != null)
                this.chExt.Write(sw, "a:chExt");
            sw.Write(string.Format("</a:{0}>", nodeName));
        }

        public CT_PositiveSize2D AddNewExt()
        {
            this.extField = new CT_PositiveSize2D();
            return this.extField;
        }
        public CT_Point2D AddNewOff()
        {
            this.offField = new CT_Point2D();
            return this.offField;
        }
        public CT_PositiveSize2D AddNewChExt()
        {
            this.chExtField = new CT_PositiveSize2D();
            return this.chExtField;
        }
        public CT_Point2D AddNewChOff()
        {
            this.chOffField = new CT_Point2D();
            return this.chOffField;
        }

        [XmlElement(Order = 0)]
        public CT_Point2D off
        {
            get
            {
                return this.offField;
            }
            set
            {
                this.offField = value;
            }
        }

        [XmlElement(Order = 1)]
        public CT_PositiveSize2D ext
        {
            get
            {
                return this.extField;
            }
            set
            {
                this.extField = value;
            }
        }

        [XmlElement(Order = 2)]
        public CT_Point2D chOff
        {
            get
            {
                return this.chOffField;
            }
            set
            {
                this.chOffField = value;
            }
        }

        [XmlElement(Order = 3)]
        public CT_PositiveSize2D chExt
        {
            get
            {
                return this.chExtField;
            }
            set
            {
                this.chExtField = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(0)]
        public int rot
        {
            get
            {
                return this.rotField;
            }
            set
            {
                this.rotField = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        public bool flipH
        {
            get
            {
                return this.flipHField;
            }
            set
            {
                this.flipHField = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        public bool flipV
        {
            get
            {
                return this.flipVField;
            }
            set
            {
                this.flipVField = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_Point3D
    {

        private long xField;

        private long yField;

        private long zField;
        public static CT_Point3D Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_Point3D ctObj = new CT_Point3D();
            ctObj.x = XmlHelper.ReadLong(node.Attributes["x"]);
            ctObj.y = XmlHelper.ReadLong(node.Attributes["y"]);
            ctObj.z = XmlHelper.ReadLong(node.Attributes["z"]);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<a:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "x", this.x);
            XmlHelper.WriteAttribute(sw, "y", this.y);
            XmlHelper.WriteAttribute(sw, "z", this.z);
            sw.Write(">");
            sw.Write(string.Format("</a:{0}>", nodeName));
        }

        [XmlAttribute]
        public long x
        {
            get
            {
                return this.xField;
            }
            set
            {
                this.xField = value;
            }
        }

        [XmlAttribute]
        public long y
        {
            get
            {
                return this.yField;
            }
            set
            {
                this.yField = value;
            }
        }

        [XmlAttribute]
        public long z
        {
            get
            {
                return this.zField;
            }
            set
            {
                this.zField = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_Vector3D
    {

        private long dxField;

        private long dyField;

        private long dzField;
        public static CT_Vector3D Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_Vector3D ctObj = new CT_Vector3D();
            ctObj.dx = XmlHelper.ReadLong(node.Attributes["dx"]);
            ctObj.dy = XmlHelper.ReadLong(node.Attributes["dy"]);
            ctObj.dz = XmlHelper.ReadLong(node.Attributes["dz"]);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<a:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "dx", this.dx);
            XmlHelper.WriteAttribute(sw, "dy", this.dy);
            XmlHelper.WriteAttribute(sw, "dz", this.dz);
            sw.Write(">");
            sw.Write(string.Format("</a:{0}>", nodeName));
        }

        [XmlAttribute]
        public long dx
        {
            get
            {
                return this.dxField;
            }
            set
            {
                this.dxField = value;
            }
        }

        [XmlAttribute]
        public long dy
        {
            get
            {
                return this.dyField;
            }
            set
            {
                this.dyField = value;
            }
        }

        [XmlAttribute]
        public long dz
        {
            get
            {
                return this.dzField;
            }
            set
            {
                this.dzField = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_SphereCoords
    {

        private int latField;

        private int lonField;

        private int revField;
        public static CT_SphereCoords Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_SphereCoords ctObj = new CT_SphereCoords();
            ctObj.lat = XmlHelper.ReadInt(node.Attributes["lat"]);
            ctObj.lon = XmlHelper.ReadInt(node.Attributes["lon"]);
            ctObj.rev = XmlHelper.ReadInt(node.Attributes["rev"]);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<a:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "lat", this.lat, true);
            XmlHelper.WriteAttribute(sw, "lon", this.lon, true);
            XmlHelper.WriteAttribute(sw, "rev", this.rev, true);
            sw.Write(">");
            sw.Write(string.Format("</a:{0}>", nodeName));
        }

        [XmlAttribute]
        public int lat
        {
            get
            {
                return this.latField;
            }
            set
            {
                this.latField = value;
            }
        }

        [XmlAttribute]
        public int lon
        {
            get
            {
                return this.lonField;
            }
            set
            {
                this.lonField = value;
            }
        }

        [XmlAttribute]
        public int rev
        {
            get
            {
                return this.revField;
            }
            set
            {
                this.revField = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_RelativeRect
    {
        private int lField; // all attributes are percentage
        private int tField;
        private int rField;
        private int bField;
        public static CT_RelativeRect Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_RelativeRect ctObj = new CT_RelativeRect();
            ctObj.lSpecified = node.Attributes["l"]!=null;
            ctObj.l = XmlHelper.ReadInt(node.Attributes["l"]);
            ctObj.tSpecified = node.Attributes["t"]!=null;
            ctObj.t = XmlHelper.ReadInt(node.Attributes["t"]);
            ctObj.rSpecified = node.Attributes["r"]!=null;
            ctObj.r = XmlHelper.ReadInt(node.Attributes["r"]);
            ctObj.bSpecified = node.Attributes["b"]!=null;
            ctObj.b = XmlHelper.ReadInt(node.Attributes["b"]);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<a:{0}", nodeName));
            if(lSpecified)
                XmlHelper.WriteAttribute(sw, "l", this.l);
            if(tSpecified)
                XmlHelper.WriteAttribute(sw, "t", this.t);
            if(rSpecified)
                XmlHelper.WriteAttribute(sw, "r", this.r);
            if(bSpecified)
                XmlHelper.WriteAttribute(sw, "b", this.b);
            sw.Write("/>");
        }

        [XmlAttribute]
        [DefaultValue(0)]
        public int l
        {
            get{ return lField; }
            set{ lSpecified = true; lField = value; }
        }
        [XmlIgnore]
        public bool lSpecified
        {
            get; set;
        }
        [XmlAttribute]
        [DefaultValue(0)]
        public int t
        {
            get{ return tField; }
            set{ tSpecified = true; tField = value; }
        }
        [XmlIgnore]
        public bool tSpecified
        {
            get; set;
        }
        [XmlAttribute]
        [DefaultValue(0)]
        public int r
        {
            get{ return rField; }
            set{ rSpecified = true; rField = value; }
        }
        [XmlIgnore]
        public bool rSpecified
        {
            get; set;
        }
        [XmlAttribute]
        [DefaultValue(0)]
        public int b
        {
            get{ return bField; }
            set{ bSpecified = true; bField = value; }
        }
        [XmlIgnore]
        public bool bSpecified
        {
            get; set;
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_Color
    {

        private CT_ScRgbColor scrgbClrField;

        private CT_SRgbColor srgbClrField;

        private CT_HslColor hslClrField;

        private CT_SystemColor sysClrField;

        private CT_SchemeColor schemeClrField;

        private CT_PresetColor prstClrField;

        public static CT_Color Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_Color ctObj = new CT_Color();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "scrgbClr")
                    ctObj.scrgbClr = CT_ScRgbColor.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "srgbClr")
                    ctObj.srgbClr = CT_SRgbColor.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "hslClr")
                    ctObj.hslClr = CT_HslColor.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "sysClr")
                    ctObj.sysClr = CT_SystemColor.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "schemeClr")
                    ctObj.schemeClr = CT_SchemeColor.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "prstClr")
                    ctObj.prstClr = CT_PresetColor.Parse(childNode, namespaceManager);
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<a:{0}", nodeName));
            sw.Write(">");
            if (this.scrgbClr != null)
                this.scrgbClr.Write(sw, "scrgbClr");
            if (this.srgbClr != null)
                this.srgbClr.Write(sw, "srgbClr");
            if (this.hslClr != null)
                this.hslClr.Write(sw, "hslClr");
            if (this.sysClr != null)
                this.sysClr.Write(sw, "sysClr");
            if (this.schemeClr != null)
                this.schemeClr.Write(sw, "schemeClr");
            if (this.prstClr != null)
                this.prstClr.Write(sw, "prstClr");
            sw.Write(string.Format("</a:{0}>", nodeName));
        }

        public CT_Color()
        {
            //this.prstClrField = new CT_PresetColor();
            //this.schemeClrField = new CT_SchemeColor();
            //this.sysClrField = new CT_SystemColor();
            //this.hslClrField = new CT_HslColor();
            ////this.srgbClrField = new CT_SRgbColor();
            //this.scrgbClrField = new CT_ScRgbColor();
        }

        [XmlElement(Order = 0)]
        public CT_ScRgbColor scrgbClr
        {
            get
            {
                return this.scrgbClrField;
            }
            set
            {
                this.scrgbClrField = value;
            }
        }

        [XmlElement(Order = 1)]
        public CT_SRgbColor srgbClr
        {
            get
            {
                return this.srgbClrField;
            }
            set
            {
                this.srgbClrField = value;
            }
        }

        [XmlElement(Order = 2)]
        public CT_HslColor hslClr
        {
            get
            {
                return this.hslClrField;
            }
            set
            {
                this.hslClrField = value;
            }
        }

        [XmlElement(Order = 3)]
        public CT_SystemColor sysClr
        {
            get
            {
                return this.sysClrField;
            }
            set
            {
                this.sysClrField = value;
            }
        }

        [XmlElement(Order = 4)]
        public CT_SchemeColor schemeClr
        {
            get
            {
                return this.schemeClrField;
            }
            set
            {
                this.schemeClrField = value;
            }
        }

        [XmlElement(Order = 5)]
        public CT_PresetColor prstClr
        {
            get
            {
                return this.prstClrField;
            }
            set
            {
                this.prstClrField = value;
            }
        }

        public bool IsSetSrgbClr()
        {
            return this.srgbClrField != null;
        }

        public bool IsSetSysClr()
        {
            return this.sysClrField != null;
        }

        public CT_SRgbColor AddNewSrgbClr()
        {
            this.srgbClrField = new CT_SRgbColor();
            return this.srgbClrField;
        }

        internal CT_ScRgbColor AddNewScRgbClr()
        {
            this.scrgbClrField = new CT_ScRgbColor();
            return this.scrgbClrField;
        }

        internal CT_PresetColor AddNewPrstClr()
        {
            this.prstClrField = new CT_PresetColor();
            return this.prstClrField;
        }

        internal CT_SystemColor AddNewSysClr()
        {
            this.sysClr = new CT_SystemColor();
            return this.sysClr;
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_ColorMRU
    {

        private List<object> itemsField;

        public CT_ColorMRU()
        {
            this.itemsField = new List<object>();
        }

        [XmlElement("hslClr", typeof(CT_HslColor), Order = 0)]
        [XmlElement("prstClr", typeof(CT_PresetColor), Order = 0)]
        [XmlElement("schemeClr", typeof(CT_SchemeColor), Order = 0)]
        [XmlElement("scrgbClr", typeof(CT_ScRgbColor), Order = 0)]
        [XmlElement("srgbClr", typeof(CT_SRgbColor), Order = 0)]
        [XmlElement("sysClr", typeof(CT_SystemColor), Order = 0)]
        public List<object> Items
        {
            get
            {
                return this.itemsField;
            }
            set
            {
                this.itemsField = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_EmbeddedWAVAudioFile
    {

        private string embedField;

        private string nameField;

        private bool builtInField;

        public CT_EmbeddedWAVAudioFile()
        {
            this.nameField = "";
            this.builtInField = false;
        }
        public static CT_EmbeddedWAVAudioFile Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_EmbeddedWAVAudioFile ctObj = new CT_EmbeddedWAVAudioFile();
            ctObj.embed = XmlHelper.ReadString(node.Attributes["embed"]);
            ctObj.name = XmlHelper.ReadString(node.Attributes["name"]);
            ctObj.builtIn = XmlHelper.ReadBool(node.Attributes["builtIn"]);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<a:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "embed", this.embed);
            XmlHelper.WriteAttribute(sw, "name", this.name);
            XmlHelper.WriteAttribute(sw, "builtIn", this.builtIn);
            sw.Write(">");
            sw.Write(string.Format("</a:{0}>", nodeName));
        }

        [XmlAttribute(Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://schemas.openxmlformats.org/officeDocument/2006/relationships")]
        public string embed
        {
            get
            {
                return this.embedField;
            }
            set
            {
                this.embedField = value;
            }
        }

        [XmlAttribute]
        [DefaultValue("")]
        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        public bool builtIn
        {
            get
            {
                return this.builtInField;
            }
            set
            {
                this.builtInField = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_Hyperlink
    {

        private CT_EmbeddedWAVAudioFile sndField;

        private CT_OfficeArtExtensionList extLstField;

        private string idField;
        private bool idFieldSpecified;

        private string invalidUrlField;
        private bool invalidUrlFieldSpecified;

        private string actionField;
        private bool actionFieldSpecified;

        private string tgtFrameField;
        private bool tgtFrameFieldSpecified;

        private string tooltipField;
        private bool tooltipFieldSpecified;

        private bool historyField;
        private bool historyFieldSpecified;

        private bool highlightClickField;
        private bool highlightClickFieldSpecified;

        private bool endSndField;
        private bool endSndFieldSpecified;
        public static CT_Hyperlink Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_Hyperlink ctObj = new CT_Hyperlink();
            ctObj.idFieldSpecified = node.Attributes["r:id"]!=null;
            ctObj.id = XmlHelper.ReadString(node.Attributes["r:id"]);
            ctObj.invalidUrlFieldSpecified = node.Attributes["invalidUrl"]!=null;
            ctObj.invalidUrl = XmlHelper.ReadString(node.Attributes["invalidUrl"], "");
            ctObj.actionFieldSpecified = node.Attributes["action"] != null;
            ctObj.action = XmlHelper.ReadString(node.Attributes["action"], "");
            ctObj.tgtFrameFieldSpecified = node.Attributes["tgtFrame"] != null;
            ctObj.tgtFrame = XmlHelper.ReadString(node.Attributes["tgtFrame"], "");
            ctObj.tooltipFieldSpecified = node.Attributes["tooltip"] != null;
            ctObj.tooltip = XmlHelper.ReadString(node.Attributes["tooltip"], "");
            ctObj.historyFieldSpecified = node.Attributes["history"] != null;
            ctObj.history = XmlHelper.ReadBool(node.Attributes["history"], true);
            ctObj.highlightClickFieldSpecified = node.Attributes["highlightClick"] != null;
            ctObj.highlightClick = XmlHelper.ReadBool(node.Attributes["highlightClick"]);
            ctObj.endSndFieldSpecified = node.Attributes["endSnd"] != null;
            ctObj.endSnd = XmlHelper.ReadBool(node.Attributes["endSnd"]);
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "snd")
                    ctObj.snd = CT_EmbeddedWAVAudioFile.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "extLst")
                    ctObj.extLst = CT_OfficeArtExtensionList.Parse(childNode, namespaceManager);
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<a:{0} xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"", nodeName));
            if(idFieldSpecified)
                XmlHelper.WriteAttribute(sw, "r:id", this.id);
            if(this.invalidUrlFieldSpecified)
                XmlHelper.WriteAttribute(sw, "invalidUrl", this.invalidUrl);
            if(this.actionFieldSpecified)
                XmlHelper.WriteAttribute(sw, "action", this.action);
            if(this.tgtFrameFieldSpecified)
                XmlHelper.WriteAttribute(sw, "tgtFrame", this.tgtFrame);
            if(this.tooltipFieldSpecified)
                XmlHelper.WriteAttribute(sw, "tooltip", this.tooltip);

            XmlHelper.WriteAttribute(sw, "history", this.history, false, true);
            XmlHelper.WriteAttribute(sw, "highlightClick", this.highlightClick, false, false);
            XmlHelper.WriteAttribute(sw, "endSnd", this.endSnd, false, false);
            sw.Write(">");
            if (this.snd != null)
                this.snd.Write(sw, "snd");
            if (this.extLst != null)
                this.extLst.Write(sw, "extLst");
            sw.Write(string.Format("</a:{0}>", nodeName));
        }

        public bool IsSetExtLst()
        {
            return this.extLst != null;
        }

        public void UnsetExtLst()
        {
            this.extLst = null;
        }

        public CT_Hyperlink()
        {
            this.invalidUrlField = "";
            this.actionField = "";
            this.tgtFrameField = "";
            this.tooltipField = "";
            this.historyField = true;
            this.highlightClickField = false;
            this.endSndField = false;
        }

        [XmlElement(Order = 0)]
        public CT_EmbeddedWAVAudioFile snd
        {
            get
            {
                return this.sndField;
            }
            set
            {
                this.sndField = value;
            }
        }

        [XmlElement(Order = 1)]
        public CT_OfficeArtExtensionList extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }

        [XmlAttribute(Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://schemas.openxmlformats.org/officeDocument/2006/relationships")]
        public string id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSpecified = true;
                this.idField = value;
            }
        }

        [XmlIgnore]
        public bool idSpecified
        {
            get
            {
                return this.idFieldSpecified;
            }
            set
            {
                this.idFieldSpecified = value;
            }
        }

        [XmlAttribute]
        [DefaultValue("")]
        public string invalidUrl
        {
            get
            {
                return this.invalidUrlField;
            }
            set
            {
                this.invalidUrlFieldSpecified = true;
                this.invalidUrlField = value;
            }
        }

        [XmlIgnore]
        public bool invalidUrlSpecified
        {
            get
            {
                return this.invalidUrlFieldSpecified;
            }
            set
            {
                this.invalidUrlFieldSpecified = value;
            }
        }

        [XmlAttribute]
        [DefaultValue("")]
        public string action
        {
            get
            {
                return this.actionField;
            }
            set
            {
                this.actionFieldSpecified = true;
                this.actionField = value;
            }
        }

        [XmlIgnore]
        public bool actionSpecified
        {
            get
            {
                return this.actionFieldSpecified;
            }
            set
            {
                this.actionFieldSpecified = value;
            }
        }

        [XmlAttribute]
        [DefaultValue("")]
        public string tgtFrame
        {
            get
            {
                return this.tgtFrameField;
            }
            set
            {
                this.tgtFrameFieldSpecified = true;
                this.tgtFrameField = value;
            }
        }

        [XmlIgnore]
        public bool tgtFrameSpecified
        {
            get
            {
                return this.tgtFrameFieldSpecified;
            }
            set
            {
                this.tgtFrameFieldSpecified = value;
            }
        }

        [XmlAttribute]
        [DefaultValue("")]
        public string tooltip
        {
            get
            {
                return this.tooltipField;
            }
            set
            {
                this.tooltipFieldSpecified = true;
                this.tooltipField = value;
            }
        }

        [XmlIgnore]
        public bool tooltipSpecified
        {
            get
            {
                return this.tooltipFieldSpecified;
            }
            set
            {
                this.tooltipFieldSpecified = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(true)]
        public bool history
        {
            get
            {
                return this.historyField;
            }
            set
            {
                this.historyFieldSpecified = true;
                this.historyField = value;
            }
        }

        [XmlIgnore]
        public bool historySpecified
        {
            get
            {
                return this.historyFieldSpecified;
            }
            set
            {
                this.historyFieldSpecified = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        public bool highlightClick
        {
            get
            {
                return this.highlightClickField;
            }
            set
            {
                this.highlightClickFieldSpecified = true;
                this.highlightClickField = value;
            }
        }

        [XmlIgnore]
        public bool highlightClickSpecified
        {
            get
            {
                return this.highlightClickFieldSpecified;
            }
            set
            {
                this.highlightClickFieldSpecified = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        public bool endSnd
        {
            get
            {
                return this.endSndField;
            }
            set
            {
                this.endSndFieldSpecified = true;
                this.endSndField = value;
            }
        }

        [XmlIgnore]
        public bool endSndSpecified
        {
            get
            {
                return this.endSndFieldSpecified;
            }
            set
            {
                this.endSndFieldSpecified = value;
            }
        }
    }
    public enum ST_BlackWhiteMode
    {
        none,

        clr,


        auto,


        gray,


        ltGray,


        invGray,


        grayWhite,


        blackGray,


        blackWhite,


        black,


        white,


        hidden,
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    public enum ST_RectAlignment
    {

        /// <remarks/>
        tl,

        /// <remarks/>
        t,

        /// <remarks/>
        tr,

        /// <remarks/>
        l,

        /// <remarks/>
        ctr,

        /// <remarks/>
        r,

        /// <remarks/>
        bl,

        /// <remarks/>
        b,

        /// <remarks/>
        br,
    }
        
}
