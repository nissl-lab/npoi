// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.38967
//    <NameSpace>NPOI.OpenXmlFormats.Dml</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>False</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net20</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>True</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>True</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace NPOI.OpenXmlFormats.Dml
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.Collections.Generic;
    using NPOI.OpenXml4Net.Util;
    using System.IO;
    using System.Xml;
    

    [Serializable]
    [DebuggerStepThrough]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_TextFont
    {

        private string typefaceField;

        private byte[] panoseField;
        private bool panoseFieldSpecified;

        private sbyte pitchFamilyField;
        private bool pitchFamilyFieldSpecified;

        private sbyte charsetField;
        private bool charsetFieldSpecified;

        public CT_TextFont()
        {
            this.pitchFamilyField = ((sbyte)(0));
            this.charsetField = ((sbyte)(1));
        }

        public static CT_TextFont Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_TextFont ctObj = new CT_TextFont();
            ctObj.typeface = XmlHelper.ReadString(node.Attributes["typeface"]);
            ctObj.panoseFieldSpecified = node.Attributes["panose"] != null;
            ctObj.panose = XmlHelper.ReadBytes(node.Attributes["panose"]);
            ctObj.pitchFamilyFieldSpecified = node.Attributes["pitchFamily"] != null;
            ctObj.pitchFamily = XmlHelper.ReadSByte(node.Attributes["pitchFamily"]);
            ctObj.charsetFieldSpecified = node.Attributes["charset"]!=null;
            if (ctObj.charsetFieldSpecified)
                ctObj.charsetField = XmlHelper.ReadSByte(node.Attributes["charset"], 1);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<a:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "typeface", this.typeface,true);
            if(this.panoseFieldSpecified)
                XmlHelper.WriteAttribute(sw, "panose", this.panose);
            if (this.pitchFamilyFieldSpecified)
                XmlHelper.WriteAttribute(sw, "pitchFamily", this.pitchFamily);
            if(this.charsetFieldSpecified)
                XmlHelper.WriteAttribute(sw, "charset", this.charset, true);
            sw.Write("/>");
        }


        [XmlAttribute]
        public string typeface
        {
            get
            {
                return this.typefaceField;
            }
            set
            {
                this.typefaceField = value;
            }
        }

        [XmlAttribute(DataType = "hexBinary")]
        public byte[] panose
        {
            get
            {
                return this.panoseField;
            }
            set
            {
                this.panoseFieldSpecified = true;
                this.panoseField = value;
            }
        }

        [XmlIgnore]
        public bool panoseSpecified
        {
            get
            {
                return this.panoseFieldSpecified;
            }
            set
            {
                this.panoseFieldSpecified = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(typeof(sbyte), "0")]
        public sbyte pitchFamily
        {
            get
            {
                return this.pitchFamilyField;
            }
            set
            {
                this.pitchFamilyFieldSpecified = true;
                this.pitchFamilyField = value;
            }
        }

        [XmlIgnore]
        public bool pitchFamilySpecified
        {
            get
            {
                return this.pitchFamilyFieldSpecified;
            }
            set
            {
                this.pitchFamilyFieldSpecified = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(typeof(sbyte), "1")]
        public sbyte charset
        {
            get
            {
                return this.charsetField;
            }
            set
            {
                this.charsetFieldSpecified = true;
                this.charsetField = value;
            }
        }

        [XmlIgnore]
        public bool charsetSpecified
        {
            get
            {
                return this.charsetFieldSpecified;
            }
            set
            {
                this.charsetFieldSpecified = value;
            }
        }
    }


    [Serializable]
    [DebuggerStepThrough]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_TextUnderlineLineFollowText
    {
    }


    [Serializable]
    [DebuggerStepThrough]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_TextUnderlineFillFollowText
    {
    }


    [Serializable]
    [DebuggerStepThrough]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_TextUnderlineFillGroupWrapper
    {
        private CT_BlipFillProperties blipFillField;
        private CT_GroupFillProperties grpFillField;
        private CT_NoFillProperties noFillField;

        private CT_SolidColorFillProperties solidFillField;

        private CT_GradientFillProperties gradFillField;

        private CT_PatternFillProperties pattFillField;

        public static CT_TextUnderlineFillGroupWrapper Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_TextUnderlineFillGroupWrapper ctObj = new CT_TextUnderlineFillGroupWrapper();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "noFill")
                    ctObj.noFill = new CT_NoFillProperties();
                else if (childNode.LocalName == "solidFill")
                    ctObj.solidFill = CT_SolidColorFillProperties.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "gradFill")
                    ctObj.gradFill = CT_GradientFillProperties.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "blipFill")
                    ctObj.blipFill = CT_BlipFillProperties.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "pattFill")
                    ctObj.pattFill = CT_PatternFillProperties.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "grpFill")
                    ctObj.grpFill = new CT_GroupFillProperties();
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<a:{0}", nodeName));
            sw.Write(">");
            if (this.noFill != null)
                sw.Write("<a:noFill/>");
            if (this.solidFill != null)
                this.solidFill.Write(sw, "solidFill");
            if (this.gradFill != null)
                this.gradFill.Write(sw, "gradFill");
            if (this.blipFill != null)
                this.blipFill.Write(sw, "a:blipFill");
            if (this.pattFill != null)
                this.pattFill.Write(sw, "pattFill");
            if (this.grpFill != null)
                sw.Write("<a:grpFill/>");
            sw.Write(string.Format("</a:{0}>", nodeName));
        }

        [XmlElement(Order = 1)]
        public CT_NoFillProperties noFill
        {
            get
            {
                return this.noFillField;
            }
            set
            {
                this.noFillField = value;
            }
        }

        [XmlElement(Order = 2)]
        public CT_SolidColorFillProperties solidFill
        {
            get
            {
                return this.solidFillField;
            }
            set
            {
                this.solidFillField = value;
            }
        }

        [XmlElement(Order = 3)]
        public CT_GradientFillProperties gradFill
        {
            get
            {
                return this.gradFillField;
            }
            set
            {
                this.gradFillField = value;
            }
        }

        [XmlElement(Order = 4)]
        public CT_BlipFillProperties blipFill
        {
            get
            {
                return this.blipFillField;
            }
            set
            {
                this.blipFillField = value;
            }
        }

        [XmlElement(Order = 5)]
        public CT_PatternFillProperties pattFill
        {
            get
            {
                return this.pattFillField;
            }
            set
            {
                this.pattFillField = value;
            }
        }

        [XmlElement(Order = 6)]
        public CT_GroupFillProperties grpFill
        {
            get
            {
                return this.grpFillField;
            }
            set
            {
                this.grpFillField = value;
            }
        }
    }


    [Serializable]
    [DebuggerStepThrough]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_TextCharacterProperties
    {

        private CT_LineProperties lnField;

        private CT_NoFillProperties noFillField;

        private CT_SolidColorFillProperties solidFillField;

        private CT_GradientFillProperties gradFillField;

        private CT_BlipFillProperties blipFillField;

        private CT_PatternFillProperties pattFillField;

        private CT_GroupFillProperties grpFillField;

        private CT_EffectList effectLstField;

        private CT_EffectContainer effectDagField;

        private CT_Color highlightField;

        private CT_TextUnderlineLineFollowText uLnTxField;

        private CT_LineProperties uLnField;

        private CT_TextUnderlineFillFollowText uFillTxField;

        private CT_TextUnderlineFillGroupWrapper uFillField;

        private CT_TextFont latinField;

        private CT_TextFont eaField;

        private CT_TextFont csField;

        private CT_TextFont symField;

        private CT_Hyperlink hlinkClickField;

        private CT_Hyperlink hlinkMouseOverField;

        private CT_OfficeArtExtensionList extLstField;

        private bool kumimojiField;

        private bool kumimojiFieldSpecified;

        private string langField;

        private string altLangField;

        private int szField;

        private bool szFieldSpecified;

        private bool bField;

        private bool bFieldSpecified;

        private bool iField;

        private bool iFieldSpecified;

        private ST_TextUnderlineType uField;

        private bool uFieldSpecified;

        private ST_TextStrikeType strikeField;

        private bool strikeFieldSpecified;

        private int kernField;

        private bool kernFieldSpecified;

        private ST_TextCapsType capField;

        private bool capFieldSpecified;

        private int spcField;

        private bool spcFieldSpecified;

        private bool normalizeHField;

        private bool normalizeHFieldSpecified;

        private int baselineField;

        private bool baselineFieldSpecified;

        private bool noProofField;

        private bool noProofFieldSpecified;

        private bool dirtyField=true;

        private bool dirtyFieldSpecified;

        private bool errField;

        private bool errFieldSpecified;

        private bool smtCleanField=true;

        private bool smtCleanFieldSpecified;

        private uint smtIdField;

        private bool smtIdFieldSpecified;

        private string bmkField;
        public static CT_TextCharacterProperties Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_TextCharacterProperties ctObj = new CT_TextCharacterProperties();

            ctObj.kumimojiFieldSpecified = node.Attributes["kumimoji"] != null;
            ctObj.kumimoji = XmlHelper.ReadBool(node.Attributes["kumimoji"]);

            ctObj.lang = XmlHelper.ReadString(node.Attributes["lang"]);
            ctObj.altLang = XmlHelper.ReadString(node.Attributes["altLang"]);

            ctObj.szFieldSpecified = node.Attributes["sz"]!=null;
            ctObj.sz = XmlHelper.ReadInt(node.Attributes["sz"]);

            ctObj.bFieldSpecified = node.Attributes["b"] != null;
            if (node.Attributes["b"] != null)
                ctObj.bField = XmlHelper.ReadBool(node.Attributes["b"]);
            ctObj.iFieldSpecified = node.Attributes["i"] != null;
            if (node.Attributes["i"] != null)
                ctObj.iField = XmlHelper.ReadBool(node.Attributes["i"]);
            ctObj.uFieldSpecified = node.Attributes["u"]!=null;
            if (node.Attributes["u"] != null)
                ctObj.uField = (ST_TextUnderlineType)Enum.Parse(typeof(ST_TextUnderlineType), node.Attributes["u"].Value);
            ctObj.strikeFieldSpecified = node.Attributes["strike"] != null;
            if (node.Attributes["strike"] != null)
                ctObj.strikeField = (ST_TextStrikeType)Enum.Parse(typeof(ST_TextStrikeType), node.Attributes["strike"].Value);
            ctObj.kern = XmlHelper.ReadInt(node.Attributes["kern"]);
            if (node.Attributes["cap"] != null)
                ctObj.cap = (ST_TextCapsType)Enum.Parse(typeof(ST_TextCapsType), node.Attributes["cap"].Value);
            
            ctObj.spcFieldSpecified = node.Attributes["spc"] != null;
            ctObj.spc = XmlHelper.ReadInt(node.Attributes["spc"]);

            ctObj.normalizeHFieldSpecified = node.Attributes["normalizeH"] != null;
            ctObj.normalizeH = XmlHelper.ReadBool(node.Attributes["normalizeH"]);

            ctObj.baselineFieldSpecified = node.Attributes["baseline"] != null;
            ctObj.baselineField = XmlHelper.ReadInt(node.Attributes["baseline"]);

            ctObj.noProofFieldSpecified = node.Attributes["noProof"] != null;
            ctObj.noProof = XmlHelper.ReadBool(node.Attributes["noProof"]);

            ctObj.dirtyFieldSpecified = node.Attributes["dirty"]!=null;
            if (node.Attributes["dirty"]!=null)
                ctObj.dirty = XmlHelper.ReadBool(node.Attributes["dirty"]);

            ctObj.errFieldSpecified = node.Attributes["err"]!=null;
            ctObj.err = XmlHelper.ReadBool(node.Attributes["err"]);

            ctObj.smtCleanFieldSpecified = node.Attributes["smtClean"]!=null;
            if (node.Attributes["smtClean"] != null)
                ctObj.smtClean = XmlHelper.ReadBool(node.Attributes["smtClean"]);

            ctObj.smtCleanFieldSpecified = node.Attributes["smtId"]!=null;
            ctObj.smtId = XmlHelper.ReadUInt(node.Attributes["smtId"]);
            ctObj.bmk = XmlHelper.ReadString(node.Attributes["bmk"]);
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "ln")
                    ctObj.ln = CT_LineProperties.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "noFill")
                    ctObj.noFill = new CT_NoFillProperties();
                else if (childNode.LocalName == "solidFill")
                    ctObj.solidFill = CT_SolidColorFillProperties.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "gradFill")
                    ctObj.gradFill = CT_GradientFillProperties.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "blipFill")
                    ctObj.blipFill = CT_BlipFillProperties.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "pattFill")
                    ctObj.pattFill = CT_PatternFillProperties.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "grpFill")
                    ctObj.grpFill = new CT_GroupFillProperties();
                else if (childNode.LocalName == "effectLst")
                    ctObj.effectLst = CT_EffectList.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "effectDag")
                    ctObj.effectDag = CT_EffectContainer.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "highlight")
                    ctObj.highlight = CT_Color.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "uLnTx")
                    ctObj.uLnTx = new CT_TextUnderlineLineFollowText();
                else if (childNode.LocalName == "uLn")
                    ctObj.uLn = CT_LineProperties.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "uFillTx")
                    ctObj.uFillTx = new CT_TextUnderlineFillFollowText();
                else if (childNode.LocalName == "uFill")
                    ctObj.uFill = CT_TextUnderlineFillGroupWrapper.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "latin")
                    ctObj.latin = CT_TextFont.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "ea")
                    ctObj.ea = CT_TextFont.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "cs")
                    ctObj.cs = CT_TextFont.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "sym")
                    ctObj.sym = CT_TextFont.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "hlinkClick")
                    ctObj.hlinkClick = CT_Hyperlink.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "hlinkMouseOver")
                    ctObj.hlinkMouseOver = CT_Hyperlink.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "extLst")
                    ctObj.extLst = CT_OfficeArtExtensionList.Parse(childNode, namespaceManager);
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<a:{0}", nodeName));
            if(this.kumimojiFieldSpecified)
                XmlHelper.WriteAttribute(sw, "kumimoji", this.kumimoji, false);
            if(this.lang!=null)
                XmlHelper.WriteAttribute(sw, "lang", this.lang);
            if(this.altLangField!=null)
                XmlHelper.WriteAttribute(sw, "altLang", this.altLang);
            if(this.szFieldSpecified)
                XmlHelper.WriteAttribute(sw, "sz", this.sz);
            if(this.bFieldSpecified)
                XmlHelper.WriteAttribute(sw, "b", this.bField, true);
            if (this.iFieldSpecified)
                XmlHelper.WriteAttribute(sw, "i", this.iField,true);
            if(this.uFieldSpecified&&this.uField!= ST_TextUnderlineType.none)
                XmlHelper.WriteAttribute(sw, "u", this.uField.ToString());
            if(this.strikeFieldSpecified&&strikeField!= ST_TextStrikeType.noStrike)
                XmlHelper.WriteAttribute(sw, "strike", this.strikeField.ToString());
            XmlHelper.WriteAttribute(sw, "kern", this.kern);
            if(this.cap!= ST_TextCapsType.none)
                XmlHelper.WriteAttribute(sw, "cap", this.cap.ToString());
            if(this.spcFieldSpecified)
                XmlHelper.WriteAttribute(sw, "spc", this.spc);
            if(this.normalizeHFieldSpecified)
                XmlHelper.WriteAttribute(sw, "normalizeH", this.normalizeH, false);
            if(this.baselineFieldSpecified)
                XmlHelper.WriteAttribute(sw, "baseline", this.baseline,true);
            if(this.noProofFieldSpecified)
                XmlHelper.WriteAttribute(sw, "noProof", this.noProof, false);
            if (this.dirtyFieldSpecified)
                XmlHelper.WriteAttribute(sw, "dirty", this.dirty);
            if(this.errFieldSpecified)
                XmlHelper.WriteAttribute(sw, "err", this.err, false);
            if (this.smtCleanFieldSpecified)
                XmlHelper.WriteAttribute(sw, "smtClean", this.smtClean);
            if(this.smtIdFieldSpecified)
                XmlHelper.WriteAttribute(sw, "smtId", this.smtId);
            if(this.bmkField != null)
                XmlHelper.WriteAttribute(sw, "bmk", this.bmk);
            sw.Write(">");
            if (this.ln != null)
                this.ln.Write(sw, "ln");
            if (this.noFill != null)
                sw.Write("<a:noFill/>");
            if (this.solidFill != null)
                this.solidFill.Write(sw, "solidFill");
            if (this.gradFill != null)
                this.gradFill.Write(sw, "gradFill");
            if (this.blipFill != null)
                this.blipFill.Write(sw, "a:blipFill");
            if (this.pattFill != null)
                this.pattFill.Write(sw, "pattFill");
            if (this.grpFill != null)
                sw.Write("<a:grpFill/>");
            if (this.effectLst != null)
                this.effectLst.Write(sw, "effectLst");
            if (this.effectDag != null)
                this.effectDag.Write(sw, "effectDag");
            if (this.highlight != null)
                this.highlight.Write(sw, "highlight");
            if (this.uLnTx != null)
                sw.Write("<a:uLnTx/>");
            if (this.uLn != null)
                this.uLn.Write(sw, "uLn");
            if (this.uFillTx != null)
                sw.Write("<a:uFillTx/>");
            if (this.uFill != null)
                this.uFill.Write(sw, "uFill");
            if (this.latin != null)
                this.latin.Write(sw, "latin");
            if (this.ea != null)
                this.ea.Write(sw, "ea");
            if (this.cs != null)
                this.cs.Write(sw, "cs");
            if (this.sym != null)
                this.sym.Write(sw, "sym");
            if (this.hlinkClick != null)
                this.hlinkClick.Write(sw, "hlinkClick");
            if (this.hlinkMouseOver != null)
                this.hlinkMouseOver.Write(sw, "hlinkMouseOver");
            if (this.extLst != null)
                this.extLst.Write(sw, "extLst");
            sw.Write(string.Format("</a:{0}>", nodeName));
        }

        public CT_TextCharacterProperties()
        {
            this.strike = ST_TextStrikeType.noStrike;
            this.dirtyField = true;
            this.errField = false;
            this.smtCleanField = true;
            this.smtIdField = ((uint)(0));
        }

        [XmlElement(Order = 0)]
        public CT_LineProperties ln
        {
            get
            {
                return this.lnField;
            }
            set
            {
                this.lnField = value;
            }
        }

        [XmlElement(Order = 1)]
        public CT_NoFillProperties noFill
        {
            get
            {
                return this.noFillField;
            }
            set
            {
                this.noFillField = value;
            }
        }

        [XmlElement(Order = 2)]
        public CT_SolidColorFillProperties solidFill
        {
            get
            {
                return this.solidFillField;
            }
            set
            {
                this.solidFillField = value;
            }
        }

        [XmlElement(Order = 3)]
        public CT_GradientFillProperties gradFill
        {
            get
            {
                return this.gradFillField;
            }
            set
            {
                this.gradFillField = value;
            }
        }

        [XmlElement(Order = 4)]
        public CT_BlipFillProperties blipFill
        {
            get
            {
                return this.blipFillField;
            }
            set
            {
                this.blipFillField = value;
            }
        }

        [XmlElement(Order = 5)]
        public CT_PatternFillProperties pattFill
        {
            get
            {
                return this.pattFillField;
            }
            set
            {
                this.pattFillField = value;
            }
        }

        [XmlElement(Order = 6)]
        public CT_GroupFillProperties grpFill
        {
            get
            {
                return this.grpFillField;
            }
            set
            {
                this.grpFillField = value;
            }
        }

        [XmlElement(Order = 7)]
        public CT_EffectList effectLst
        {
            get
            {
                return this.effectLstField;
            }
            set
            {
                this.effectLstField = value;
            }
        }

        [XmlElement(Order = 8)]
        public CT_EffectContainer effectDag
        {
            get
            {
                return this.effectDagField;
            }
            set
            {
                this.effectDagField = value;
            }
        }

        [XmlElement(Order = 9)]
        public CT_Color highlight
        {
            get
            {
                return this.highlightField;
            }
            set
            {
                this.highlightField = value;
            }
        }

        [XmlElement(Order = 10)]
        public CT_TextUnderlineLineFollowText uLnTx
        {
            get
            {
                return this.uLnTxField;
            }
            set
            {
                this.uLnTxField = value;
            }
        }

        [XmlElement(Order = 11)]
        public CT_LineProperties uLn
        {
            get
            {
                return this.uLnField;
            }
            set
            {
                this.uLnField = value;
            }
        }

        [XmlElement(Order = 12)]
        public CT_TextUnderlineFillFollowText uFillTx
        {
            get
            {
                return this.uFillTxField;
            }
            set
            {
                this.uFillTxField = value;
            }
        }

        [XmlElement(Order = 13)]
        public CT_TextUnderlineFillGroupWrapper uFill
        {
            get
            {
                return this.uFillField;
            }
            set
            {
                this.uFillField = value;
            }
        }

        [XmlElement(Order = 14)]
        public CT_TextFont latin
        {
            get
            {
                return this.latinField;
            }
            set
            {
                this.latinField = value;
            }
        }

        [XmlElement(Order = 15)]
        public CT_TextFont ea
        {
            get
            {
                return this.eaField;
            }
            set
            {
                this.eaField = value;
            }
        }

        [XmlElement(Order = 16)]
        public CT_TextFont cs
        {
            get
            {
                return this.csField;
            }
            set
            {
                this.csField = value;
            }
        }

        [XmlElement(Order = 17)]
        public CT_TextFont sym
        {
            get
            {
                return this.symField;
            }
            set
            {
                this.symField = value;
            }
        }

        [XmlElement(Order = 18)]
        public CT_Hyperlink hlinkClick
        {
            get
            {
                return this.hlinkClickField;
            }
            set
            {
                this.hlinkClickField = value;
            }
        }

        [XmlElement(Order = 19)]
        public CT_Hyperlink hlinkMouseOver
        {
            get
            {
                return this.hlinkMouseOverField;
            }
            set
            {
                this.hlinkMouseOverField = value;
            }
        }

        [XmlElement(Order = 20)]
        public CT_OfficeArtExtensionList extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }

        [XmlAttribute]
        public bool kumimoji
        {
            get
            {
                return this.kumimojiField;
            }
            set
            {
                this.kumimojiField = value;
                this.kumimojiFieldSpecified = value;
            }
        }

        [XmlIgnore]
        public bool kumimojiSpecified
        {
            get
            {
                return this.kumimojiFieldSpecified;
            }
            set
            {
                this.kumimojiFieldSpecified = value;
            }
        }

        [XmlAttribute]
        public string lang
        {
            get
            {
                return this.langField;
            }
            set
            {
                this.langField = value;
            }
        }

        [XmlAttribute]
        public string altLang
        {
            get
            {
                return this.altLangField;
            }
            set
            {
                this.altLangField = value;
            }
        }

        [XmlAttribute]
        public int sz
        {
            get
            {
                return this.szField;
            }
            set
            {
                this.szField = value;
                this.szFieldSpecified = true;
            }
        }

        [XmlIgnore]
        public bool szSpecified
        {
            get
            {
                return this.szFieldSpecified;
            }
            set
            {
                this.szFieldSpecified = value;
            }
        }

        [XmlAttribute]
        public bool b
        {
            get
            {
                return this.bField;
            }
            set
            {
                this.bField = value;
                this.bFieldSpecified = value;
            }
        }

        [XmlIgnore]
        public bool bSpecified
        {
            get
            {
                return this.bFieldSpecified;
            }
            set
            {
                this.bFieldSpecified = value;
            }
        }

        [XmlAttribute]
        public bool i
        {
            get
            {
                return this.iField;
            }
            set
            {
                this.iField = value;
                this.iFieldSpecified = value;
            }
        }

        [XmlIgnore]
        public bool iSpecified
        {
            get
            {
                return this.iFieldSpecified;
            }
            set
            {
                this.iFieldSpecified = value;
            }
        }

        [XmlAttribute]
        public ST_TextUnderlineType u
        {
            get
            {
                return this.uField;
            }
            set
            {
                this.uField = value;
                this.uFieldSpecified = value != ST_TextUnderlineType.none;
            }
        }

        [XmlIgnore]
        public bool uSpecified
        {
            get
            {
                return this.uFieldSpecified;
            }
            set
            {
                this.uFieldSpecified = value;
            }
        }

        [XmlAttribute]
        public ST_TextStrikeType strike
        {
            get
            {
                return this.strikeField;
            }
            set
            {
                this.strikeField = value;
                this.strikeFieldSpecified = value != ST_TextStrikeType.noStrike;
            }
        }

        [XmlIgnore]
        public bool strikeSpecified
        {
            get
            {
                return this.strikeFieldSpecified;
            }
            set
            {
                this.strikeFieldSpecified = value;
            }
        }

        [XmlAttribute]
        public int kern
        {
            get
            {
                return this.kernField;
            }
            set
            {
                this.kernField = value;
                this.kernFieldSpecified = true;
            }
        }

        [XmlIgnore]
        public bool kernSpecified
        {
            get
            {
                return this.kernFieldSpecified;
            }
            set
            {
                this.kernFieldSpecified = value;
            }
        }

        [XmlAttribute]
        public ST_TextCapsType cap
        {
            get
            {
                return this.capField;
            }
            set
            {
                this.capField = value;
                this.capFieldSpecified = value != ST_TextCapsType.none;
            }
        }

        [XmlIgnore]
        public bool capSpecified
        {
            get
            {
                return this.capFieldSpecified;
            }
            set
            {
                this.capFieldSpecified = value;
            }
        }

        [XmlAttribute]
        public int spc
        {
            get
            {
                return this.spcField;
            }
            set
            {
                this.spcField = value;
                this.spcFieldSpecified = true;
            }
        }

        [XmlIgnore]
        public bool spcSpecified
        {
            get
            {
                return this.spcFieldSpecified;
            }
            set
            {
                this.spcFieldSpecified = value;
            }
        }

        [XmlAttribute]
        public bool normalizeH
        {
            get
            {
                return this.normalizeHField;
            }
            set
            {
                this.normalizeHField = value;
                this.normalizeHFieldSpecified = true;
            }
        }

        [XmlIgnore]
        public bool normalizeHSpecified
        {
            get
            {
                return this.normalizeHFieldSpecified;
            }
            set
            {
                this.normalizeHFieldSpecified = value;
            }
        }

        [XmlAttribute]
        public int baseline
        {
            get
            {
                return this.baselineField;
            }
            set
            {
                this.baselineField = value;
                this.baselineFieldSpecified = true;
            }
        }

        [XmlIgnore]
        public bool baselineSpecified
        {
            get
            {
                return this.baselineFieldSpecified;
            }
            set
            {
                this.baselineFieldSpecified = value;
            }
        }

        [XmlAttribute]
        public bool noProof
        {
            get
            {
                return this.noProofField;
            }
            set
            {
                this.noProofField = value;
                this.noProofFieldSpecified = value;
            }
        }

        [XmlIgnore]
        public bool noProofSpecified
        {
            get
            {
                return this.noProofFieldSpecified;
            }
            set
            {
                this.noProofFieldSpecified = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(true)]
        public bool dirty
        {
            get
            {
                return this.dirtyField;
            }
            set
            {
                this.dirtyFieldSpecified = !value;
                this.dirtyField = value;
            }
        }

        [XmlIgnore]
        public bool dirtySpecified
        {
            get
            {
                return this.dirtyFieldSpecified;
            }
            set
            {
                this.dirtyFieldSpecified = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        public bool err
        {
            get
            {
                return this.errField;
            }
            set
            {
                this.errFieldSpecified = value;
                this.errField = value;
            }
        }


        [XmlIgnore]
        public bool errSpecified
        {
            get
            {
                return this.errFieldSpecified;
            }
            set
            {
                this.errFieldSpecified = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(true)]
        public bool smtClean
        {
            get
            {
                return this.smtCleanField;
            }
            set
            {
                this.smtCleanFieldSpecified = !value;
                this.smtCleanField = value;
            }
        }

        [XmlIgnore]
        public bool smtCleanSpecified
        {
            get
            {
                return this.smtCleanFieldSpecified;
            }
            set
            {
                this.smtCleanFieldSpecified = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(typeof(uint), "0")]
        public uint smtId
        {
            get
            {
                return this.smtIdField;
            }
            set
            {
                this.smtIdFieldSpecified = value != 0;
                this.smtIdField = value;
            }
        }

        [XmlIgnore]
        public bool smtIdSpecified
        {
            get
            {
                return this.smtIdFieldSpecified;
            }
            set
            {
                this.smtIdFieldSpecified = value;
            }
        }

        [XmlAttribute]
        public string bmk
        {
            get
            {
                return this.bmkField;
            }
            set
            {
                this.bmkField = value;
            }
        }

        public CT_TextFont AddNewLatin()
        {
            this.latinField = new CT_TextFont();
            return this.latinField;
        }

        public bool IsSetSolidFill()
        {
            return this.solidFill != null;
        }

        public CT_SolidColorFillProperties AddNewSolidFill()
        {
            this.solidFillField = new CT_SolidColorFillProperties();
            return solidFillField;
        }

        public bool IsSetStrike()
        {
            return this.strikeFieldSpecified;
        }

        public bool IsSetBaseline()
        {
            return this.baselineFieldSpecified && this.baselineField != 0;
        }

        public bool IsSetI()
        {
            return this.iFieldSpecified;
        }

        public bool IsSetU()
        {
            return this.uFieldSpecified;
        }

        public bool IsSetCap()
        {
            return this.capFieldSpecified;
        }

        public bool IsSetSz()
        {
            return this.szFieldSpecified;
        }

        public void UnsetSz()
        {
            this.szFieldSpecified = false;
            this.szField = 0;
        }

        public bool IsSetSpc()
        {
            return this.spcFieldSpecified;
        }

        public void UnsetSpc()
        {
            this.spcFieldSpecified = false;
            this.spcField = 0;
        }

        public bool IsSetLatin()
        {
            return this.latinField != null;
        }

        public void UnsetLatin()
        {
            this.latinField = null;
        }

        public bool IsSetCs()
        {
            return this.csField != null;
        }

        public void UnsetCs()
        {
            this.csField = null;
        }

        public bool IsSetSym()
        {
            return this.symField != null;
        }

        public void UnsetSym()
        {
            this.symField = null;
        }

        public CT_TextFont AddNewSym()
        {
            this.symField = new CT_TextFont();
            return this.symField;
        }

        public bool IsSetEa()
        {
            return this.eaField != null;
        }

        public void UnsetEa()
        {
            this.eaField = null;
        }

        public bool IsSetHlinkClick()
        {
            return this.hlinkClickField != null;
        }

        public void UnsetHlinkClick()
        {
            this.hlinkClickField = null;
        }

        public bool IsSetHlinkMouseOver()
        {
            return this.hlinkMouseOverField != null;
        }

        public void UnsetHlinkMouseOver()
        {
            this.hlinkMouseOverField = null;
        }

        public bool IsSetHighlight()
        {
            return this.highlightField != null;
        }

        public void UnsetHighlight()
        {
            this.highlightField = null;
        }

        public bool IsSetLn()
        {
            return this.lnField != null;
        }

        public void UnsetLn()
        {
            this.lnField = null;
        }

        public bool IsSetExtLst()
        {
            return this.extLstField != null;
        }

        public void UnsetExtLst()
        {
            this.extLstField = null;
        }

        public bool IsSetEffectDag()
        {
            return this.effectDagField != null;
        }

        public void UnsetEffectDag()
        {
            this.effectDagField = null;
        }

        public bool IsSetEffectLst()
        {
            return this.effectLstField != null;
        }

        public void UnsetEffectLst()
        {
            this.effectLstField = null;
        }

        public bool IsSetBlipFill()
        {
            return this.blipFillField != null;
        }

        public void UnsetBlipFill()
        {
            this.blipFillField  = null;
        }

        public bool IsSetGradFill()
        {
            return this.gradFillField != null;
        }

        public void UnsetGradFill()
        {
            this.gradFillField = null;
        }

        public bool IsSetGrpFill()
        {
            return this.grpFillField != null;
        }

        public void UnsetGrpFill()
        {
            this.grpFillField = null;
        }

        public bool IsSetNoFill()
        {
            return this.noFillField != null;
        }

        public void UnsetNoFill()
        {
            this.noFillField = null;
        }

        public bool IsSetPattFill()
        {
            return this.pattFillField != null;
        }

        public void UnsetPattFill()
        {
            this.pattFillField = null;
        }

        public void UnsetSolidFill()
        {
            this.solidFillField = null;
        }

        public bool IsSetAltLang()
        {
            return this.altLangField != null;
        }

        public bool IsSetLang()
        {
            return this.langField != null;
        }

        public bool IsSetBmk()
        {
            return this.bmkField != null;
        }
    }


    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    public enum ST_TextUnderlineType
    {

        /// <remarks/>
        none,

        /// <remarks/>
        words,

        /// <remarks/>
        sng,

        /// <remarks/>
        dbl,

        /// <remarks/>
        heavy,

        /// <remarks/>
        dotted,

        /// <remarks/>
        dottedHeavy,

        /// <remarks/>
        dash,

        /// <remarks/>
        dashHeavy,

        /// <remarks/>
        dashLong,

        /// <remarks/>
        dashLongHeavy,

        /// <remarks/>
        dotDash,

        /// <remarks/>
        dotDashHeavy,

        /// <remarks/>
        dotDotDash,

        /// <remarks/>
        dotDotDashHeavy,

        /// <remarks/>
        wavy,

        /// <remarks/>
        wavyHeavy,

        /// <remarks/>
        wavyDbl,
    }


    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    public enum ST_TextStrikeType
    {

        /// <remarks/>
        noStrike,

        /// <remarks/>
        sngStrike,

        /// <remarks/>
        dblStrike,
    }


    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    public enum ST_TextCapsType
    {

        /// <remarks/>
        none,

        /// <remarks/>
        small,

        /// <remarks/>
        all,
    }
}
